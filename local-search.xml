<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2024/01/26/LeetCode/"/>
    <url>/2024/01/26/LeetCode/</url>
    
    <content type="html"><![CDATA[<h1 id="第一天-力扣-704-27"><a href="#第一天-力扣-704-27" class="headerlink" title="第一天 | 力扣 704 &amp; 27"></a>第一天 | 力扣 704 &amp; 27</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是存放在连续内存空间上的相同类型数据的集合</p></blockquote><p>需要注意：</p><ul><li>数组下标都是从 0 开始的</li><li>数组内存空间的地址是连续的</li><li>数组的元素是不能删的，只能覆盖</li></ul><p>因为数组在内存空间的地址是连续的，所以在删除或者增添元素的时候。难免需要移动其它元素的地址</p><h2 id="704、二分查找"><a href="#704、二分查找" class="headerlink" title="704、二分查找"></a>704、二分查找</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code></p><p>链接：<a href="https://leetcode.cn/problems/binary-search/">https://leetcode.cn/problems/binary-search/</a></p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入: nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>], target = <span class="hljs-number">9</span><br>输出: <span class="hljs-number">4</span><br>解释: <span class="hljs-number">9</span> 出现在 nums 中并且下标为 <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入: nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>], target = <span class="hljs-number">2</span><br>输出: -<span class="hljs-number">1</span><br>解释: <span class="hljs-number">2</span> 不存在 nums 中因此返回 -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p><strong>左闭右闭</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> nums[mid];<br>            <span class="hljs-keyword">if</span>(num &gt; target)&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(num &lt; target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> mid; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>左闭右开</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> nums[mid];<br>            <span class="hljs-keyword">if</span>(num &gt; target)&#123;<br>                right = mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; target)&#123;<br>                left = mid +  <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="27、移除元素"><a href="#27、移除元素" class="headerlink" title="27、移除元素"></a>27、移除元素</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>链接<a href="https://leetcode.cn/problems/remove-element/">https://leetcode.cn/problems/remove-element/</a></p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], val = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">2</span>, nums = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]<br>解释：函数应该返回新的长度 <span class="hljs-number">2</span>, 并且 nums 中的前两个元素均为 <span class="hljs-number">2</span>。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 <span class="hljs-number">2</span> ，而 nums = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>] 或 nums = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]，也会被视作正确答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>], val = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">5</span>, nums = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]<br>解释：函数应该返回新的长度 <span class="hljs-number">5</span>, 并且 nums 中的前五个元素为 <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。<br></code></pre></td></tr></table></figure><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p><strong>双指针</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; fast &lt; nums.length; fast++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[fast] != val)&#123;<br>                nums[slow] = nums[fast];<br>                slow ++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>暴力解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] == val)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; len; j++)&#123;<br>                    nums[j - <span class="hljs-number">1</span>] = nums[j];<br>                &#125;<br>                i--;<br>                len--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第二天-力扣-977-209-59"><a href="#第二天-力扣-977-209-59" class="headerlink" title="第二天 | 力扣  977 &amp; 209 &amp; 59"></a>第二天 | 力扣  977 &amp; 209 &amp; 59</h1><h2 id="977、有序数组的平方"><a href="#977、有序数组的平方" class="headerlink" title="977、有序数组的平方"></a>977、有序数组的平方</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p>链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p></blockquote><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>]<br>输出：[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">100</span>]<br>解释：平方后，数组变为 [<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">100</span>]<br>排序后，数组变为 [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">100</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [-<span class="hljs-number">7</span>,-<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">11</span>]<br>输出：[<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">49</span>,<span class="hljs-number">121</span>]<br></code></pre></td></tr></table></figure><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p><strong>双指针</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span>  nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-keyword">if</span>(nums[left] * nums[left] &gt; nums[right] * nums[right])&#123;<br>                result[index] = nums[left] * nums[left];<br>                index --;<br>                left ++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                result[index] = nums[right] * nums[right];<br>                index --;<br>                right --;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>暴力解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            result[i] = nums[i] * nums[i];<br>        &#125;<br>        Arrays.sort(result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="209、长度最小的子数组"><a href="#209、长度最小的子数组" class="headerlink" title="209、长度最小的子数组"></a>209、长度最小的子数组</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p>链接：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a></p></blockquote><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：target = <span class="hljs-number">7</span>, nums = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-number">2</span><br>解释：子数组 [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>] 是该条件下的长度最小的子数组。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：target = <span class="hljs-number">4</span>, nums = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：target = <span class="hljs-number">11</span>, nums = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-comment">// 放大窗口</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; right &lt; nums.length; right++)&#123;<br>            sum += nums[right];<br>            <span class="hljs-comment">// 缩小窗口</span><br>            <span class="hljs-keyword">while</span>(sum &gt;= target)&#123;<br>                result = Math.min(result, right - left + <span class="hljs-number">1</span>);<br>                sum -= nums[left];<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result  == Integer.MAX_VALUE ? <span class="hljs-number">0</span> : result; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="59、螺旋矩阵Ⅱ"><a href="#59、螺旋矩阵Ⅱ" class="headerlink" title="59、螺旋矩阵Ⅱ"></a>59、螺旋矩阵Ⅱ</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><p> 给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p>链接：<a href="https://leetcode.cn/problems/spiral-matrix-ii/">https://leetcode.cn/problems/spiral-matrix-ii/</a></p></blockquote><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：n = <span class="hljs-number">3</span><br>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：n = <span class="hljs-number">1</span><br>输出：[[<span class="hljs-number">1</span>]]<br></code></pre></td></tr></table></figure><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> i, j;<br>        <span class="hljs-type">int</span>[][] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-keyword">while</span>(loop++ &lt; n / <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">//上侧从左到右</span><br>            <span class="hljs-keyword">for</span>(j = start; j &lt; n - loop; j++)&#123;<br>                res[start][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">//右侧从上到下</span><br>            <span class="hljs-keyword">for</span>(i = start; i &lt; n - loop; i++)&#123;<br>                res[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">//下侧从右往左</span><br>            <span class="hljs-keyword">for</span>(;j &gt;= loop; j--)&#123;<br>                res[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">//右侧从下往上</span><br>            <span class="hljs-keyword">for</span>(;i &gt;= loop; i--)&#123;<br>                res[i][j] = count++;<br>            &#125;<br>            start++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            res[start][start] = count;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第三天-力扣-203-707-206"><a href="#第三天-力扣-203-707-206" class="headerlink" title="第三天 | 力扣 203 &amp; 707 &amp; 206"></a>第三天 | 力扣 203 &amp; 707 &amp; 206</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向 null（空指针的意思）</p><p>链表的入口节点称为链表的头节点也就是 head</p></blockquote><h3 id="链表的类型"><a href="#链表的类型" class="headerlink" title="链表的类型"></a>链表的类型</h3><p><strong>单链表</strong></p><ul><li>刚刚说的就是单链表</li></ul><p><strong>双链表</strong></p><ul><li>单链表中的指针域只能指向节点的下一个节点</li><li>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点</li><li>双链表既可以向前查询，也可以向后查询</li></ul><p><strong>循环链表</strong></p><ul><li>循环链表，就是链表首尾相连</li><li>循环链表可以用来解决约瑟夫环问题</li></ul><h3 id="链表的存储方式"><a href="#链表的存储方式" class="headerlink" title="链表的存储方式"></a>链表的存储方式</h3><ul><li><p>数组是在内存中连续分布的，但是链表在内存中可不是连续分布的</p></li><li><p>链表是通过指针域的指针链接在内存中各个节点</p></li></ul><p>所以，链表中的节点在内存中不是连续分布的，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>把链表的特性和数组的特性进行一个对比</p><table><thead><tr><th></th><th>插入&#x2F;删除（时间复杂度）</th><th>查询（时间复杂度）</th><th>适用场景</th></tr></thead><tbody><tr><td>数组</td><td>O(n)</td><td>O(1)</td><td>数据量固定，频繁查询，较少增删</td></tr><tr><td>链表</td><td>O(1)</td><td>O(n)</td><td>数据量不固定，频繁增删，较少查询</td></tr></tbody></table><p>数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组</p><p>链表的长度可以是不固定的，并且可以动态增删，适合数据量不固定，频繁增删，较少查询的场景</p><h2 id="203、移除链表元素"><a href="#203、移除链表元素" class="headerlink" title="203、移除链表元素"></a>203、移除链表元素</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p>链接：<a href="https://leetcode.cn/problems/remove-linked-list-elements/">https://leetcode.cn/problems/remove-linked-list-elements/</a></p></blockquote><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：head = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], val = <span class="hljs-number">6</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：head = [], val = <span class="hljs-number">1</span><br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：head = [<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>], val = <span class="hljs-number">7</span><br>输出：[]<br></code></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>直接使用原链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-comment">// 头结点不为空</span><br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">null</span> &amp;&amp; head.val == val)&#123;<br>            <span class="hljs-comment">// 删除元素</span><br>            head = head.next;<br>        &#125;<br>        <span class="hljs-comment">// 定义临时指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(cur.next.val == val)&#123;<br>                cur.next = cur.next.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur = cur.next; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>设置一个虚拟头结点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-comment">// 定义虚拟头结点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>, head);<br>        dummyHead.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummyHead;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(cur.next.val == val)&#123;<br>                cur.next =  cur.next.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur =  cur.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="707、设计链表"><a href="#707、设计链表" class="headerlink" title="707、设计链表"></a>707、设计链表</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><blockquote><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p><p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。</p><p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p><p>实现 <code>MyLinkedList</code> 类：</p><ul><li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li><li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li><li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li><li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li><li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li><li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li></ul><p>链接：<a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a></p></blockquote><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">输入<br>[<span class="hljs-string">&quot;MyLinkedList&quot;</span>, <span class="hljs-string">&quot;addAtHead&quot;</span>, <span class="hljs-string">&quot;addAtTail&quot;</span>, <span class="hljs-string">&quot;addAtIndex&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;deleteAtIndex&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>]<br>[[], [<span class="hljs-number">1</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>]]<br>输出<br>[<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>]<br><br>解释<br><span class="hljs-type">MyLinkedList</span> <span class="hljs-variable">myLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLinkedList</span>();<br>myLinkedList.addAtHead(<span class="hljs-number">1</span>);<br>myLinkedList.addAtTail(<span class="hljs-number">3</span>);<br>myLinkedList.addAtIndex(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);    <span class="hljs-comment">// 链表变为 1-&gt;2-&gt;3</span><br>myLinkedList.get(<span class="hljs-number">1</span>);              <span class="hljs-comment">// 返回 2</span><br>myLinkedList.deleteAtIndex(<span class="hljs-number">1</span>);    <span class="hljs-comment">// 现在，链表变为 1-&gt;3</span><br>myLinkedList.get(<span class="hljs-number">1</span>);              <span class="hljs-comment">// 返回 3</span><br></code></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode next;<br>    ListNode()&#123;&#125;<br>    ListNode(<span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-built_in">this</span>.val=val;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-comment">// size存储链表元素的个数</span><br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-comment">// 虚拟头结点</span><br>    ListNode head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        size = <span class="hljs-number">0</span>;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt;= size)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i  &lt;= index;  i++)&#123;<br>            cur =  cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>,  val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index &gt; size)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>)&#123;<br>            index = <span class="hljs-number">0</span>;<br>        &#125;<br>        size++;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++)&#123;<br>            pre = pre.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        add.next = pre.next;<br>        pre.next = add;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            head = head.next;<br>    <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index ; i++) &#123;<br>            pred = pred.next;<br>        &#125;<br>        pred.next = pred.next.next;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="hljs-comment"> * int param_1 = obj.get(index);</span><br><span class="hljs-comment"> * obj.addAtHead(val);</span><br><span class="hljs-comment"> * obj.addAtTail(val);</span><br><span class="hljs-comment"> * obj.addAtIndex(index,val);</span><br><span class="hljs-comment"> * obj.deleteAtIndex(index);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2024/01/22/Redis/"/>
    <url>/2024/01/22/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="初识-Redis"><a href="#初识-Redis" class="headerlink" title="初识  Redis"></a>初识  Redis</h2><h3 id="认识-NoSQL"><a href="#认识-NoSQL" class="headerlink" title="认识 NoSQL"></a>认识 NoSQL</h3><table><thead><tr><th></th><th>SQL</th><th>NoSQL</th></tr></thead><tbody><tr><td>数据结构</td><td>结构化（Structured）</td><td>非结构化</td></tr><tr><td>数据关联</td><td>关联的（Relational）</td><td>无关联的</td></tr><tr><td>查询方式</td><td>SQL 查询</td><td>非 SQL</td></tr><tr><td>事务特性</td><td>ACID</td><td>BASE</td></tr><tr><td>存储方式</td><td>磁盘</td><td>内存</td></tr><tr><td>扩展性</td><td>垂直</td><td>水平</td></tr><tr><td>使用场景</td><td>1）数据结构固定<br />2）相关业务对数据安全性、一致性要求较高</td><td>1）数据结构不固定<br />2）对一致性、安全性要求不高<br />3）对性能要求</td></tr></tbody></table><h3 id="认识-Redis"><a href="#认识-Redis" class="headerlink" title="认识 Redis"></a>认识 Redis</h3><p>特征：</p><ul><li>键值（key-value）型，value  支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO 多路复用、良好的编码）</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h2 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><h3 id="数据结构介绍"><a href="#数据结构介绍" class="headerlink" title="数据结构介绍"></a>数据结构介绍</h3><blockquote><p>Redis 是一个 key-value 的数据库，key 一般是 String  类型，不过 value 的类型多种多样</p><p>官网（<a href="https://redis.io/commands%EF%BC%89">https://redis.io/commands）</a></p></blockquote><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>String</td><td>hello world</td></tr><tr><td>Hash</td><td>{name: “Jack”, age: 21}</td></tr><tr><td>List</td><td>[A -&gt;  B -&gt;  C-&gt; C]</td></tr><tr><td>Set</td><td>{A, B, C}</td></tr><tr><td>SortedSet</td><td>{A: 1, B: 2, C: 3}</td></tr><tr><td>GEO</td><td>{A: (120.3, 30.6)}</td></tr><tr><td>BitMap</td><td>0110110101110101011</td></tr><tr><td>HyperLog</td><td>0110110101110101011</td></tr></tbody></table><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>通用命令是不分数据类型的，都可以使用的命令</p><ul><li>KEYS：查看符合模板的所有 key，<font color = '#DC143C'><strong>不建议在生产环境设备上使用</strong> </font></li><li>DEL：删除一个指定的 key</li><li>EXISTS：判断 key 是否存在</li><li>EXPIRE：给一个 key 设置有效期，有效期到期时该  key 会被自动删除</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看keys命令的帮助信息：</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">help</span> keys<br><br>KEYS pattern<br>summary: Find all keys matching the given pattern<br>since: 1.0.0<br>group: generic<br></code></pre></td></tr></table></figure><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String  类型"></a>String  类型</h3><blockquote><p>String 类型，也就是字符串类型，是 Redis 中最简单的存储类型</p></blockquote><p>其 value 是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m</p><table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>msg</td><td>hello world</td></tr><tr><td>num</td><td>10</td></tr><tr><td>score</td><td>92.5</td></tr></tbody></table><h4 id="String-常见命令"><a href="#String-常见命令" class="headerlink" title="String 常见命令"></a>String 常见命令</h4><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个 String 类型的键值对</li><li>GET：根据key获取 String 类型的 value</li><li>MSET：批量添加多个 String 类型的键值对</li><li>MGET：根据多个 key 获取多个 String 类型的 value</li><li>INCR：让一个整型的 key 自增1</li><li>INCRBY：让一个整型的 key 自增并指定步长，例如：incrby num 2 让 num 值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个 String 类型的键值对，前提是这个 key 不存在，否则不执行</li><li>SETEX：添加一个 String 类型的键值对，并且指定有效期</li></ul><h4 id="Key-结构"><a href="#Key-结构" class="headerlink" title="Key 结构"></a>Key 结构</h4><blockquote><p>Redis 没有类似 MySQL中 的 Table 的概念，该如何区分不同类型的 key 呢？</p></blockquote><p>例如，需要存储用户、商品信息到 redis，有一个用户 id 是1，有一个商品 id 恰好也是1，此时如果使用 id 作为 key，那就会冲突了，该怎么办？</p><p>答：可以通过给 key 添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis 的 key 允许有多个单词形成层级结构，多个单词之间用 ‘:’ 隔开，格式如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[项目名]</span>:<span class="hljs-comment">[业务名]</span>:<span class="hljs-comment">[类型]</span>:<span class="hljs-comment">[id]</span><br></code></pre></td></tr></table></figure><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。这样以来，我们就可以把不同类型的数据区分开了。从而避免了key的冲突问题。</p><p>例如项目名称叫 hanyang，有 user 和 product 两种不同类型的数据，可以这样定义 key：</p><ul><li><p>user相关的key：<strong>hanyang:user:1</strong></p></li><li><p>product相关的key：<strong>hanyang:product:1</strong></p></li></ul><h3 id="Hash-类型"><a href="#Hash-类型" class="headerlink" title="Hash 类型"></a>Hash 类型</h3><blockquote><p>Hash 类型，也叫散列，其 value 是一个无序字典，类似于 Java 中的 HashMap 结构</p></blockquote><p>Hash 的常见命令有：</p><ul><li><p>HSET key field value：添加或者修改 hash 类型 key 的 field 的值</p></li><li><p>HGET key field：获取一个 hash 类型 key 的 field 的值</p></li><li><p>HMSET：批量添加多个 hash 类型 key 的 field 的值</p></li><li><p>HMGET：批量获取多个 hash 类型 key 的 field 的值</p></li><li><p>HGETALL：获取一个 hash 类型的 key 中的所有的 field 和 value</p></li><li><p>HKEYS：获取一个 hash 类型的 key 中的所有的 field</p></li><li><p>HINCRBY:让一个 hash 类型 key 的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个 hash 类型的 key 的 field 值，前提是这个 field 不存在，否则不执行</p></li></ul><h3 id="List-类型"><a href="#List-类型" class="headerlink" title="List 类型"></a>List 类型</h3><blockquote><p>Redis 中的 List 类型与 Java 中的 LinkedList 类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索</p></blockquote><p>特征也与 LinkedList 类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p>List的常见命令有：</p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回 nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与 LPOP 和 RPOP 类似，只不过在没有元素时等待指定时间，而不是直接返回 nil</li></ul><blockquote><p>如何利用 List 结构模拟一个栈？</p></blockquote><ul><li>入口和出口在同一边</li></ul><blockquote><p>如何利用 List 结构模拟一个队列？</p></blockquote><ul><li>入口和出口在不同边</li></ul><blockquote><p>如何利用 List 结构模拟一个阻塞队列？</p></blockquote><ul><li>入口和出口在不同边</li><li>出队时采用 BLPOP 或  BRPOP</li></ul><h3 id="Set-类型"><a href="#Set-类型" class="headerlink" title="Set 类型"></a>Set 类型</h3><blockquote><p>Redis 的 Set 结构与 Java 中的 HashSet 类似，可以看做是一个 value 为 null 的 HashMap。因为也是一个 hash 表，因此具备与 HashSet 类似的特征：</p></blockquote><ul><li><p>无序</p></li><li><p>元素不可重复</p></li><li><p>查找快</p></li><li><p>支持交集、并集、差集等功能</p></li></ul><p>Set的常见命令有：</p><ul><li>SADD key member … ：向 set 中添加一个或多个元素</li><li>SREM key member … : 移除 set 中的指定元素</li><li>SCARD key： 返回 set 中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于 set 中</li><li>SMEMBERS：获取 set 中的所有元素</li><li>SINTER key1 key2 … ：求 key1 与 key2 的交集</li></ul><h3 id="SortedSet-类型"><a href="#SortedSet-类型" class="headerlink" title="SortedSet 类型"></a>SortedSet 类型</h3><blockquote><p>Redis 的 SortedSet 是一个可排序的 set 集合，与 Java 中的 TreeSet 有些类似，但底层数据结构却差别很大。SortedSet 中的每一个元素都带有一个 score 属性，可以基于 score 属性对元素排序，底层的实现是一个跳表（SkipList）加 hash 表</p></blockquote><p>SortedSet 具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为 SortedSet 的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet 的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到 sorted set ，如果已经存在则更新其 score 值</li><li>ZREM key member：删除 sorted set 中的一个指定元素</li><li>ZSCORE key member : 获取 sorted set 中的指定元素的score值</li><li>ZRANK key member：获取 sorted set 中的指定元素的排名</li><li>ZCARD key：获取 sorted set 中的元素个数</li><li>ZCOUNT key min max：统计 score 值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让 sorted set 中的指定元素自增，步长为指定的 increment 值</li><li>ZRANGE key min max：按照 score 排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定 score 范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加 REV 即可，例如：</p><ul><li><p><strong>升序</strong>获取 sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取 sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul><h2 id="Redis-的-Java-客户端"><a href="#Redis-的-Java-客户端" class="headerlink" title="Redis 的 Java 客户端"></a>Redis 的 Java 客户端</h2><blockquote><p>官网（<a href="https://redis.io/docs/clients/%EF%BC%89">https://redis.io/docs/clients/）</a></p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202401221645926.png"></p><h3 id="Jedis-客户端"><a href="#Jedis-客户端" class="headerlink" title="Jedis 客户端"></a>Jedis 客户端</h3><blockquote><p>官网（ <a href="https://github.com/redis/jedis%EF%BC%89">https://github.com/redis/jedis）</a></p></blockquote><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><p>1）引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）建立连接</p><p>新建一个单元测试类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Jedis jedis;<br><br><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.建立连接</span><br>    <span class="hljs-comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span><br>    jedis = JedisConnectionFactory.getJedis();<br>    <span class="hljs-comment">// 2.设置密码</span><br>    jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>    <span class="hljs-comment">// 3.选择库</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 存入数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 插入hash数据</span><br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>);<br><br>    <span class="hljs-comment">// 获取</span><br>    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="hljs-string">&quot;user:1&quot;</span>);<br>    System.out.println(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>4）释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>Jedis 本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐使用 Jedis 连接池代替 Jedis 的直连方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.jedis.util;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        poolConfig.setMaxWaitMillis(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;192.168.150.101&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringDataRedis-客户端"><a href="#SpringDataRedis-客户端" class="headerlink" title="SpringDataRedis 客户端"></a>SpringDataRedis 客户端</h3><blockquote><p>SpringData 是 Spring 中数据操作的模块，包含对各种数据库的集成，其中对 Redis 的集成模块就叫做 SpringDataRedis，官网地址（<a href="https://spring.io/projects/spring-data-redis%EF%BC%89">https://spring.io/projects/spring-data-redis）</a></p></blockquote><ul><li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）</li><li>提供了 RedisTemplate 统一 API 来操作 Redis</li><li>支持 Redis 的发布订阅模型</li><li>支持 Redis 哨兵和 Redis 集群</li><li>支持基于 Lettuce 的响应式编程</li><li>支持基于 JDK、JSON、字符串、Spring 对象的数据序列化及反序列化</li><li>支持基于 Redis 的 JDKCollection 实现</li></ul><p>SpringDataRedis 中提供了 RedisTemplate 工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作 API 封装到了不同的类型中</p><table><thead><tr><th>API</th><th>返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>redisTemplate.opsForValue()</td><td>ValueOpeartions</td><td>操作 String 类型数据</td></tr><tr><td>redisTemplate.opsForHash()</td><td>HashOperations</td><td>操作 Hash 类型数据</td></tr><tr><td>redisTemplate.opsForList()</td><td>ListOperations</td><td>操作 List 类型数据</td></tr><tr><td>redisTemplate.opsForSet()</td><td>SetOperations</td><td>操作 Set 类型数据</td></tr><tr><td>redisTemplate.opsForZSet()</td><td>ZSetOperations</td><td>操作 SortedSet 类型数据</td></tr><tr><td>redisTemplate</td><td></td><td>通用的命令</td></tr></tbody></table><h4 id="快速上手-1"><a href="#快速上手-1" class="headerlink" title="快速上手"></a>快速上手</h4><p>1）引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hanyang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--redis依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--common-pool--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Jackson依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）配置 Redis</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">100ms</span><br></code></pre></td></tr></table></figure><p>3）注入 RedisTemplate</p><p>因为有了 SpringBoot 的自动装配，可以拿来就用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><p>4）编写测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate edisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 写入一条String数据</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;renkelin&quot;</span>);<br>        <span class="hljs-comment">// 获取string数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h3><p>可以自定义 RedisTemplate 的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span>&#123;<br>        <span class="hljs-comment">// 创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">// 创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>        <span class="hljs-comment">// 设置Key的序列化</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br>        <span class="hljs-comment">// 设置Value的序列化</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h3><blockquote><p>为了节省内存空间，可以不使用 JSON 序列化器来处理 value，而是统一使用 String 序列化器，要求只能存储 String 类型的 key 和 value。当需要存储 Java 对象时，手动完成对象的序列化和反序列化</p></blockquote><p>省去了自定义 RedisTemplate 的序列化方式的步骤，而是直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><span class="hljs-comment">// JSON序列化工具</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;renkelin&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入数据</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:200&quot;</span>, json);<br><br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:200&quot;</span>);<br>    <span class="hljs-comment">// 手动反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mapper.readValue(jsonUser, User.class);<br>    System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>RedisTemplate 的两种序列化实践方案</p></blockquote><p>方案一：</p><ol><li>自定义 RedisTemplate</li><li>修改 RedisTemplate 的序列化器为 GenericJackson RedisSerializer</li></ol><p>方案二：</p><ol><li>使用 StringRedisTemplate</li><li>写入 Redis 时，手动把对象序列化为 JSON</li><li>读取 Redis 时，手动把读取到的 JSON 反序列化为对象</li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><blockquote><p><strong>缓存</strong>就是数据交换的缓冲区（称作 Cache），是存储数据的临时地方，一般读写性能较高</p></blockquote><p>缓存的作用：</p><ul><li>降低后端负载</li><li>提高读写效率，降低响应时间</li></ul><p>缓存的成本：</p><ul><li>数据一致性成本</li><li>代码维护成本</li><li>运维成本</li></ul><h3 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h3><table><thead><tr><th></th><th>内存淘汰</th><th>超时剔除</th><th>主动更新</th></tr></thead><tbody><tr><td>说明</td><td>不用自己维护，利用 Redis 的内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时跟更新缓存</td><td>给缓存数据添加 TTL 时间，到期后自动删除缓存。下次查询时更新缓存</td><td>编写业务逻辑，在修改数据库的同时，更新缓存</td></tr><tr><td>一致性</td><td>差</td><td>一般</td><td>好</td></tr><tr><td>维护成本</td><td>无</td><td>低</td><td>高</td></tr></tbody></table><p>业务场景：</p><ul><li>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存</li><li>高一致性需求：主动更新，并以超时剔除为兜底方案。例如店铺详情查询的缓存</li></ul><h4 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h4><ol><li><font color = '#DC143C'><strong>Cache Aside  Pattern（常用）</strong> </font>：由缓存的调用者，在更新数据库的同时更新缓存</li><li><font color = '#DC143C'><strong>Read&#x2F;Write Through Pattern</strong> </font>：缓存与数据库整合为一个服务，由服务来维护一致性。调用者调用该服务，无需关心缓存一致性问题</li><li><font color = '#DC143C'><strong>Write Behind Caching Pattern</strong> </font>：调用者只操作缓存，由其它线程异步的将缓存数据持久化到数据库，保证最终一致</li></ol><p>操作缓存和数据库时有三个问题需要考虑：</p><ol><li>删除缓存还是更新缓存？<ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多（×）</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存（√）</li></ul></li><li>如何保证缓存与数据库操作的同时成功或失败？<ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用 TCC 等分布式事务方案</li></ul></li><li>先操作缓存还是先操作数据库？<ul><li>先删除缓存，再操作数据库</li><li>先操作数据库，再删除缓存</li></ul></li></ol><h4 id="最佳实践方案"><a href="#最佳实践方案" class="headerlink" title="最佳实践方案"></a>最佳实践方案</h4><ol><li>低一致性需求：使用 Redis 自带的内存淘汰机制</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案<ul><li>读操作：<ul><li>缓存命中则直接返回</li><li>缓存未命中则查询数据库，并写入缓存，设定超时时间</li></ul></li><li>写操作：<ul><li>先写数据库，然后再删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backend</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Newsletter</title>
    <link href="/2023/11/05/Newsletter/"/>
    <url>/2023/11/05/Newsletter/</url>
    
    <content type="html"><![CDATA[<h1 id="C-，Java，Python如何工作"><a href="#C-，Java，Python如何工作" class="headerlink" title="C++，Java，Python如何工作"></a>C++，Java，Python如何工作</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051445255.gif"></p><ul><li>编译语言由编译器编译成机器代码。机器代码随后可以由 CPU 直接执行。示例：C、C++、Go</li><li>像 Java 这样的字节码语言，首先将源代码编译成字节码，然后 JVM 执行程序。有时 JIT（Just-In-Time）编译器会将源代码编译为机器代码以加快执行速度。示例：Java、C#</li><li>解释型语言不被编译。它们在运行时由解释器解释。示例：Python、Javascript、Ruby</li><li>一般来说，编译语言比解释语言运行得更快</li></ul><h1 id="当在浏览器中输入-URL-时会发生什么？"><a href="#当在浏览器中输入-URL-时会发生什么？" class="headerlink" title="当在浏览器中输入 URL 时会发生什么？"></a>当在浏览器中输入 URL 时会发生什么？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051521566.webp"></p><ul><li>步骤 1：用户在浏览器中输入 URL（<a href="http://www.bytebytego.com)并按/">www.bytebytego.com）并按</a> Enter。我们需要做的第一件事是将 URL 转换为 IP 地址。映射通常存储在缓存中，因此浏览器会在多层缓存中查找 IP 地址：浏览器缓存、操作系统缓存、本地缓存和 ISP 缓存。如果浏览器在缓存中找不到该映射，则会请求 DNS（域名系统）解析器进行解析</li><li>步骤 2：如果在任何缓存中都找不到 IP 地址，则浏览器将前往 DNS 服务器进行递归 DNS 查找，直到找到 IP 地址</li><li>步骤3：现在我们有了服务器的IP地址，浏览器向服务器发送HTTP请求。为了安全访问服务器资源，我们应该始终使用 HTTPS。它首先通过 TCP 3 次握手与服务器建立 TCP 连接。然后它将公钥发送给客户端。客户端使用公钥加密会话密钥并发送给服务器。服务器使用私钥来解密会话密钥。客户端和服务器现在可以使用会话密钥交换加密数据</li><li>步骤4：服务器处理请求并发回响应。对于成功的响应，状态代码为 200。响应中有 3 部分：HTML、CSS 和 Javascript。浏览器解析HTML并生成DOM树。它还解析 CSS 并生成 CSSOM 树。然后它结合 DOM 树和 CSSOM 树来渲染树。浏览器将内容呈现并显示给用户</li></ul><h1 id="8-种流行的网络协议"><a href="#8-种流行的网络协议" class="headerlink" title="8 种流行的网络协议"></a>8 种流行的网络协议</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051527113.webp"></p><p>1、HTTP（超文本传输协议）</p><ul><li>HTTP 是一种用于获取 HTML 文档等资源的协议。它是 Web 上任何数据交换的基础，是一种客户端-服务器协议</li></ul><p>2、HTTP&#x2F;3</p><ul><li>HTTP&#x2F;3 是 HTTP 的下一个主要修订版。它运行在 QUIC 上，这是一种专为移动互联网使用而设计的新传输协议。它依赖于 UDP 而不是 TCP，从而实现更快的网页响应。 VR 应用程序需要更多带宽来渲染虚拟场景的复杂细节，并且可能会从迁移到由 QUIC 提供支持的 HTTP&#x2F;3 中受益</li></ul><p>3、HTTPS（安全超文本传输协议）</p><ul><li>HTTPS 扩展了 HTTP 并使用加密来实现安全通信</li></ul><p>4、WebSocket</p><ul><li>WebSocket 是一种通过 TCP 提供全双工通信的协议。客户端建立WebSocket来接收来自后端服务的实时更新。与总是 “拉取” 数据的 REST 不同，WebSocket 允许 “推送” 数据。在线游戏、股票交易和消息传递应用程序等应用程序利用 WebSocket 进行实时通信</li></ul><p>5、TCP（传输控制协议）</p><ul><li>TCP 旨在通过互联网发送数据包，并确保通过网络成功传送数据和消息。许多应用层协议构建在 TCP 之上</li></ul><p>6、UDP（用户数据报协议）</p><ul><li>UDP 直接将数据包发送到目标计算机，无需先建立连接。 UDP 通常用于时间敏感的通信，其中偶尔丢弃数据包比等待更好。语音和视频流量通常使用此协议发送</li></ul><p>7、SMTP（简单邮件传输协议）</p><ul><li>SMTP 是一种用于将电子邮件从一个用户传输到另一个用户的标准协议</li></ul><p>8、FTP（文件传输协议）</p><ul><li>FTP 用于在客户端和服务器之间传输计算机文件。它具有单独的控制通道和数据通道连接</li></ul><h1 id="Token，Cookie，Session"><a href="#Token，Cookie，Session" class="headerlink" title="Token，Cookie，Session"></a>Token，Cookie，Session</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101312292.webp"></p><p>这些术语都与用户身份管理相关。当您登录网站时，您声明您是谁（身份）。您的身份已得到验证（身份验证），并且您被授予必要的权限（授权）。过去已经提出了许多解决方案，并且这个列表还在不断增加</p><p>从简单到复杂，以下是对用户身份管理的理解：</p><ul><li>WWW-Authenticate 是最基本的方法。浏览器会要求您输入用户名和密码。由于无法控制登录生命周期，目前很少使用</li><li>对登录生命周期更精细的控制是session-cookie。服务器维护会话存储，浏览器保存会话的ID。 Cookie 通常仅适用于浏览器，对移动应用程序不友好</li><li>为了解决兼容性问题，可以使用token。客户端将令牌发送到服务器，服务器验证令牌。缺点是需要对token进行加密和解密，这可能比较耗时</li><li>JWT 是表示令牌的标准方式。该信息可以被验证和信任，因为它是经过数字签名的。由于JWT包含签名，因此不需要在服务器端保存会话信息</li><li>通过使用 SSO（单点登录），您只需登录一次即可登录多个网站。它使用CAS（中央认证服务）来维护跨站点信息</li><li>通过使用OAuth 2.0，您可以授权一个网站访问您在另一网站上的信息</li></ul><h1 id="REST-API-的基础：HTTP"><a href="#REST-API-的基础：HTTP" class="headerlink" title="REST API 的基础：HTTP"></a>REST API 的基础：HTTP</h1><h2 id="什么是超文本？"><a href="#什么是超文本？" class="headerlink" title="什么是超文本？"></a>什么是超文本？</h2><ul><li>HTTP，即超文本传输协议，其名称来源于 “超文本”</li><li>想象一下通过超链接的魔力将文本、图像和视频拼接在一起的混合体。这些链接充当门户，允许我们从一组超文本跳转到另一组超文本。 HTML（即超文本标记语言）是超文本的一个主要示例</li><li>HTML 是纯文本文件。它包含许多定义图像、视频等链接的标签。浏览器解释这些标签后，将看似普通的文本文件转变为充满文本和图像的网页</li></ul><h2 id="HTTP-1-1、HTTP-2-和-HTTP-3"><a href="#HTTP-1-1、HTTP-2-和-HTTP-3" class="headerlink" title="HTTP&#x2F;1.1、HTTP&#x2F;2 和 HTTP&#x2F;3"></a>HTTP&#x2F;1.1、HTTP&#x2F;2 和 HTTP&#x2F;3</h2><p>自 1989 年 0.9 版本问世以来，HTTP 经历了重大变革。让我们回顾一下每个版本的 HTTP 所解决的问题。下图显示了主要改进：</p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051626560.webp"></p><ul><li>HTTP&#x2F;1.0 于 1996 年最终确定并正式记录。该版本有一个关键限制：对同一服务器的每个请求都需要单独的 TCP 连接</li><li>接下来，HTTP&#x2F;1.1 于 1997 年问世。它引入了“持久连接”的概念，这意味着 TCP 连接可以保持打开状态以供重用。尽管有这样的增强，HTTP&#x2F;1.1 仍无法解决 “队头” (HOL) 阻塞问题。简单来说，当浏览器中的所有并行请求槽都被填满时，就会发生 HOL 阻塞，从而迫使后续请求等待直到先前的请求完成</li><li>HTTP&#x2F;2.0 于 2015 年发布，旨在解决 HOL 阻塞问题。它实现了 “请求多路复用”，这是一种消除应用层 HOL 阻塞的策略。如下图所示，HTTP&#x2F;2.0 引入了 HTTP “流” 的概念。这种抽象允许将不同的 HTTP 交换复用到同一个 TCP 连接上，使我们无需按顺序发送每个流。然而，HOL 阻塞仍然可能发生在传输 (TCP) 层</li><li>HTTP&#x2F;3.0 于2020年发布草案首次亮相，定位为 HTTP&#x2F;2.0 的后继者，以 QUIC 取代TCP作为底层传输协议。这有效地消除了传输层的 HOL 阻塞。 QUIC 基于 UDP。它将流作为传输层的一等公民引入。 QUIC 流共享相同的 QUIC 连接，不需要额外的握手或缓慢启动来创建新的连接。 QUIC 流是独立交付的。这意味着在大多数情况下，一个流中的数据包丢失不会影响其他流</li></ul><h2 id="HTTP-标头"><a href="#HTTP-标头" class="headerlink" title="HTTP 标头"></a>HTTP 标头</h2><ul><li>HTTP 标头在客户端和服务器如何发送和接收数据方面发挥着至关重要的作用。它们为这些实体提供了一种结构化的方式来传达有关请求或响应的重要元数据。此元数据可以包含各种信息，例如发送的数据类型、长度、压缩方式等</li><li>HTTP 标头由多个字段组成，每个字段都有特定的作用和含义</li></ul><h2 id="HTTP-字段"><a href="#HTTP-字段" class="headerlink" title="HTTP 字段"></a>HTTP 字段</h2><ul><li>Host：这是服务器的域名</li><li>Content-Length：请求或响应标头中的该字段在数据传输中起着至关重要的作用。它具体指示请求或响应正文的大小（以字节为单位）。这有助于接收方了解当前消息何时结束，并为下一条消息做好准备，特别是在通过同一连接发送多个 HTTP 消息的情况下</li><li>Connection：此字段在 HTTP 持久连接中至关重要，其中单个 TCP 连接用于发送和接收多个 HTTP 请求和响应</li><li>Content-type：该字段告诉客户端它正在接收的数据的格式</li><li>Content-encoding：该字段指示数据使用的压缩格式。例如，如果客户端看到 “gzip” 编码，它就知道需要解压缩数据</li></ul><h2 id="HTTP-GET-与-HTTP-POST"><a href="#HTTP-GET-与-HTTP-POST" class="headerlink" title="HTTP GET 与 HTTP POST"></a>HTTP GET 与 HTTP POST</h2><p>HTTP 协议定义了各种方法或 “动词” 来对 Web 资源执行不同的操作。常用的有GET、POST、PUT、DELETE，常用于读取、创建、更新、删除资源。不太常见的方法包括 HEAD、CONNECT、OPTIONS、TRACE 和 PATCH</p><ul><li>HTTP GET：此方法通过 URL 从服务器检索资源，不会产生任何其他效果。由于 GET 请求通常缺少有效负载主体，因此它们支持网页的书签、共享和缓存</li><li>HTTP POST：此方法根据负载主体与资源进行交互。交互根据资源类型而变化。例如，如果我们在购买 iPhone 15 后留下评论，则单击 “提交” 会向服务器发送 POST 请求，并在消息正文中包含评论。虽然 HTTP 协议本身对 POST 请求中消息正文的大小没有明确的限制，但实际上，浏览器和服务器通常会施加自己的限制</li></ul><h2 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h2><p>每个浏览器都实现了其独特的内存缓存系统。通过在本地缓存请求-响应对，数据检索速度更快。虽然缓存实现可能有所不同，但它始于 HTTP 缓存指令：Cache-Control 和 Expires</p><ul><li>Cache-Control 告诉浏览器可以缓存数据多长时间。这是一个相对时间</li><li>Expires 设置数据过期的绝对日期和时间</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ul><li>HTTP通过网络传输明文，存在信息泄露的风险。 HTTPS（安全超文本传输协议）通过结合 TLS（传输层安全性）或 SSL（安全套接字层）来加密消息，从而降低了这种风险。这意味着任何截获的数据都将是不可读的二进制代码</li></ul><h3 id="HTTP-和-HTTPS-有什么区别？"><a href="#HTTP-和-HTTPS-有什么区别？" class="headerlink" title="HTTP 和 HTTPS 有什么区别？"></a>HTTP 和 HTTPS 有什么区别？</h3><ol><li><p>建立 HTTP 连接很简单，但 HTTPS 需要在 TCP 3 次握手之后进行 SSL&#x2F;TLS 握手，然后才能传输加密消息</p></li><li><p>HTTP 的默认端口是 80，HTTPS 的默认端口是 443</p></li><li><p>HTTPS 需要来自 CA（证书颁发机构）的数字证书来验证服务器的可信度</p></li></ol><h3 id="HTTPS-是如何工作的？"><a href="#HTTPS-是如何工作的？" class="headerlink" title="HTTPS 是如何工作的？"></a>HTTPS 是如何工作的？</h3><ul><li>步骤 1 - 客户端（浏览器）和服务器建立 TCP 连接</li><li>步骤 2 - 客户端向服务器发送 “客户端问候”。该消息包含一组必要的加密算法（密码套件）及其可以支持的最高 TLS 版本。服务器响应 “服务器问候”，确认算法和 TLS 版本的兼容性。然后，服务器将其 SSL 证书发送给客户端进行验证。证书包含公钥、主机名、到期日期等</li><li>步骤 3 - 验证 SSL 证书后，客户端生成会话密钥，使用公钥对其进行加密，然后将其发送到服务器。服务器接收加密的会话密钥并使用其私钥对其进行解密</li><li>步骤 4 - 现在客户端和服务器都拥有相同的会话密钥（对称加密），它们可以在双向通道中安全地交换加密数据</li></ul><h3 id="为什么HTTPS改用对称加密进行数据传输？"><a href="#为什么HTTPS改用对称加密进行数据传输？" class="headerlink" title="为什么HTTPS改用对称加密进行数据传输？"></a>为什么HTTPS改用对称加密进行数据传输？</h3><ol><li>安全性：初次握手后，客户端和服务器都切换到使用共享密钥的对称加密。该密钥是为该特定会话生成的，并且只有客户端和服务器知道。由于该密钥永远不会通过网络传输，因此窃听者几乎不可能获得它。即使攻击者设法解密一个会话的数据，下一个会话也将使用不同的密钥，从而限制潜在的损害</li><li>效率：对称加密算法的效率明显高于非对称加密算法。非对称加密涉及大量复杂的数学运算，计算成本很高，并且会减慢数据传输速度。对称加密使用简单的操作（如异或和位移位），使其速度更快，更适合加密大量数据</li></ol><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051642532.webp"></p><h2 id="HTTPS-可靠吗？"><a href="#HTTPS-可靠吗？" class="headerlink" title="HTTPS 可靠吗？"></a>HTTPS 可靠吗？</h2><ul><li>是的，HTTPS 对于保护传输中的数据是可靠的。然而，其可靠性在很大程度上取决于证书颁发机构 (CA) 的可信度和客户端环境的安全性</li><li>Fiddler 等工具通过在客户端和服务器之间创建桥梁来充当 “中间主”(MITM)。它有效地创建了两个独立的 HTTPS 连接：一个与客户端连接，另一个与服务器连接</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HTTP 是 RESTful 服务的基础，它利用其简单且广泛使用的请求响应机制来促进浏览器和服务器之间的通信</p><h1 id="了解数据库类型"><a href="#了解数据库类型" class="headerlink" title="了解数据库类型"></a>了解数据库类型</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051451242.webp"></p><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><p>关系数据库基于关系模型，它将数据组织成具有行和列的表。这些数据库由于其强大的一致性、对复杂查询的支持以及对 ACID 属性（原子性、一致性、隔离性、持久性）的遵守，已成为许多应用程序的标准选择。关系数据库的主要特性和优点包括：</p><ul><li>结构化数据组织：关系数据库中的数据存储在具有预定义架构的表中，从而在整个数据库中强制采用一致的结构。这种组织使得管理和维护数据变得更加容易，特别是在处理大量结构化数据时</li><li>关系和参照完整性：关系数据库中表之间的关系由主键和外键定义，确保参照完整性。该功能可以高效查询相关数据并支持复杂的数据关系</li><li>SQL 支持：关系数据库使用结构化查询语言 (SQL) 来查询、操作和管理数据。 SQL 是一种功能强大且广泛采用的语言，使开发人员能够执行复杂的查询和数据操作</li><li>事务和 ACID 属性：关系数据库支持事务，事务是一组整体成功或失败的相关操作。此功能可确保维护 ACID 属性（原子性、一致性、隔离性和持久性），从而保证数据的一致性和完整性</li><li>索引和优化：关系数据库提供各种索引技术和查询优化策略，有助于提高查询性能并减少资源消耗</li></ul><p>关系数据库也有一些缺点：</p><ul><li>可扩展性有限：水平扩展关系数据库（添加更多节点）可能具有挑战性，特别是与某些专为分布式环境设计的 NoSQL 数据库相比</li><li>刚性：关系数据库中的预定义模式很难适应不断变化的需求，因为更改模式可能需要对现有数据和应用程序进行重大修改</li><li>大型数据集的性能问题：随着数据量的增长，关系数据库可能会遇到性能问题，特别是在处理复杂查询和大规模数据操作时</li><li>对于非结构化或半结构化数据效率低下：关系数据库是为结构化数据设计的，可能不适合管理非结构化或半结构化数据，例如社交媒体数据或传感器数据</li></ul><p>流行的关系数据库包括 MySQL、PostgreSQL、Microsoft SQL Server 和 Oracle。每个选项都有其独特的功能、优点和缺点，使其适合不同的用例和要求。在考虑关系数据库时，必须评估应用程序在数据一致性、复杂查询支持和可扩展性等方面的具体需求</p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051503233.webp"></p><h2 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h2><p>NoSQL 数据库的开发是为了应对关系数据库的局限性，特别是在某些条件下的可扩展性、灵活性和性能方面。与关系数据库不同，NoSQL 数据库并不严格遵循关系模型或传统的基于表的存储。它们可以以各种格式存储数据，这使得它们适用于各种用例。 NoSQL 数据库可大致分为四个子类型，每个子类型都有其独特的特征：</p><ul><li>基于文档的数据库将数据存储在半结构化文档中，例如 JSON 或 BSON。这种格式为数据建模提供了更大的灵活性。它允许更动态的模式，这些模式可以随着应用程序需求的变化而发展。基于文档的数据库非常适合处理分层或嵌套数据结构的应用程序，例如内容管理系统、电子商务平台和分析应用程序。一些流行的基于文档的数据库包括 MongoDB 和 Couchbase</li><li>基于列的数据库，也称为宽列存储或列族存储，以列而不是行的形式组织数据。这种结构优化了基于列的查询，提供了改进的压缩和更好的读取性能。基于列的数据库专为需要跨多个节点存储和查询大量数据的应用程序而设计，使其成为大数据和分析应用程序以及具有高写入和读取工作负载的应用程序的流行选择。一些著名的基于列的数据库是 Apache Cassandra 和 HBase</li><li>键值存储提供了一种简单有效的方式将数据存储为键值对。这些数据库非常适合需要高速读写以及水平可扩展性的用例。键值存储可以用作缓存层、会话存储或配置存储等。它们通常用于对性能和低延迟数据访问至关重要的应用程序，例如游戏平台、实时分析系统和推荐引擎。流行的键值存储示例包括 Redis 和 Amazon DynamoDB</li><li>图数据库专注于将数据存储为图中的节点和边。它可以有效处理复杂的关系、遍历和基于图的算法。这种类型的数据库对于涉及实体之间复杂关系的应用程序特别有用，例如社交网络、欺诈检测系统和推荐引擎。图形数据库提供了强大的查询功能，用于遍历和分析互连数据，使其成为这些用例的有吸引力的选择。 Neo4j 和 Amazon Neptune 是图形数据库的示例</li></ul><p>值得注意的是，NoSQL 数据库有其自身的一系列弱点：</p><ul><li>缺乏标准化：与遵循标准化 SQL 查询语言的关系数据库不同，NoSQL 数据库通常使用自己的查询语言或 API。在不同 NoSQL 数据库之间迁移或与其他系统集成时，这可能会导致学习曲线增加和困难</li><li>一致性较弱：许多 NoSQL 数据库采用最终一致性模型来实现更高的性能和可用性。虽然这可能适合某些应用程序，但在需要严格数据一致性的情况下可能会导致问题</li><li>对复杂查询和事务的支持有限：某些 NoSQL 数据库（例如键值存储和基于列的数据库）并不是为复杂查询或多记录事务而设计的。这使得直接在数据库中实现某些业务逻辑或报告要求变得具有挑战性</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051509306.webp"></p><p>每个 NoSQL 子类型都有其优点和缺点，使它们根据具体要求适合不同的应用程序。在考虑 NoSQL 数据库时，重要的是评估应用程序在可扩展性、数据建模、查询模式和性能方面的具体需求，以确定最适合的数据库</p><h2 id="NewSQL"><a href="#NewSQL" class="headerlink" title="NewSQL"></a>NewSQL</h2><p>NewSQL 数据库是一种结合了关系数据库和 NoSQL 数据库优势的现代方法。它们维护关系模型、ACID 属性和 SQL 支持，同时提供通常与 NoSQL 数据库相关的改进的可扩展性、分布式架构和性能增强。 NewSQL 数据库旨在解决现代应用程序的挑战，例如处理大规模、分布式和高度并发的工作负载，而不牺牲数据的一致性和完整性</p><ul><li>分布式架构：NewSQL数据库是分布式的。他们利用跨多个节点甚至数据中心的数据分区和复制。该架构具有更好的容错能力、高可用性和全球规模</li><li>可扩展性：NewSQL 数据库可以水平扩展。它们通过向系统添加更多节点来适应增加的工作负载。此功能使它们适合需要强一致性并能够处理大量事务或用户的应用程序</li><li>并发控制：NewSQL数据库使用先进的并发控制机制，例如多版本并发控制（MVCC）或乐观并发控制。这些机制允许有效地处理大量同时发生的事务。这对于具有高并发要求的现代应用程序至关重要</li><li>SQL 支持和兼容性：NewSQL 数据库保留了用于查询和操作数据的熟悉的 SQL 语言，简化了开发人员的学习曲线。它们通常提供与现有关系数据库和工具的兼容性，从而简化迁移过程</li></ul><p>考虑 NewSQL 的缺点很重要：</p><ul><li>复杂性：与传统关系数据库相比，NewSQL 数据库的分布式架构和高级功能会在配置、维护和故障排除方面带来额外的复杂性</li><li>供应商锁定：某些 NewSQL 数据库由特定供应商作为托管服务提供，这可能会导致供应商锁定并限制切换供应商的灵活性</li><li>缺乏成熟度：作为一项相对较新的技术，NewSQL 数据库可能缺乏传统关系数据库的成熟度和广泛的生态系统，这可能导致支持、文档和社区资源有限</li></ul><p>流行的 NewSQL 数据库包括 CockroachDB、Google Spanner 和 TiDB。每个选项都提供独特的特性和功能，使其适合不同的用例和要求。在考虑 NewSQL 数据库时，必须评估应用程序在可扩展性、数据一致性、性能和开发人员熟悉程度方面的具体需求，以确定最适合的数据库</p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051512641.webp"></p><h2 id="Time-series"><a href="#Time-series" class="headerlink" title="Time-series"></a>Time-series</h2><p>时间序列数据库专门处理带时间戳的数据，其特点是顺序性和基于时间的排序。时间序列数据在金融市场、物联网和监控系统等各个领域都很常见。这些数据库旨在优化带时间戳的数据的存储、检索和分析。它们提供专门针对时间序列数据带来的独特挑战的功能</p><ul><li>高写入和查询性能：时序数据库针对处理高速数据流进行了优化，这需要高效的写入性能。它们还提供快速查询性能，允许对时间序列数据进行实时或近实时分析</li><li>数据压缩：由于时序工作负载生成的数据量很大，时序数据库使用各种数据压缩技术来降低存储需求并提高查询性能</li><li>基于时间的数据保留策略：时间序列数据库可以轻松管理基于时间的数据保留策略。此功能允许自动数据老化，有助于保持存储效率并确保数据相关性</li><li>内置时序函数：时序数据库通常包含内置函数和工具，以方便时序数据分析，例如聚合、下采样和预测。这些函数简化了处理时间序列数据的过程，可以帮助开发人员构建更高效的应用程序</li><li>可扩展性：时间序列数据库旨在水平扩展，使其能够处理大量数据和高摄取率。此功能对于需要存储和分析大量时间序列数据的应用程序（例如物联网应用程序或监控系统）至关重要</li></ul><p>流行的时间序列数据库包括 InfluxDB 和 TimescaleDB。这些选项中的每一个都提供了针对时间序列数据管理和分析而定制的独特特性和功能，使其适合不同的用例和要求。在考虑时序数据库时，必须评估应用程序在数据摄取率、查询性能、数据保留和可扩展性方面的具体需求</p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051515891.webp"></p><p>为了比较数据库类型及其用例，我们必须考虑各种因素，例如它们处理的数据类型、可扩展性、性能、一致性和复杂性。例如，关系数据库通常更适合需要严格数据一致性和复杂查询的应用，而NoSQL数据库更适合处理大量非结构化数据或需要高扩展性的项目</p><h1 id="你知道多少种-API-架构分格？"><a href="#你知道多少种-API-架构分格？" class="headerlink" title="你知道多少种 API 架构分格？"></a>你知道多少种 API 架构分格？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101258696.webp"></p><p>架构风格定义了应用程序编程接口 (API) 的不同组件如何相互交互。因此，它们通过提供设计和构建 API 的标准方法来确保效率、可靠性以及与其他系统集成的便捷性。以下是最常用的样式：</p><ul><li>SOAP<ul><li>成熟、全面、基于 XML</li><li>最适合企业应用</li></ul></li><li>RESTful<ul><li>流行的、易于实现的 HTTP 方法</li><li>网络服务的理想选择</li></ul></li><li>GraphQL<ul><li>查询语言，请求特定数据</li><li>减少网络开销，加快响应速度</li></ul></li><li>gRPC<ul><li>现代、高性能协议缓冲区</li><li>适合微服务架构</li></ul></li><li>WebSocket<ul><li>实时、双向、持久连接</li><li>非常适合低延迟数据交换</li></ul></li><li>Webhook<ul><li>事件驱动、HTTP 回调、异步</li><li>事件发生时通知系统</li></ul></li></ul><h1 id="解释-9-种-API-测试"><a href="#解释-9-种-API-测试" class="headerlink" title="解释 9 种 API 测试"></a>解释 9 种 API 测试</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101133639.webp"></p><ul><li>烟雾测试：这是在 API 开发完成后完成的。只需验证 API 是否正常工作并且没有出现任何问题</li><li>功能测试：这将根据功能需求创建测试计划，并将结果与预期结果进行比较</li><li>集成测试：该测试结合了多个 API 调用来执行端到端测试。测试业务内通信和数据传输</li><li>回归测试：此测试可确保错误修复或新功能不会破坏 API 的现有行为</li><li>负载测试：这通过模拟不同的负载来测试应用程序的性能。然后我们就可以计算出应用程序的容量</li><li>压力测试：我们故意给API创建高负载，并测试API是否能够正常运行</li><li>安全测试：这将针对所有可能的外部威胁测试 API</li><li>用户界面测试：这会测试 UI 与 API 的交互，以确保数据可以正确显示</li><li>模糊测试：这会将无效或意外的输入数据注入 API 并尝试使 API 崩溃。通过这种方式，它可以识别API漏洞</li></ul><h1 id="API-VS-SDK"><a href="#API-VS-SDK" class="headerlink" title="API VS SDK"></a>API VS SDK</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101133877.webp"></p><p>API（应用程序编程接口）和 SDK（软件开发工具包）是软件开发领域的重要工具，但它们具有不同的用途</p><h2 id="API（应用程序编程接口）"><a href="#API（应用程序编程接口）" class="headerlink" title="API（应用程序编程接口）"></a>API（应用程序编程接口）</h2><p>API 是一组规则和协议，允许不同的软件应用程序和服务相互通信</p><ol><li>它定义了软件组件如何交互</li><li>促进软件组件之间的数据交换和功能访问</li><li>通常由端点、请求和响应组成</li></ol><h2 id="SDK（软件开发工具包）"><a href="#SDK（软件开发工具包）" class="headerlink" title="SDK（软件开发工具包）"></a>SDK（软件开发工具包）</h2><p>SDK 是一个包含工具、库、示例代码和文档的综合包，可帮助开发人员为特定平台、框架或硬件构建应用程序</p><ol><li>提供更高级别的抽象，简化特定平台的开发</li><li>针对特定平台或框架量身定制，确保该平台上的兼容性和最佳性能</li><li>提供对特定于平台的高级特性和功能的访问，否则从头开始实施可能会具有挑战性</li></ol><h1 id="如何提高-API-性能"><a href="#如何提高-API-性能" class="headerlink" title="如何提高 API 性能"></a>如何提高 API 性能</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101236328.webp"></p><ol><li>分页：当结果很大时，这是一种常见的优化。结果会流回客户端以提高服务响应能力</li><li>异步日志记录：同步日志记录每次调用都会处理磁盘，并且会降低系统速度。异步日志记录首先将日志发送到无锁缓冲区并立即返回。日志将定期刷新到磁盘。这显着减少了 I&#x2F;O 开销</li><li>缓存：可以将经常访问的数据缓存到缓存中。客户端可以先查询缓存，而不是直接访问数据库。如果缓存未命中，客户端可以从数据库中查询。像 Redis 这样的缓存将数据存储在内存中，因此数据访问比数据库要快得多</li><li>有效负载亚缩：可以使用 gzip 等压缩请求和响应，以便传输的数据大小小得多。这可以加快上传和下载速度</li><li>连接池：在访问资源时，我们经常需要从数据库加载数据。打开正在关闭的数据库连接会增加大量开销。因此，我们应该通过打开的连接池连接到数据库。连接池负责管理连接生命周期</li></ol><h1 id="解释对象存储的-6-大用例"><a href="#解释对象存储的-6-大用例" class="headerlink" title="解释对象存储的 6 大用例"></a>解释对象存储的 6 大用例</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051620285.webp"></p><p>什么是对象存储？</p><ul><li>对象存储使用对象来存储数据。与使用分层结构存储文件的文件存储或将文件划分为大小相等的块的块存储相比，对象存储将元数据与对象一起存储。典型产品包括AWS S3、Google Cloud Storage和Azure Blob Storage</li></ul><p>案例一：数据归档</p><ul><li>随着业务数据量的不断增长，我们无法将所有数据都存储在核心存储系统中。我们需要有分层的存储计划。对象存储可用于存档用于审计或客户端语句的旧数据。这是一种具有成本效益的方法</li></ul><p>案例2：非结构化数据存储</p><ul><li>我们经常需要处理非结构化数据或半结构化数据。过去，它们通常以 blob 的形式存储在关系数据库中，效率相当低。对象存储非常适合音乐、视频文件和文本文档。 Spotify 或 Netflix 等公司使用对象存储来保存其媒体文件</li></ul><p>案例三：云原生存储</p><ul><li>对于云原生应用来说，我们需要数据存储系统具有灵活性和可扩展性。主要公共云提供商可以轻松通过 API 访问其对象存储产品，并可用于经济的存储选择</li></ul><p>案例4：数据湖</p><ul><li>分布式系统中有多种类型的数据。对象存储支持的数据湖为不同业务线提供了一个转储数据以供以后分析或机器学习的好地方。对象存储的高效读写有助于数据处理管道中的更多步骤，包括 ETL（提取-转换-加载）或构建数据仓库</li></ul><p>案例5：物联网（IoT）</p><ul><li>物联网传感器产生各种数据。对象存储可以存储这种类型的时间序列，然后对其运行分析或人工智能算法。主要公共云提供商提供将原始物联网数据提取到对象存储中的管道</li></ul><p>案例六：备份与恢复</p><ul><li>对象存储可用于存储数据库或文件系统备份。稍后，可以加载备份以进行快速恢复。这提高了系统的可用性</li></ul><h1 id="Kafka-5-大用例"><a href="#Kafka-5-大用例" class="headerlink" title="Kafka 5 大用例"></a>Kafka 5 大用例</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101230914.webp"></p><p>与它的前辈不同，Kafka 不仅仅是一个消息队列，它还是一个适用于各种情况的开源事件流平台</p><ol><li>日志处理与分析：上图显示了典型的 ELK（Elastic-Logstash-Kibana）堆栈。 Kafka 有效地从每个实例收集日志流。 ElasticSearch 使用来自 Kafka 的日志并为其建立索引。 Kibana 在 ElasticSearch 之上提供了搜索和可视化 UI</li><li>推荐中的数据流：像亚马逊这样的电子商务网站使用过去的行为和相似的用户来计算产品推荐。上图展示了推荐系统的工作原理。 Kafka 传输原始点击流数据，Flink 对其进行处理，模型训练则使用来自数据湖的聚合数据。这使得能够持续改进每个用户的推荐的相关性</li><li>系统监控和警报：与日志分析系统类似，我们需要收集系统指标以进行监控和故障排除。区别在于指标是结构化数据，而日志是非结构化文本。指标数据发送到 Kafka 并在 Flink 中聚合。聚合数据由实时监控仪表板和警报系统（例如 PagerDuty）使用</li><li>CDC（更改数据捕获）：更改数据捕获 (CDC) 将数据库更改流式传输到其他系统以进行复制或缓存&#x2F;索引更新。例如，在下图中，事务日志发送到 Kafka 并由 ElasticSearch、Redis 和辅助数据库摄取</li><li>系统迁移：升级遗留服务具有挑战性——旧的语言、复杂的逻辑和缺乏测试。我们可以通过利用消息传递中间件来降低风险。在上图中，为了升级下图中的订单服务，我们更新旧的订单服务以使用来自 Kafka 的输入并将结果写入 ORDER 主题。新订单服务使用相同的输入并将结果写入 ORDERNEW 主题。调节服务比较 ORDER 和 ORDERNEW。如果它们相同，则新服务通过测试</li></ol><h1 id="数据无处不在，但常用的数据术语你都知道吗？"><a href="#数据无处不在，但常用的数据术语你都知道吗？" class="headerlink" title="数据无处不在，但常用的数据术语你都知道吗？"></a>数据无处不在，但常用的数据术语你都知道吗？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051609421.webp"></p><ul><li>数据仓库：来自各种来源的集成数据的大型结构化存储库，用于复杂的查询和历史分析</li><li>数据集市：数据仓库的更集中、特定于部门的子集，提供快速数据检索和分析</li><li>数据湖：以本机格式存储的大量原始非结构化数据，直到需要使用为止</li><li>Delta Lake：一个开源存储层，为数据湖带来可靠性和 ACID 事务，统一批处理和流数据处理</li><li>数据管道：将数据从一个系统移动和转换到另一个系统的过程，通常用于填充数据仓库和数据湖</li><li>数据网格：一种架构和组织方法，其中数据所有权和交付分散在特定领域的跨职能团队中</li></ul><h1 id="Slack-消息的旅程是怎样的？"><a href="#Slack-消息的旅程是怎样的？" class="headerlink" title="Slack 消息的旅程是怎样的？"></a>Slack 消息的旅程是怎样的？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101242307.webp"></p><ul><li>由于通道数量过多，通道服务器（CS）使用一致性哈希将数百万个通道分配给许多通道服务器</li><li>Slack 消息通过 WebApp 和管理服务器传递到正确的通道服务器</li><li>Channel Server 通过 Gate Server 和 Envoy（代理）将消息推送给消息接收者</li><li>消息接收方使用WebSocket，这是一种双向消息传递机制，因此它们能够实时接收更新</li></ul><p>Slack 消息会经过五个重要服务器：</p><ul><li>WebApp：定义 Slack 客户端可以使用的 API</li><li>管理服务器（AS）：使用通道 ID 查找正确的通道服务器</li><li>Channel Server（CS）：维护消息通道的历史记录</li><li>网关服务器（GS）：部署在每个地理区域。维护 WebSocket 通道订阅</li><li>Envoy：云原生应用程序的服务代理</li></ul><h1 id="为什么-Nginx-被称为-“反向”-代理？"><a href="#为什么-Nginx-被称为-“反向”-代理？" class="headerlink" title="为什么 Nginx 被称为 “反向” 代理？"></a>为什么 Nginx 被称为 “反向” 代理？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101249162.webp"></p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><ul><li>正向代理是位于用户设备和互联网之间的服务器</li></ul><p>正向代理通常用于：</p><ol><li>保护客户</li><li>避免浏览限制</li><li>阻止访问某些内容</li></ol><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><ul><li>反向代理是一种服务器，它接受客户端的请求，将请求转发到 Web 服务器，并将结果返回给客户端，就好像代理服务器已经处理了请求一样</li></ul><p>反向代理适用于：</p><ol><li>保护服务器</li><li>负载均衡</li><li>缓存静态内容</li><li>加密和解密 SSL 通信</li></ol><h1 id="Docker-与-Kubernetes-应该使用哪一个？"><a href="#Docker-与-Kubernetes-应该使用哪一个？" class="headerlink" title="Docker 与 Kubernetes 应该使用哪一个？"></a>Docker 与 Kubernetes 应该使用哪一个？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101320652.webp"></p><p>什么是 Docker？</p><ul><li>Docker 是一个开源平台，允许您在隔离的容器中打包、分发和运行应用程序。它专注于容器化，提供封装应用程序及其依赖项的轻量级环境</li></ul><p>什么是 Kubernetes？</p><ul><li>Kubernetes，通常称为 K8s，是一个开源容器编排平台。它提供了一个框架，用于跨节点集群自动部署、扩展和管理容器化应用程序</li></ul><p>两者有何不同？</p><p>Docker：</p><ul><li><p>Docker 在单个操作系统主机上的单个容器级别上运行</p></li><li><p>必须手动管理每个主机，并且为多个相关容器设置网络、安全策略和存储可能很复杂</p></li></ul><p>Kubernetes：</p><ul><li>Kubernetes 在集群级别运行。它管理跨多个主机的多个容器化应用程序，为负载平衡、扩展和确保应用程序的所需状态等任务提供自动化</li></ul><p>简而言之，Docker 专注于容器化和在单个主机上运行容器，而 Kubernetes 专注于跨主机集群大规模管理和编排容器</p><h1 id="Git-VS-Github"><a href="#Git-VS-Github" class="headerlink" title="Git VS Github"></a>Git VS Github</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051549781.webp"></p><ul><li>首先，认识一下 Git，它是开发人员的基本工具。它在本地运行，允许您跟踪代码中的更改，就像拍摄项目进度的快照一样。这使得与您的团队的协作变得轻而易举，即使您正在处理同一个项目</li><li>现在，我们来谈谈 GitHub。它不仅仅是一个平台；它是在线托管 Git 存储库的强大工具。通过 GitHub，您可以简化团队协作和代码共享</li></ul><h1 id="公司如何将代码交付到生产环境？"><a href="#公司如何将代码交付到生产环境？" class="headerlink" title="公司如何将代码交付到生产环境？"></a>公司如何将代码交付到生产环境？</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311051540974.webp"></p><ul><li>步骤 1：该流程从产品负责人根据需求创建用户故事开始</li><li>步骤 2：开发团队从待办事项列表中选取用户故事，并将其放入为期两周的开发周期的冲刺中</li><li>步骤3：开发人员将源代码提交到代码存储库 Git 中</li><li>步骤4：在 Jenkins 中触发构建。源代码必须通过 SonarQube 中的单元测试、代码覆盖率阈值和门</li><li>步骤5：构建成功后，构建结果将存储在 artifactory 中。然后将构建部署到开发环境中</li><li>步骤6：可能有多个开发团队致力于不同的功能。这些功能需要独立测试，因此部署到 QA1 和 QA2</li><li>步骤 7：QA 团队选择新的 QA 环境并执行 QA 测试、回归测试和性能测试</li><li>步骤 8：一旦 QA 构建通过 QA 团队的验证，它们就会被部署到 UAT 环境中</li><li>步骤 9：如果 UAT 测试成功，构建版本将成为候选版本，并将按计划部署到生产环境</li><li>步骤10：SRE（站点可靠性工程）团队负责产品监控</li></ul><h1 id="不同云服务器的备忘单"><a href="#不同云服务器的备忘单" class="headerlink" title="不同云服务器的备忘单"></a>不同云服务器的备忘单</h1><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311101245657.webp"></p>]]></content>
    
    
    <categories>
      
      <category>知识宝库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Q&amp;A</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop</title>
    <link href="/2023/11/01/Hadoop/"/>
    <url>/2023/11/01/Hadoop/</url>
    
    <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="Hadoop-是什么"><a href="#Hadoop-是什么" class="headerlink" title="Hadoop 是什么"></a>Hadoop 是什么</h3><ul><li>Hadoop 是一个由 Apache 基金会所开发的<font color = '#DC143C'><strong>分布式系统基础架构</strong></font></li><li>主要解决，海量数据的<font color = '#DC143C'><strong>存储</strong></font>和海量数据的<font color = '#DC143C'><strong>分析计算</strong></font>问题</li><li>广义上来说，Hadoop 通常是指一个更广泛的概念——<font color = '#DC143C'><strong>Hadoop 生态圈</strong></font></li></ul><h3 id="Hadoop-优势"><a href="#Hadoop-优势" class="headerlink" title="Hadoop 优势"></a>Hadoop 优势</h3><ul><li>高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失</li><li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点</li><li>高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度</li><li>高容错性：能够自动将失败的任务重新分配</li></ul><h3 id="Hadoop1-x、2-x、3-x-区别"><a href="#Hadoop1-x、2-x、3-x-区别" class="headerlink" title="Hadoop1.x、2.x、3.x 区别"></a>Hadoop1.x、2.x、3.x 区别</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310312044806.png"></p><h3 id="HDFS-概述"><a href="#HDFS-概述" class="headerlink" title="HDFS 概述"></a>HDFS 概述</h3><blockquote><p>Hadoop Distributed File System，简称 HDFS，是一个分布式文件系统</p></blockquote><ul><li>NameNode（nn）：存储文件的<font color = '#DC143C'><strong>元数据</strong></font>，如<font color = '#DC143C'><strong>文件名</strong></font>，<font color = '#DC143C'><strong>文件目录结构</strong></font>，<font color = '#DC143C'><strong>文件属性</strong></font>（生成时间、副本数、 文件权限），以及每个文件的<font color = '#DC143C'><strong>块列表</strong></font>和<font color = '#DC143C'><strong>块所在的DataNode</strong></font>等</li><li>DataNode(dn)：在本地文件系统<font color = '#DC143C'><strong>存储文件块数据</strong></font>，以及<font color = '#DC143C'><strong>块数据的校验和</strong></font></li><li>Secondary NameNode(2nn)：<font color = '#DC143C'><strong>每隔一段时间对NameNode元数据备份</strong></font></li></ul><h3 id="YARN-概述"><a href="#YARN-概述" class="headerlink" title="YARN 概述"></a>YARN 概述</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310312217693.png"></p><h3 id="MapReduce-概述"><a href="#MapReduce-概述" class="headerlink" title="MapReduce 概述"></a>MapReduce 概述</h3><blockquote><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce</p></blockquote><ul><li>Map 阶段并行处理输入数据</li><li>Reduce 阶段对 Map 结果进行汇总</li></ul><h3 id="HDFS、YARN、MapReduce-三者关系"><a href="#HDFS、YARN、MapReduce-三者关系" class="headerlink" title="HDFS、YARN、MapReduce 三者关系"></a>HDFS、YARN、MapReduce 三者关系</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310312231879.png"></p><h3 id="大数据技术生态体系"><a href="#大数据技术生态体系" class="headerlink" title="大数据技术生态体系"></a>大数据技术生态体系</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310312231289.png"></p><ul><li>Sqoop： Sqoop 是一款开源的工具，主要用于在 Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中</li><li>Flume： Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据</li><li>Kafka： Kafka 是一种高吞吐量的分布式发布订阅消息系统</li><li>Spark： Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算</li><li>Flink： Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多</li><li>Oozie： Oozie 是一个管理 Hadoop 作业（job）的工作流程调度管理系统</li><li>Hbase： HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库</li><li>Hive： Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 SQL 查询功能，可以将 SQL 语句转换为 MapReduce 任务进行运行。其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析</li><li>ZooKeeper： 它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等</li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Big Data</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Network</title>
    <link href="/2023/10/26/Network/"/>
    <url>/2023/10/26/Network/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h3><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260011522.png"></p><h4 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260012975.png"></p><h4 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260014487.png"></p><h4 id="区别与关系"><a href="#区别与关系" class="headerlink" title="区别与关系"></a>区别与关系</h4><ul><li>若干节点和链路互连形成<font color = '#DC143C'><strong>网络</strong></font></li><li>若干网络通过路由器互连形成<font color = '#DC143C'><strong>互连网（互联网）</strong></font></li><li><font color = '#DC143C'><strong>因特网</strong></font>是当今世界上最大的互联网</li></ul><h4 id="因特网简介"><a href="#因特网简介" class="headerlink" title="因特网简介"></a>因特网简介</h4><blockquote><p>因特网发展的三个阶段</p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260018798.png"></p><blockquote><p>因特网服务提供者（Internet Service Provider, ISP）</p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260018810.png"></p><blockquote><p>因特网已发展成为<font color = '#DC143C'><strong>基于ISP的多层次结构的互连网络</strong></font></p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260022343.png"></p><blockquote><p>因特网的<font color = '#DC143C'><strong>标准化</strong></font>工作</p></blockquote><ul><li>因特网的标准化工作是面向公众的，其任何一个建议标准在成为因特网标准之前都以 RFC 技术文档的形式在因特网上发表</li><li>RFC（Request For Comments）的意思是”请求评论”。任何人都可以从因特网上免费下载 <a href="http://www.ietf.org/rfc,html">RFC</a> 文档，并随时对某个 RFC 文档发表意见和建议</li></ul><blockquote><p>因特网的<font color = '#DC143C'><strong>管理机构</strong></font></p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260029257.png"></p><blockquote><p>因特网的<font color = '#DC143C'><strong>组成</strong></font></p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260029126.png"></p><h3 id="电路交换、分组交换和报文交换"><a href="#电路交换、分组交换和报文交换" class="headerlink" title="电路交换、分组交换和报文交换"></a>电路交换、分组交换和报文交换</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310260033728.png"></p><ul><li><font color = '#DC143C'><strong>计算机之间的数据传送时突发式</strong></font>的，当<font color = '#DC143C'><strong>使用电路交换</strong></font>来传送计算机数据时，其<font color = '#DC143C'><strong>线路的传输效率一般都会很低</strong></font>，线路上真正用来传送数据的时间往往不到10%甚至1%</li></ul><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262042409.png"></p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>没有建立连接和释放连接的过程</li><li>分组传输过程中逐段占用通信链路，有较高的通信线路利用率</li><li>交换节点可以为每一个分组独立选择转发路由，使得网络有很好的生存性</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>分组首部带来了额外的传输开销</li><li>交换节点存储转发分组会造成一定的时延</li><li>无法确保通信时端到通信资源全部可用，在通信量较大时可能造成网络拥塞</li><li>分组可能会出现失序和丢失等问题</li></ul><h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><ul><li>报文交换时分组交换的前身</li><li>在报文交换中，<font color = '#DC143C'><strong>报文被整个地发送</strong></font>，而不是拆分成若干个分组进行发送</li><li>交换节点将报文<font color = '#DC143C'><strong>整体接收完成后</strong></font>才能查找转发表，将整个报文<font color = '#DC143C'><strong>转发</strong></font>到下一个节点</li><li>因此，报文交换比分组交换带来的<font color = '#DC143C'><strong>转发时延要长很多</strong></font>，需要交换节点具有的<font color = '#DC143C'><strong>缓存空间也大很多</strong></font></li></ul><h4 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h4><ul><li>若要连续传送大量的数据，并且数据传送时间远大于建立连接的时间，则使用电路交换可以有较高的传输效率。然而<font color = '#DC143C'><strong>计算机的数据传送</strong></font>往往是<font color = '#DC143C'><strong>突发式</strong></font>的，<font color = '#DC143C'><strong>采用电路交换</strong></font>时通信<font color = '#DC143C'><strong>线路的利用率会很低</strong></font></li><li>报文交换和分组交换都<font color = '#DC143C'><strong>不需要建立连接</strong></font>（即预先分配通信资源），在<font color = '#DC143C'><strong>传送计算机的突发数据</strong></font>时可以<font color = '#DC143C'><strong>提高通信线路的利用率</strong></font></li><li>将报文构造成若干个更小的分组进行<font color = '#DC143C'><strong>分组交换</strong></font>，比将整个报文进行报文交换的<font color = '#DC143C'><strong>时延更小</strong></font>，并且还可以<font color = '#DC143C'><strong>避免太长的报文长时间占用链路，有利于差错控制</strong></font>，同时具有更好的灵活性</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262051836.png"></p><h3 id="计算机网络的定义和分类"><a href="#计算机网络的定义和分类" class="headerlink" title="计算机网络的定义和分类"></a>计算机网络的定义和分类</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262059189.png"></p><blockquote><p>现阶段计算机网络的一个较好的定义</p></blockquote><ul><li>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用</li></ul><h5 id="可编程的硬件"><a href="#可编程的硬件" class="headerlink" title="可编程的硬件"></a>可编程的硬件</h5><ul><li>不限于计算机，而是包括了智能手机、具有网络功能的传感器以及智能家电等智能硬件，这些硬件一定包含有中央处理单元（CPU）</li></ul><h5 id="各类应用"><a href="#各类应用" class="headerlink" title="各类应用"></a>各类应用</h5><ul><li>计算机网络并非只用来传送数据，而是能够基于数据传送进而实现各种各样的应用，包括今后可能出现的各种应用</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="交换方式"><a href="#交换方式" class="headerlink" title="交换方式"></a>交换方式</h5><ul><li>电路交换</li><li>报文交换</li><li>分组交换</li></ul><h5 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262113004.png"></p><h5 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262113000.png"></p><h5 id="覆盖范围"><a href="#覆盖范围" class="headerlink" title="覆盖范围"></a>覆盖范围</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262110719.png"></p><h5 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262109369.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262109812.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262109255.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262109358.png"></p><h3 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h3><ul><li>计算机网络的性能指标被用来从不同方面<font color = '#DC143C'><strong>度量计算机网络的性能</strong></font></li><li>常用的八个计算机网络性能指标<ul><li>速率、带宽、吞吐量、时延、时延带宽积、往返时间、利用率、丢包率</li></ul></li></ul><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><ul><li><font color = '#DC143C'><strong>比特</strong></font>（bit，记为小写b）是计算机中<font color = '#DC143C'><strong>数据量的基本单位</strong></font>，一个比特就是<font color = '#DC143C'><strong>二进制数字中的一个 1 或 0</strong></font></li><li>数据量的常用单位有<font color = '#DC143C'><strong>字节</strong></font>（byte，记为大写B）、<font color = '#DC143C'><strong>千字节</strong></font>（KB）、<font color = '#DC143C'><strong>兆字节</strong></font>（MB）、<font color = '#DC143C'><strong>吉字节</strong></font>（GB）、<font color = '#DC143C'><strong>太字节</strong></font>（TB）</li></ul><table><thead><tr><th>数据量的单位</th><th>换算关系</th></tr></thead><tbody><tr><td>比特（b）</td><td>基本单位</td></tr><tr><td>字节（B）</td><td>1B &#x3D; 8bit</td></tr><tr><td>千字节（KB）</td><td>KB &#x3D; 2^10 B</td></tr><tr><td>兆字节（MB）</td><td>MB &#x3D; K·KB &#x3D; 2^20 B</td></tr><tr><td>吉字节（GB）</td><td>GB &#x3D; K·MB &#x3D; 2^30 B</td></tr><tr><td>太字节（TB）</td><td>TB &#x3D; K·GB &#x3D; 2^40 B</td></tr></tbody></table><ul><li>速率是<font color = '#DC143C'><strong>指数据的传送速率</strong></font>（即<font color = '#DC143C'><strong>每秒传送多少个比特</strong></font>），也称为<font color = '#DC143C'><strong>数据率</strong></font>（Data Rate）或<font color = '#DC143C'><strong>比特率</strong></font>（Bit Rate）</li><li>速率的基本单位是<font color = '#DC143C'><strong>比特&#x2F;秒</strong></font>（bit&#x2F;s，可简记为b&#x2F;s，有时也记为bps，即bit per second）。速率的常用单位有<font color = '#DC143C'><strong>千比特&#x2F;秒</strong></font>（kb&#x2F;s或kbps）、<font color = '#DC143C'><strong>兆比特&#x2F;秒</strong></font>（Mb&#x2F;s或Mbps）、<font color = '#DC143C'><strong>吉比特&#x2F;秒</strong></font>（Gb&#x2F;s或Gbps）以及<font color = '#DC143C'><strong>太比特&#x2F;秒</strong></font>（Tb&#x2F;s或Tbps）</li></ul><table><thead><tr><th>速率的单位</th><th>换算关系</th></tr></thead><tbody><tr><td>比特&#x2F;秒（b&#x2F;s）</td><td>基本单位</td></tr><tr><td>千比特&#x2F;秒（kb&#x2F;s）</td><td>kb&#x2F;s &#x3D; 10^3 b&#x2F;s</td></tr><tr><td>兆比特&#x2F;秒（Mb&#x2F;s）</td><td>Mb&#x2F;s &#x3D; k·kb&#x2F;s &#x3D; 10^6 b&#x2F;s</td></tr><tr><td>吉比特&#x2F;秒（Gb&#x2F;s）</td><td>Gb&#x2F;s &#x3D; k·Mb&#x2F;s &#x3D; 10^9 b&#x2F;s</td></tr><tr><td>太比特&#x2F;秒（Tb&#x2F;s）</td><td>Tb&#x2F;s &#x3D; k·Gb&#x2F;s &#x3D; 10^12 b&#x2F;s</td></tr></tbody></table><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><ul><li>有一个待发送的数据块，大小为100MB，网卡的发送速率为100Mbps，则网卡发送完该数据块需要多长时间？</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262138602.png"></p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><blockquote><p>模拟信号系统中的意义</p></blockquote><ul><li>某个信号所包含的各种不同频率成分所占据的<font color = '#DC143C'><strong>频率范围</strong></font></li><li>单位：Hz（kHz，MHz，GHz）</li></ul><blockquote><p>计算机网络中的意义</p></blockquote><ul><li>用来表示网络的<font color = '#DC143C'><strong>通信线路所能传送数据的能力</strong></font>，即在单位时间内从网络中的某一点到另一点所能通过的<font color = '#DC143C'><strong>最高数据率</strong></font></li><li>单位：b&#x2F;s（kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s，Tb&#x2F;s）</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262147684.png"></p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><ul><li><p>吞吐量是指在<font color = '#DC143C'><strong>单位时间内通过某个网络或接口的实际数据量</strong></font>。吞吐量常被用于对实际网络的测量，以便获知到底有多少数据量通过了网络</p></li><li><p>吞吐量<font color = '#DC143C'><strong>受网络带宽的限制</strong></font></p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262150896.png"></p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><ul><li>时延是指数据从网络的一端传送到另一端所耗费的时间，也成为延迟或时延&#x2F;数据可由一个或多个分组、甚至是一个比特构成</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262157580.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262159308.png"></p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><ul><li>时延带宽积是<font color = '#DC143C'><strong>传播时延</strong></font>和<font color = '#DC143C'><strong>带宽</strong></font>的乘积</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262205735.png"></p><ul><li>链路的时延带宽积也称为<font color = '#DC143C'><strong>以比特位单位的链路长度</strong></font></li></ul><h4 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h4><ul><li>往返时间（Round-Trip <font color = '#DC143C'><strong>RTT</strong></font>）是指从发送端发送数据分组开始，到发送端收到接收端发来的相应确认分组为止，总共耗费的时间</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262211765.png"></p><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><blockquote><p>链路利用率</p></blockquote><ul><li>链路利用率是指某条链路有百分之几的时间是被利用的（即有数据通过）</li><li>完全空闲的链路的利用率为零</li></ul><blockquote><p>网络利用率</p></blockquote><ul><li>网络利用率是指网络中所有链路的链路利用率的加权平均</li></ul><blockquote><p>定义</p></blockquote><ul><li>根据排队论可知，<font color = '#DC143C'><strong>当某链路的利用率增大时</strong></font>，<font color = '#DC143C'><strong>该链路引起的时延就会迅速增加</strong></font></li><li>当网络的通信量较少时，产生的时延并不大，但在网络通信量不断增大时，<font color = '#DC143C'><strong>分组在交换节点（路由器或交换机）中的排队时延会随之增大</strong></font>，因此网络引起的时延就会增大</li><li>令D0表示网络空闲时的时延，D表示网络当前的时延，那么在理想的假定条件下，可用下式来表示D、D0和网络利用率U之间的关系</li></ul><p>$$<br>D &#x3D; \frac{D_0}{1 - U}<br>$$</p><h4 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h4><ul><li>丢包率是指在一定的时间范围内，传输过程中<font color = '#DC143C'><strong>丢失的分组数量与总分组数量的比率</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262228834.png"></p><ul><li>分组丢失主要有以下两种情况：<ul><li>分组在传输过程中出现<font color = '#DC143C'><strong>误码</strong></font>，被传输路径中的<font color = '#DC143C'><strong>节点交换机</strong></font>（例如路由器）或<font color = '#DC143C'><strong>目的主机</strong></font>检测出误码而<font color = '#DC143C'><strong>丢弃</strong></font></li><li>节点交换机根据<font color = '#DC143C'><strong>丢弃策略</strong></font>主动丢弃分组</li></ul></li><li>丢包率可以反映网络的拥塞情况<ul><li>无拥塞时路径丢包率为0</li><li>轻度拥塞时路径丢包率为1%~4%</li><li>严重拥塞时路径丢包率为5%~15%</li></ul></li></ul><h3 id="常见的三种计算机网格体系结构"><a href="#常见的三种计算机网格体系结构" class="headerlink" title="常见的三种计算机网格体系结构"></a>常见的三种计算机网格体系结构</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262245049.png"></p><blockquote><p>OSI标准失败的原因</p></blockquote><ul><li>专家没有实际经验，完成标准时没有商业驱动力</li><li>协议实现过分复杂，运行效率很低</li><li>标准的制定周期太长，产品无法即时进入市场</li><li>层次划分不太合理，有些功能在多个层次中重复出现</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262245583.png"></p><h3 id="计算机网络体系结构分层的必要性"><a href="#计算机网络体系结构分层的必要性" class="headerlink" title="计算机网络体系结构分层的必要性"></a>计算机网络体系结构分层的必要性</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262247829.png"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><p>物理层</p></blockquote><ul><li>采用什么<font color = '#DC143C'><strong>传输媒体</strong></font>（介质）（物理层之下）</li><li>采用什么<font color = '#DC143C'><strong>物理接口</strong></font></li><li>采用什么<font color = '#DC143C'><strong>信号</strong></font>表示比特0和1</li></ul><blockquote><p>数据链路层</p></blockquote><ul><li>标识网络中各主机（<font color = '#DC143C'><strong>主机编址</strong></font>，例如MAC地址）</li><li>从比特流中区分出地址和数据（<font color = '#DC143C'><strong>数据封装格式</strong></font>）</li><li>协调各主机争用总线（<font color = '#DC143C'><strong>媒体接入控制</strong></font>）</li><li>以太网交换机的实现（<font color = '#DC143C'><strong>自学习和转发帧</strong></font>）</li><li>监测数据是否误码（<font color = '#DC143C'><strong>差错检测</strong></font>）</li><li>出现传输差错如何处理（<font color = '#DC143C'><strong>可靠传输和不可靠传输</strong></font>）</li><li>接收方控制发送方注入网络的数据量（<font color = '#DC143C'><strong>流量控制</strong></font>）</li></ul><blockquote><p>网络层</p></blockquote><ul><li>标识网络和网络中的各主机（<font color = '#DC143C'><strong>网络和主机共同编址</strong></font>，例如IP地址）</li><li>路由器转发分组（<font color = '#DC143C'><strong>路由选择协议、路由表和转发表</strong></font>）</li></ul><blockquote><p>运输层</p></blockquote><ul><li>进程之间基于网络的通信（<font color = '#DC143C'><strong>进程的标识</strong></font>，例如端口号）</li><li>出现传输差错如何处理（<font color = '#DC143C'><strong>可靠传输和不可靠传输</strong></font>）</li></ul><blockquote><p>应用层</p></blockquote><ul><li>通过应用进程间的交互来完成特定的网络应用</li><li>进行会话管理和数据表示</li></ul><h3 id="计算机网络体系结构分层思想"><a href="#计算机网络体系结构分层思想" class="headerlink" title="计算机网络体系结构分层思想"></a>计算机网络体系结构分层思想</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310262312529.png"></p><h3 id="计算机网络体系结构中专用术语"><a href="#计算机网络体系结构中专用术语" class="headerlink" title="计算机网络体系结构中专用术语"></a>计算机网络体系结构中专用术语</h3><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><ul><li><font color = '#DC143C'><strong>实体</strong></font>是指任何可发送或接收信息的<font color = '#DC143C'><strong>硬件</strong></font>或<font color = '#DC143C'><strong>软件进程</strong></font></li><li><font color = '#DC143C'><strong>对等实体</strong></font>是指通信双方<font color = '#DC143C'><strong>相同层次中的实体</strong></font></li></ul><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li><font color = '#DC143C'><strong>协议</strong></font>是控制两个对等实体在 “<font color = '#DC143C'><strong>水平方向</strong></font>“ 进行 “<font color = '#DC143C'><strong>逻辑通信</strong></font>“ 的<font color = '#DC143C'><strong>规则</strong></font>的集合</li><li>协议的<font color = '#DC143C'><strong>三要素</strong></font><ul><li><font color = '#DC143C'><strong>语法</strong></font>：定义所交换信息的<font color = '#DC143C'><strong>格式</strong></font></li><li><font color = '#DC143C'><strong>语义</strong></font>：定义通信双方所要完成的<font color = '#DC143C'><strong>操作</strong></font></li><li><font color = '#DC143C'><strong>同步</strong></font>：定义通信双方的<font color = '#DC143C'><strong>时序关系</strong></font></li></ul></li></ul><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><ul><li>在协议的控制下，<font color = '#DC143C'><strong>两个对等实体在水平方向的逻辑通信使得本层能够向上一层提供服务</strong></font><ul><li>要实现本层协议，还需要使用下面一层所提供的服务</li><li>协议是 “<font color = '#DC143C'><strong>水平</strong></font>“ 的，而服务是 “<font color = '#DC143C'><strong>垂直</strong></font>“ 的</li><li>实体看得见下层提供的服务，但并不知道实现该服务的具体协议。下层的协议对上层的实体是 “<font color = '#DC143C'><strong>透明</strong></font>“ 的</li></ul></li><li>在同一系统中<font color = '#DC143C'><strong>相邻两层的实体交换信息的逻辑接口</strong></font>称为<font color = '#DC143C'><strong>服务访问点SAP</strong></font>，它被用于区分不同的服务类型</li><li>帧的 “类型” 字段、IP数据报的 “协议” 字段，TCP报文段或UDP用户数据报的 “端口号” 字段都是SAP</li><li>上层要使用下层所提供的服务，必须通过与下层<font color = '#DC143C'><strong>交换一些命令</strong></font>，这些命令称为<font color = '#DC143C'><strong>服务原语</strong></font></li><li>对等层次之间传送的数据包称为该层的<font color = '#DC143C'><strong>协议数据单元</strong></font>（Protocol Data Unit，<font color = '#DC143C'><strong>PDU</strong></font>）</li><li>同一系统内层与层之间交换的数据包称为<font color = '#DC143C'><strong>服务数据单元</strong></font>（Service Data Unit，<font color = '#DC143C'><strong>SDU</strong></font>）</li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><h4 id="物理层要实现的功能"><a href="#物理层要实现的功能" class="headerlink" title="物理层要实现的功能"></a>物理层要实现的功能</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310271420463.png"></p><h4 id="物理层接口特性"><a href="#物理层接口特性" class="headerlink" title="物理层接口特性"></a>物理层接口特性</h4><h5 id="机械特性"><a href="#机械特性" class="headerlink" title="机械特性"></a>机械特性</h5><ul><li>形状和尺寸</li><li>引脚数目和排列</li><li>固定和锁定装置</li></ul><h5 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h5><ul><li>信号电压的范围</li><li>阻抗匹配的情况</li><li>传输速率</li><li>距离限制</li></ul><h5 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h5><ul><li>规定接口电缆的各条信号线的作用</li></ul><h5 id="过程特性"><a href="#过程特性" class="headerlink" title="过程特性"></a>过程特性</h5><ul><li>规定在信号线上传输比特流的一组操作过程，包括各信号间的时序关系</li></ul><h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><h4 id="传输媒体的分类"><a href="#传输媒体的分类" class="headerlink" title="传输媒体的分类"></a>传输媒体的分类</h4><ul><li><font color = '#DC143C'><strong>传输媒体</strong></font>是计算机网络设备之间的物理通路，也称为传输介质或传输媒介</li><li>传输媒体并<font color = '#DC143C'><strong>不包含在计算机网络体系结构中</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310271435876.png"></p><h3 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h3><h4 id="串行传输和并行传输"><a href="#串行传输和并行传输" class="headerlink" title="串行传输和并行传输"></a>串行传输和并行传输</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310290013451.png"></p><h4 id="同步传输"><a href="#同步传输" class="headerlink" title="同步传输"></a>同步传输</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310290016144.png"></p><h4 id="异步传输"><a href="#异步传输" class="headerlink" title="异步传输"></a>异步传输</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310290016451.png"></p><h4 id="单向通信、双向交替通信和双向同时通信"><a href="#单向通信、双向交替通信和双向同时通信" class="headerlink" title="单向通信、双向交替通信和双向同时通信"></a>单向通信、双向交替通信和双向同时通信</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310290018537.png"></p><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310290025485.png"></p><h4 id="常用编码方式"><a href="#常用编码方式" class="headerlink" title="常用编码方式"></a>常用编码方式</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310292304577.png"></p><h4 id="基本的带通调制方法"><a href="#基本的带通调制方法" class="headerlink" title="基本的带通调制方法"></a>基本的带通调制方法</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310292309471.png"></p><h4 id="混合调制方法"><a href="#混合调制方法" class="headerlink" title="混合调制方法"></a>混合调制方法</h4><h5 id="正交振幅调制QAM-16"><a href="#正交振幅调制QAM-16" class="headerlink" title="正交振幅调制QAM-16"></a>正交振幅调制QAM-16</h5><ul><li>12种相位</li><li>每种相位有1或2种振幅可选</li><li>可以调制出16种码元（波形），每种码元可以对应表示4个比特</li><li>每个码元与4个比特的对应关系采用<font color = '#DC143C'><strong>格雷码</strong></font>，即任意两个相邻码元只有1个比特不同</li></ul><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><h4 id="造成信号失真的主要因素"><a href="#造成信号失真的主要因素" class="headerlink" title="造成信号失真的主要因素"></a>造成信号失真的主要因素</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310301307192.png"></p><ul><li>信道上传输的<font color = '#DC143C'><strong>数字信号</strong></font>，可以看做是<font color = '#DC143C'><strong>多个频率的模拟信号进行多次叠加后形成的方波</strong></font></li><li>如果数字信号中的高频分量在传输时受到衰减甚至不能通过信道，则接收端收到的波形前沿和后沿就变得不那么陡峭，每一个码元所占的时间界限也不再明确。这样，在接收端收到的信号波形就失去了码元之间的清晰界限，这种现象称为<font color = '#DC143C'><strong>码间串扰</strong></font></li><li>如果<font color = '#DC143C'><strong>信道的频带越宽</strong></font>，则能够<font color = '#DC143C'><strong>通过的信号的高频分量就越多</strong></font>，那么<font color = '#DC143C'><strong>码元的传输速率就可以更高</strong></font>，而<font color = '#DC143C'><strong>不会导致码间串扰</strong></font></li><li>然而，<font color = '#DC143C'><strong>信道的频率带宽是有上限的</strong></font>，不可能无限大。因此，<font color = '#DC143C'><strong>码元的传输速率也有上限</strong></font></li></ul><h4 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h4><p><font color = '#DC143C'><strong>理想</strong></font>低通信道的<font color = '#DC143C'><strong>最高码元传输速率</strong></font> &#x3D; 2W Baud &#x3D; 2W 码元&#x2F;秒</p><blockquote><p>W：信道的频率带宽（单位为HZ）<br>Baud：波特，即码元&#x2F;秒</p></blockquote><ul><li><p>使用奈氏准则给出的公式，就可以根据信道的频率带宽，计算出信道的最高码元传输速率</p></li><li><p>只要码元传输速率不超过根据奈氏准则计算出的上限，就可以避免码间串扰</p></li><li><p>奈氏准则给出的是理想低通信道的最高码元传输速率，它和实际信道有较大的差别。因此，一个实际的信道所能传输的最高码元传输速率，要明显低于奈氏准则给出的上限值</p></li><li><p>码元传输速率又称为波特率、调制速率、波形速率或符号速率</p></li><li><p>波特率与比特率有一定的关系：</p><ul><li>当1个码元只携带1比特的信息量时，波特率（码元&#x2F;秒）与比特率（比特&#x2F;秒）在数值上是相等的</li><li>当1个码元携带n比特的信息量时，波特率（码元&#x2F;秒）转换成比特率（比特&#x2F;秒）时，数值要乘以n</li></ul></li></ul><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><blockquote><p>尽管奈氏准则限制了最高码元传输速率，但是只要采用技术更为复杂的信号调制方法，让码元可以携带更多的比特，岂不是可以无限制地提高信息的传输效率吗？</p></blockquote><p>回答是否定的。因为在实际的信道中会有噪声，噪声是随机产生的，其瞬时值有时会很大，这会影响接收端对码元的识别，并且噪声功率相对于信号功率越大，影响就越大</p><h4 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h4><p><font color = '#DC143C'><strong>带宽受限</strong></font>且有<font color = '#DC143C'><strong>高斯白噪声</strong></font>干扰的信道的<font color = '#DC143C'><strong>极限信息传输速率</strong></font><br>$$<br>C &#x3D; W \log2(1 + \frac{S}{N})<br>$$</p><blockquote><p>C：信道的极限信息传输速率（单位为b&#x2F;s）</p><p>W：信道的频率带宽（单位为Hz）</p><p>S：信道内所传信号的平均功率</p><p>N：信道内地高斯噪声功率</p><p>S&#x2F;N：信噪比，常用分贝（dB）表示</p></blockquote><ul><li>信道的频率带宽W或信道中的信噪比S&#x2F;N越大，信道的极限信息传输速率C就越高</li><li>实际信道不可能无限制地提高频率带宽W或信道中的信噪比S&#x2F;N</li><li>实际信道中能够达到的信息传输速率，要比香农公式给出的极限传输速率低不少。这是因为在实际信道中，信号还要受到其他一些损伤，例如各种脉冲干扰和信号衰减等，这些因素在香农公式中并未考虑</li></ul><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><ul><li>复用（Multiplexing）就是<font color = '#DC143C'><strong>在一条传输媒体上同时传输多路用户的信号</strong></font></li><li>当一条传输媒体的传输容量大于多条信道传输的总容量时，就可以通过复用技术，在这条传输媒体上建立多条通信信道，以便<font color = '#DC143C'><strong>充分利用传输媒体的带宽</strong></font></li><li>尽管实现信道复用技术会增加通信成本（需要复用器、分用器以及费用较高的大容量共享信道），但如果<font color = '#DC143C'><strong>复用的信道数量较大</strong></font>，还是<font color = '#DC143C'><strong>比较划算</strong></font>的</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302059586.png"></p><h4 id="常见的信道复用技术"><a href="#常见的信道复用技术" class="headerlink" title="常见的信道复用技术"></a>常见的信道复用技术</h4><h5 id="频分复用FDM"><a href="#频分复用FDM" class="headerlink" title="频分复用FDM"></a>频分复用FDM</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302103190.png"></p><h5 id="时分复用TDM"><a href="#时分复用TDM" class="headerlink" title="时分复用TDM"></a>时分复用TDM</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302103106.png"></p><h5 id="波分复用WDM"><a href="#波分复用WDM" class="headerlink" title="波分复用WDM"></a>波分复用WDM</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302103689.png"></p><ul><li>根据频分复用的设计思想，可在一根光纤上<font color = '#DC143C'><strong>同时传输多个频率（波长）相近的光载波信号</strong></font>，实现基于光纤的频分复用技术</li><li>目前可以在一根光纤上复用80路或更多路的光载波信号。因此，这种复用技术也称为<font color = '#DC143C'><strong>密集波分复用DWDM</strong></font></li><li>铺设光缆的工程耗资巨大，应尽量在一根光缆中放入尽可能多的光纤，然后对每一根光纤使用密集波分复用技术</li></ul><h5 id="码分复用CDM"><a href="#码分复用CDM" class="headerlink" title="码分复用CDM"></a>码分复用CDM</h5><ul><li><p>码分复用（Code Division Multiplexing，CDM）常称为码分多址（Code Division Mutiple Access，CDMA），它是在扩频通信技术的基础上发展起来的一种无线通信技术</p></li><li><p>与FDM和TDM不同，CDMA的每个用户可以<font color = '#DC143C'><strong>在相同的时间使用相同的频带进行通信</strong></font></p></li><li><p>CDMA最初用于军事通信，这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现</p></li><li><p>随着技术的进步，CDMA设备的价格和体积都大幅下降，因而现在已广泛用于民用的移动通信中</p></li><li><p>CDMA将每个比特时间划分为m个更短的时间片，称为<font color = '#DC143C'><strong>码片</strong></font>（Chip）。m的取值通常为64或128</p></li><li><p>CDMA的每个站点都被指派一个唯一的<font color = '#DC143C'><strong>m比特码片序列</strong></font>（Chip Sequence）</p><ul><li>某个站要发送<font color = '#DC143C'><strong>比特1</strong></font>，则发送它自己的<font color = '#DC143C'><strong>m比特码片序列</strong></font></li><li>某个站要发送<font color = '#DC143C'><strong>比特0</strong></font>，则发送它自己的<font color = '#DC143C'><strong>m比特码片序列的反码</strong></font></li></ul></li><li><p>如果有两个或多个站同时发送数据，则信道中的信号就是这些站各自所发送一系列码片序列或码片序列反码的<font color = '#DC143C'><strong>叠加</strong></font>。为了从信道中<font color = '#DC143C'><strong>分离</strong></font>出每个站的信号，给每个站<font color = '#DC143C'><strong>指派码片序列</strong></font>时，必须遵守：</p><ul><li>分配给每个站的<font color = '#DC143C'><strong>码片序列必须各不相同</strong></font>，实际常采用伪随机码序列</li><li>分配给每个站的<font color = '#DC143C'><strong>码片序列必须相互正交</strong></font>，即各码片序列相应的码片向量之间的<font color = '#DC143C'><strong>规格化内积为0</strong></font></li></ul><p>$$<br>A·B &#x3D; \frac{1}{m}\sum_{i&#x3D;1}^{m}{A_iB_i} &#x3D; 0<br>$$</p></li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><h4 id="数据链路层在网络体系结构中所处的地位"><a href="#数据链路层在网络体系结构中所处的地位" class="headerlink" title="数据链路层在网络体系结构中所处的地位"></a>数据链路层在网络体系结构中所处的地位</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302129516.png"></p><h4 id="链路、数据链路和帧"><a href="#链路、数据链路和帧" class="headerlink" title="链路、数据链路和帧"></a>链路、数据链路和帧</h4><ul><li>链路（Link）是指从一个节点到相邻节点的一段物理线路（有线或无线），而<font color = '#DC143C'><strong>中间没有任何其他的交换节点</strong></font></li><li>数据链路（Data Link）是基于链路的。当在一条链路上传送数据时，除需要链路本身，还需要一些必要的通信协议来控制这些数据的传输，把<font color = '#DC143C'><strong>实现这些协议的硬件和软件加到链路上</strong></font>，就构成了数据链路</li><li>计算机中的网络适配器（俗称<font color = '#DC143C'><strong>网卡</strong></font>）和其对应的<font color = '#DC143C'><strong>软件驱动程序</strong></font>就实现了这些协议。<font color = '#DC143C'><strong>一般的网络适配器都包含了物理层和数据链路层这两层的功能</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302135783.png"></p><ul><li>帧（Frame）是<font color = '#DC143C'><strong>数据链路层</strong></font>对等实体之间在水平方向进行逻辑通信的<font color = '#DC143C'><strong>协议数据单元PDU</strong></font></li></ul><h3 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><ul><li>封装成帧是指数据链路层给上层交付下来的协议数据单元PDU添加一个首部和一个尾部，使之成为帧<ul><li>帧的首部和尾部中包含一些<font color = '#DC143C'><strong>重要的控制信息</strong></font></li><li>帧首部和尾部的作用之一就是<font color = '#DC143C'><strong>帧定界</strong></font></li></ul></li><li>为了提高数据链路层传输帧的效率，应当使<font color = '#DC143C'><strong>帧的数据载荷的长度尽可能地大于首部和尾部的长度</strong></font></li><li>考虑到对缓存空间的需求以及差错控制等诸多因素，每一种数据链路层协议都规定了帧的数据载荷的长度上限，即<font color = '#DC143C'><strong>最大传送单元</strong></font>（Maximum Transfer Unit，MTU）。例如，以太网的MTU为1500个字节</li></ul><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><ul><li>透明传输是指<font color = '#DC143C'><strong>数据链路层对上层交付下来的协议数据单元PDU没有任何限制</strong></font>，就好像数据链路层不存在一样<ul><li>面向字节的物理链路使用<font color = '#DC143C'><strong>字节填充</strong></font>的方法实现透明传输</li><li>面向比特的物理链路使用<font color = '#DC143C'><strong>比特填充</strong></font>的方法实现透明传输</li></ul></li></ul><h4 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h4><h5 id="误码的相关概念"><a href="#误码的相关概念" class="headerlink" title="误码的相关概念"></a>误码的相关概念</h5><ul><li><p>实际的通信链路都是不理想的，比特在传输过程中可能会产生差错（称为<font color = '#DC143C'><strong>比特差错</strong></font>）</p><ul><li>比特1可能变成比特0</li><li>比特0可能变成比特1</li></ul></li><li><p>在一段时间内，传输错误的比特数量占所传输比特总数的比率称为<font color = '#DC143C'><strong>误码率</strong></font>（Bit Error Rate，BER）</p></li><li><p><font color = '#DC143C'><strong>提高链路的信噪比</strong></font>，可以<font color = '#DC143C'><strong>降低误码率</strong></font>。但在实际的通信链路上，不可能使误码率下降为零</p></li><li><p>使用<font color = '#DC143C'><strong>差错检测技术</strong></font>来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一</p></li></ul><h5 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h5><ul><li>奇校验是在待发送的数据后面<font color = '#DC143C'><strong>添加1个校验位</strong></font>，使得添加该校验位后的整个数据中<font color = '#DC143C'><strong>比特1的个数</strong></font>为<font color = '#DC143C'><strong>奇数</strong></font></li><li>偶校验是在待发送的数据后面<font color = '#DC143C'><strong>添加1个校验位</strong></font>，使得添加该校验位后的整个数据中<font color = '#DC143C'><strong>比特1的个数</strong></font>为<font color = '#DC143C'><strong>偶数</strong></font></li><li>在所传输的数据中，如果有<font color = '#DC143C'><strong>奇数个位发生误码</strong></font>，则所包含比特1的数量的奇偶性会发生改变，<font color = '#DC143C'><strong>可以检测出误码</strong></font></li><li>在所传输的数据中，如果有<font color = '#DC143C'><strong>偶数个位发生误码</strong></font>，则所包含比特1的数量的奇偶性不会发生改变，<font color = '#DC143C'><strong>无法检测出误码</strong></font></li><li>在实际使用时，奇偶校验又可分为垂直奇偶校验、水平奇偶校验以及水平垂直奇偶校验</li></ul><h5 id="循环冗余校验"><a href="#循环冗余校验" class="headerlink" title="循环冗余校验"></a>循环冗余校验</h5><ul><li>数据链路层广泛使用<font color = '#DC143C'><strong>漏检率极低</strong></font>的循环冗余校验（Cyclic Redundancy Check，CRC）检错技术</li><li>循环冗余校验CRC的基本思想<ul><li>收发双方约定好一个<font color = '#DC143C'><strong>生成多项式G(x)</strong></font></li><li>发送方基于待发送的数据和生成多项式G(x)，计算出差错检测码（<font color = '#DC143C'><strong>冗余码</strong></font>），将冗余码添加到待发送数据的后面一起传输</li><li>接收方受到数据和冗余码后，通过生成多项式G(x)来计算收到的数据和冗余码是否产生了误码</li></ul></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302229145.png"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>奇偶校验、循环冗余校验等差错检测技术，只能检测出传输过程中出现了差错，但并<font color = '#DC143C'><strong>不能定位错误</strong></font>，因此<font color = '#DC143C'><strong>无法纠正错误</strong></font></li><li>要想纠正传输中的差错，可以使用冗余信息更多的<font color = '#DC143C'><strong>纠错码</strong></font>（例如海明码）进行<font color = '#DC143C'><strong>前向纠错</strong></font>。但纠错码的开销比较大，在<font color = '#DC143C'><strong>计算机网络中较少使用</strong></font></li><li>在计算机网络中，通常采用<font color = '#DC143C'><strong>检错重传方式来纠正传输中的差错</strong></font>，<font color = '#DC143C'><strong>或者仅仅丢弃检测到差错的帧</strong></font>，这取决于数据链路层想起上层提供的是可靠传输服务还是不可靠传输服务</li><li>循环冗余校验CRC具有很好的检错能力（<font color = '#DC143C'><strong>漏检率极低</strong></font>），虽然计算比较复杂，但非常<font color = '#DC143C'><strong>易于用硬件实现</strong></font>，因此被广泛应用于数据链路层</li></ul><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>使用<font color = '#DC143C'><strong>差错检测技术</strong></font>（例如循环冗余校验CRC），接收方的数据链路层就可检测出帧在传输过程中是否产生了<font color = '#DC143C'><strong>误码</strong></font>（比特差错）</li><li>数据链路层向其上层提供的服务类型<ul><li><font color = '#DC143C'><strong>不可靠传输服务</strong></font>：<font color = '#DC143C'><strong>仅仅丢弃有误码的帧</strong></font>，其他什么也不做</li><li><font color = '#DC143C'><strong>可靠传输服务</strong></font>：通过某种机制实现<font color = '#DC143C'><strong>发送方发送什么</strong></font>，<font color = '#DC143C'><strong>接收方最终就能收到什么</strong></font></li></ul></li><li>一般情况下，<font color = '#DC143C'><strong>有线链路的误码率比较低</strong></font>。为了减小开销，<font color = '#DC143C'><strong>并不要求数据链路层向其上层提供可靠传输服务</strong></font>。即使出现了误码，可靠传输的问题由其上层处理</li><li><font color = '#DC143C'><strong>无线链路</strong></font>易受干扰，<font color = '#DC143C'><strong>误码率比较高</strong></font>，因此<font color = '#DC143C'><strong>要求数据链路层必须向其上层提供可靠传输服务</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310302246888.png"></p><ul><li><font color = '#DC143C'><strong>可靠传输服务并不局限于数据链路层</strong></font>，其他各层均可选择实现可靠传输</li><li>可靠传输的实现比较复杂，开销比较大，是否使用可靠传输取决于应用需求</li></ul><h4 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h4><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311022338331.png"></p><ul><li>接收方收不到数据分组，就不会发送相应的ACK或NAK</li><li>如果不采取措施，发送方就会一致处于等待接收方ACK或NAK的状态</li><li>为解决上述问题，发送方可在每发送完一个数据分组时就启动一个<font color = '#DC143C'><strong>超时计时器</strong></font>（Timeout Timer）</li><li>若到了超时计时器所设置的<font color = '#DC143C'><strong>超时计重传时间</strong></font>（Retranmission Time-Out，RTO），但发送方仍未收到接收方的ACK或NAK，就<font color = '#DC143C'><strong>重传</strong></font>之前已发送过的数据分组</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311022343344.png"></p><ul><li>为了<font color = '#DC143C'><strong>避免分组重复</strong></font>这种传输错误，必须<font color = '#DC143C'><strong>给每个分组带上序号</strong></font></li><li>对于停止-等待协议，由于每发送一个数据分组就停止等待，只要保证每发送一个新的数据分组，其序号与上次发送的数据分组的序号不同就可以，因此<font color = '#DC143C'><strong>用一个比特来编号就够了，序号有0和1这两个</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311022351562.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311022351906.png"></p><blockquote><p>注意</p></blockquote><ul><li>使用超时重传机制后，就可以不使用否认机制了，这样可使协议实现起来更加简单。但是，如果点对点链路的误码率较高，<font color = '#DC143C'><strong>使用否认机制可以使发送方在超时计时器超时前就尽快重传</strong></font></li><li>为了让接收方能够判断所收到的数据分组是否是重复的，需要给<font color = '#DC143C'><strong>数据分组编号</strong></font>。由于<font color = '#DC143C'><strong>停止-等待协议</strong></font>的特性，<font color = '#DC143C'><strong>只需1个比特编序号</strong></font>即可，即序号0和序号1</li><li>为了让发送方能够判断所收到的确认分组是否是重复的，需要给<font color = '#DC143C'><strong>确认分组编号</strong></font>，所用比特数量<font color = '#DC143C'><strong>与数据分组所用比特数量一样</strong></font><ul><li>数据链路层一般不会出现确认分组迟到的情况，因此在<font color = '#DC143C'><strong>数据链路层实现停止-等待协议可以不用给确认分组编号</strong></font></li></ul></li><li>给超时计时器设置的超时重传时间RTO应当仔细选择，<font color = '#DC143C'><strong>一般将RTO设置为略大于收发双方的平均往返时间RTT</strong></font><ul><li>在数据链路层，点对点的往返时间RTT比较固定，RTO就比较好设定</li><li>在运输层，由于端到端往返时间非常不确定，设置合适的超时重传时间RTO有时并不容易</li></ul></li><li>停止等待协议属于自动请求重传（Automatic Repeat Request，ARQ）协议。即重传的请求是发送方自动进行的，而不是接收方请求发送方重传某个误码的数据分组</li></ul><h5 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311030005371.png"></p><ul><li>若出现超时重传，对于传送有用的数据信息来说，信道利用率还要降低</li><li>在往返时间RTT相对较大的情况下，为了提高信道利用率，收发双方不适合采用停止-等待协议，而可以选择使用回退N帧（GBN）协议或选择重传（SR）协议</li></ul><h4 id="回退N帧协议"><a href="#回退N帧协议" class="headerlink" title="回退N帧协议"></a>回退N帧协议</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311030011796.png"></p><h5 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h5><ul><li>发送窗口W_T的取值范围是1 &lt; W_T &lt;&#x3D; (2^n -1)，其中，n是构成分组序号的比特数量<ul><li>如果W_T &#x3D; 1             变成了停止-等待协议</li><li>如果W_T &gt; (2^n -1)  接收方<font color = '#DC143C'><strong>无法分辨新旧数据分组</strong></font></li></ul></li><li>可在未收到的接收方确认分组的情况下，将序号落入发送窗口内的多个数据分组全部发送出去</li><li>只有收到对已发送数据分组的确认分组时，发送窗口才能向前滑动到相应位置</li><li>收到多个重复确认时，可在重传计时器超时前尽早开始重传，由具体实现决定</li><li>发送窗口内某个已发送的数据分组产生超时重传时，发送窗口内该数据分组的后续已发送的数据分组也必须全部重传，这就是回退N帧（Go-back-N，GBN）协议名称的由来</li></ul><h5 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h5><ul><li>接收窗口W_R &#x3D; 1的，因此只能按序接收数据分组</li><li>只接收序号落入接收窗口内且无误码的数据分组，并且将接收窗口向前滑动一个位置，与此同时给发送方发送相应的确认分组</li><li>为了减小开销，接收方不必每收到一个按序到达且无误码的数据分组就给发送方发送一个相应的确认分组<ul><li>可以在连续收到多个按序到达且无误码的数据分组后（数量由具体实现决定），才针对最后一个数据分组发送确认分组，这称为<font color = '#DC143C'><strong>累计确认</strong></font></li><li>或者可以在自己有数据分组要发送时才对之前按序接收且无误码的数据分组进行稍待确认</li></ul></li><li>接收方收到未按序到达的数据分组后，除丢弃外，还可对之前最后一个按序到达的数据分组进行重复确认，以便发送方尽快重传</li></ul><h4 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311030054409.png"></p><h5 id="发送方-1"><a href="#发送方-1" class="headerlink" title="发送方"></a>发送方</h5><ul><li>可在未收到接收方确认分组的情况下，将序号落入发送窗口内的多个数据分组全部发送出去</li><li>只有按序收到对已发送数据分组的确认分组时，发送窗口才能向前滑动到相应位置</li><li>如果收到未按序到达的确认分组，应对其进行记录，以防止其相应数据分组的超时重发，但发送窗口不能向前滑动</li></ul><h5 id="接收方-1"><a href="#接收方-1" class="headerlink" title="接收方"></a>接收方</h5><ul><li>可接收未按序到达但没有误码并且序号落入接收窗口内的数据分组</li><li>为了使发送方仅重传出现差错的分组，接收方不再采用累积确认，而需要对每一个正确接收到的数据分组进行逐一确认</li><li>只有在按序接收数据分组后，接收窗口才能向前滑动到相应位置</li></ul><h3 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><ul><li>点对点协议（Point-to-point Protocol，PPP）是目前使用最广泛的点对点数据链路层协议</li><li>点对点协议PPP是因特网工程任务组（Internet Engineering Task Force，IETF）于1992年制定的。经过多次修订，目前PPP已成为因特网的正式标准[RFC1661，RFC1662]</li><li>点对点协议PPP主要有两种应用</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031055022.png"></p><ul><li>从网络体系结构的角度看点对点协议PPP的组成</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031112666.png"></p><h4 id="PPP的帧格式"><a href="#PPP的帧格式" class="headerlink" title="PPP的帧格式"></a>PPP的帧格式</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031113524.png"></p><h4 id="PPP帧的透明传输"><a href="#PPP帧的透明传输" class="headerlink" title="PPP帧的透明传输"></a>PPP帧的透明传输</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031116801.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031117632.png"></p><h4 id="PPP帧的差错检测"><a href="#PPP帧的差错检测" class="headerlink" title="PPP帧的差错检测"></a>PPP帧的差错检测</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031118300.png"></p><ul><li>接收方每收到一个PPP帧，就进行CRC检验。若CRC检验正确，就收下这个帧；否则，就丢弃这个帧</li><li>使用PPP的数据链路层，<font color = '#DC143C'><strong>向上提供的是不可靠数据传输服务</strong></font></li></ul><h4 id="PPP的工作状态"><a href="#PPP的工作状态" class="headerlink" title="PPP的工作状态"></a>PPP的工作状态</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031122721.png"></p><h3 id="共享式以太网"><a href="#共享式以太网" class="headerlink" title="共享式以太网"></a>共享式以太网</h3><ul><li>以太网（Ethernet）以曾经被假想的电磁波传输介质<font color = '#DC143C'><strong>以太</strong></font>（Ether）来命名</li><li>以太网最初采用无源电缆（不包含电源线）作为共享总线来传输帧，属于基带总线局域网，传输速率为2.94Mb&#x2F;s</li><li>以太网目前已经从传统的<font color = '#DC143C'><strong>共享式以太网</strong></font>发展到<font color = '#DC143C'><strong>交换式以太网</strong></font>，传输速率已经从10Mb&#x2F;s提高到100Mb&#x2F;s、1Gb&#x2F;s甚至10Gb&#x2F;s</li></ul><h3 id="网络适配器和MAC地址"><a href="#网络适配器和MAC地址" class="headerlink" title="网络适配器和MAC地址"></a>网络适配器和MAC地址</h3><h4 id="网络适配器"><a href="#网络适配器" class="headerlink" title="网络适配器"></a>网络适配器</h4><ul><li>要将计算机连接到以太网，需要使用相应的<font color = '#DC143C'><strong>网络适配器</strong></font>（Adapter），网络适配器一般简称为 “<font color = '#DC143C'><strong>网卡</strong></font>“</li><li>在计算机内部，<font color = '#DC143C'><strong>网卡与CPU</strong></font>之间的通信，一般都是通过计算机主板上的I&#x2F;O总线以<font color = '#DC143C'><strong>并行传输</strong></font>方式进行</li><li><font color = '#DC143C'><strong>网卡与外部以太网</strong></font>（局域网）之间的通信，一般都是通过传输媒体（同轴电缆、双绞线电缆、光纤）以<font color = '#DC143C'><strong>串行方式</strong></font>进行的</li><li>网卡除要<font color = '#DC143C'><strong>实现物理层和数据链路层功能</strong></font>，其另外一个重要功能就是要进行<font color = '#DC143C'><strong>并行传输和串行传输</strong></font>的转换。由于网络的传输速率和计算机内部总线上的传输速率并不相同，因此在网卡的核心芯片中都会包含用于缓存数据的存储器</li><li>在确保网卡硬件正确的情况下，为了使网卡正常工作，还必须要在计算机的操作系统中为网卡安装相应的设备驱动程序。<font color = '#DC143C'><strong>驱动程序</strong></font>负责驱动网卡发送和接收帧</li></ul><h4 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h4><ul><li>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须要有一个<font color = '#DC143C'><strong>唯一的标识</strong></font>，即一个<font color = '#DC143C'><strong>数据链路层地址</strong></font></li><li>在每个主机发送的<font color = '#DC143C'><strong>帧的首部</strong></font>中，都<font color = '#DC143C'><strong>携带</strong></font>有发送主机（源主机）和接收主机（目的主机）的<font color = '#DC143C'><strong>数据链路层地址</strong></font>。由于这类地址是用于<font color = '#DC143C'><strong>媒体接入控制</strong></font>（Medium Access Control，MAC）的，因此被称为<font color = '#DC143C'><strong>MAC</strong></font>地址</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031723083.png"></p><ul><li><p><font color = '#DC143C'><strong>MAC地址</strong></font>一般被固化在网卡的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为<font color = '#DC143C'><strong>硬件地址</strong></font></p></li><li><p>MAC地址有时也被称为<font color = '#DC143C'><strong>物理地址</strong></font></p></li><li><p><font color = '#DC143C'><strong>物理地址</strong></font>属于数据链路层范畴</p></li><li><p>一般情况下，普通用户计算机中往往会包含两块网卡</p><ul><li>一块是用于接入有限局域网的<font color = '#DC143C'><strong>以太网卡</strong></font></li><li>另一块是用于接入无线局域网的<font color = '#DC143C'><strong>Wi-Fi网卡</strong></font></li></ul></li><li><p>每块网卡都有一个<font color = '#DC143C'><strong>全球唯一的MAC地址</strong></font></p></li><li><p>交换机和路由器往往具有更多的网络接口，所以会拥有更多的MAC地址</p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031732120.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031735560.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031737470.png"></p><h5 id="广播MAC地址举例"><a href="#广播MAC地址举例" class="headerlink" title="广播MAC地址举例"></a>广播MAC地址举例</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031739554.png"></p><h5 id="多播MAC地址举例"><a href="#多播MAC地址举例" class="headerlink" title="多播MAC地址举例"></a>多播MAC地址举例</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031740472.png"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><p>网卡从网络上每收到一个无误码的帧，就检查帧首部中的目的MAC地址，按以下情况处理</p><p>(1) 如果目的MAC地址是广播地址（FF-FF-FF-FF-FF-FF），则接受该帧</p><p>(2) 如果目的MAC地址与网卡上固化的全球单播MAC地址相同，则接受该帧</p><p>(3) 如果目的MAC地址是网卡支持的多播地址，则接受该帧</p><p>(4) 除上述（1）、（2）和（3）情况外，丢弃该帧</p></li><li><p>网卡还可被设置为一种特殊的工作方式：<font color = '#DC143C'><strong>混杂方式</strong></font>（Promiscuous Mode）。工作在混杂方式的网卡，只要收到共享媒体上传来的帧就会收下，而不管帧的目的MAC地址是什么</p><ul><li>对于网络维护和管理人员，这种方式可以监视和分析局域网上的流量，以便找出提高网络性能的具体措施</li><li><font color = '#DC143C'><strong>嗅探器</strong></font>（Sniffer）就是一种工作在混杂方式的网卡，再配合相应的工具软件（WireShark），就可以作为一种非常有用的网络工具来学习和分析网络</li><li>混杂方式就像一把 “双刃剑”，黑客常利用这种方式非法获取网络用户的口令</li></ul></li></ul><blockquote><p>注意</p></blockquote><ul><li>全球单播MAC地址就如同身份证上的身份号码，具有唯一性，它往往与用户个人信息绑定在一起。因此，用户应尽量<font color = '#DC143C'><strong>确保自己拥有的全球单播MAC地址不被泄露</strong></font></li><li>为了避免用户设备连接Wi-Fi热点时MAC地址泄露的安全问题，目前大多数移动设备都已采用了<font color = '#DC143C'><strong>随机MAC地址技术</strong></font></li></ul><h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><ul><li>在以太网的发展初期，人们普遍认为 “无源的电缆线比有源器件可靠”，因此将多个站点连接在一条总线上来构建<font color = '#DC143C'><strong>共享总线以太网</strong></font></li><li>共享总线以太网具有<font color = '#DC143C'><strong>天然的广播特性</strong></font>，即使总线上某个站点给另一个站点发送单播帧，表示帧的信号也会沿着总线传播到总线上的其他各站点</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031804364.png"></p><ul><li>当某个站点在总线上发送帧时，总线资源会被该站点独占。此时，如果总线上的其他站点也要在总线上发送帧，就会产生<font color = '#DC143C'><strong>信号碰撞</strong></font></li><li>当两个或多个站点同时使用总线发送帧时，就会产生信号碰撞</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031807591.png"></p><ul><li>为了解决各站点争用总线的问题，共享总线以太网使用了一种专用协议<font color = '#DC143C'><strong>CSMA&#x2F;CD</strong></font>，它是<font color = '#DC143C'><strong>载波监听多址接入&#x2F;碰撞检测</strong></font>（Carrier Sense Multiple Access Collision Detection）的英文缩写词</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311031819664.png"></p><blockquote><p>多址接入MA</p><p>载波监听CS</p><p>碰撞检测CD</p></blockquote><ul><li>载波监听检测到总线空闲，但<font color = '#DC143C'><strong>总线并不一定空闲</strong></font></li><li>使用CSMA&#x2F;CD协议的共享总线以太网上的各站点，只是尽量避免碰撞并在出现碰撞时做出退避后重发的处理，但<font color = '#DC143C'><strong>不能完全避免碰撞</strong></font></li><li>在使用CSMA&#x2F;CD协议时，由于正在发送帧的站点必须 “边发送帧边检测碰撞”，因此站点不可能同时进行发送和接收，也就是不可能进行全双工通信，而<font color = '#DC143C'><strong>只能进行半双工通信</strong></font>（双向交替通信）</li></ul><h3 id="共享式以太网-1"><a href="#共享式以太网-1" class="headerlink" title="共享式以太网"></a>共享式以太网</h3><h4 id="争用期"><a href="#争用期" class="headerlink" title="争用期"></a>争用期</h4><ul><li>使用CSMA&#x2F;CD协议的共享总线以太网上的任意站点在发送帧的过程中都可能会遭遇碰撞</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311032309952.png"></p><ul><li>站点从发送帧开始，最多经过时长2τ（即δ -&gt; 0）就可以检测出所发送的帧是否遭遇了碰撞</li><li>因此，共享总线以太网的<font color = '#DC143C'><strong>端到端往返时间2τ</strong></font>被称为<font color = '#DC143C'><strong>争用期</strong></font>（Contension Period）或<font color = '#DC143C'><strong>碰撞窗口</strong></font>（Collision Window），它是一个非常重要的参数<ul><li>站点从发送帧开始，<font color = '#DC143C'><strong>经过争用期2τ这段时间还没有检测到碰撞</strong></font>，<font color = '#DC143C'><strong>就可以肯定这次发送不会产生碰撞</strong></font></li></ul></li><li>从争用期的概念可以看出，共享总线以太网上的每一个站点从发送帧开始，到之后的一小段时间内，都有可能遭遇碰撞，而<font color = '#DC143C'><strong>这一小段的长短时不确定</strong></font>的，它<font color = '#DC143C'><strong>取决于另一个发送帧的站点与本站点的距离</strong></font>，但不会超过总线的端到端往返传播时延，即一个争用期2τ<ul><li>很显然，总线的长度越长（单程端到端传播时延越大），网络中站点数量越多，发生碰撞的概率就越大</li><li>因此，共享以太网的总线长度不能太长，接入的站点数量也不能太多</li></ul></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311032321651.png"></p><h4 id="最小帧长"><a href="#最小帧长" class="headerlink" title="最小帧长"></a>最小帧长</h4><ul><li>为了确保共享总线以太网上的每一个站点在发送完一个完整的帧之前，能够检测出是否产生了碰撞，<font color = '#DC143C'><strong>帧的发送时延就不能少于共享总线以太网端到端的往返时间</strong></font>，即一个争用期2τ</li><li>对于10Mb&#x2F;s的共享总线以太网，其争用期2的值规定为51.2μs，因此其<font color = '#DC143C'><strong>最小帧长为512b，即64B</strong></font></li></ul><p>$$<br>10Mb&#x2F;s \times 51.2μs &#x3D; 512b &#x3D; 64B<br>$$</p><ul><li>当某个站点在发送帧时，如果帧的前64B没有遭遇碰撞，那么帧的后续部分也就不会遭遇碰撞。也就是说，如果遭遇碰撞，就一定时在帧的前64B之内</li><li>由于发送帧的站点边发送帧边检测碰撞，一旦检测到碰撞就立即中止帧的发送，此时已发送的数据量一定小于64B。因此，接收站点收到<font color = '#DC143C'><strong>长度小于64B的帧</strong></font>，就可判定这是一个<font color = '#DC143C'><strong>遭遇了碰撞而异常中止的无效帧</strong></font>，将其丢弃即可</li></ul><h4 id="最大帧长"><a href="#最大帧长" class="headerlink" title="最大帧长"></a>最大帧长</h4><ul><li>一般来说，<font color = '#DC143C'><strong>帧的数据载荷的长度应远大于帧首部和尾部的总长度</strong></font>，这样可以<font color = '#DC143C'><strong>提高帧的传输效率</strong></font></li><li>然而，如果不限制数据载荷的长度上限，就可能使得<font color = '#DC143C'><strong>帧的长度太长</strong></font>，这会<font color = '#DC143C'><strong>带来一些问题</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311032346999.png"></p><h4 id="退避算法"><a href="#退避算法" class="headerlink" title="退避算法"></a>退避算法</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311032349618.png"></p><ul><li>如果连续多次发生碰撞，就表明可能有较多的站点参与竞争信道。但使用上述退避算法可<font color = '#DC143C'><strong>使重传需要推迟的平均时间随重传次数而增大</strong></font>（即<font color = '#DC143C'><strong>动态退避</strong></font>），因而<font color = '#DC143C'><strong>减小产生碰撞的概率</strong></font></li><li><font color = '#DC143C'><strong>当重传达16次仍不能成功时</strong></font>，就表明同时打算发送帧的站点太多了，以至于连续产生碰撞，此时应<font color = '#DC143C'><strong>放弃重传</strong></font>并向高层报告</li></ul><h4 id="信道利用率-1"><a href="#信道利用率-1" class="headerlink" title="信道利用率"></a>信道利用率</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311032354037.png"></p><ul><li>考虑以下理想情况<ul><li>总线一旦空闲就有某个站点立即发送帧</li><li>各站点发送帧都不会产生碰撞</li><li>发送一帧占用总线的时间为T0 + τ，而帧本身的发送时间时T0</li></ul></li></ul><p>$$<br>极限信道利用率\ S_{max} &#x3D; \frac{T_0}{T_0 + \tau} &#x3D; \frac{1}{1 + \frac{\tau}{T_0}} &#x3D; \frac{1}{1+a}<br>$$</p><h3 id="使用集线器的共享式以太网"><a href="#使用集线器的共享式以太网" class="headerlink" title="使用集线器的共享式以太网"></a>使用集线器的共享式以太网</h3><ul><li>早期的传统以太网是使用<font color = '#DC143C'><strong>粗同轴电缆</strong></font>的共享<font color = '#DC143C'><strong>总线</strong></font>以太网，后来发展到使用价格相对便宜的<font color = '#DC143C'><strong>细同轴电缆</strong></font></li><li>当初认为这种连接方法既简单又可靠，因为在那个时代普遍认为<font color = '#DC143C'><strong>有源器件不可靠</strong></font>，而<font color = '#DC143C'><strong>无源的电缆线才是最可靠的</strong></font><ul><li>然而，实践证明这种使用<font color = '#DC143C'><strong>无源电缆线和大量机械接口</strong></font>的总线型以太网<font color = '#DC143C'><strong>并不</strong></font>像人们想象的那么<font color = '#DC143C'><strong>可靠</strong></font></li></ul></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311040009777.png"></p><ul><li><p>在使用细同轴电缆的共享总线以太网之后，以太网发展出来了一种使用大规模集成电路来替代总线、并且可靠性非常高的设备，叫作<font color = '#DC143C'><strong>集线器（Hub）</strong></font></p></li><li><p>站点连接到集线器的传输媒体也转而使用更便宜、更灵活的<font color = '#DC143C'><strong>双绞线电缆</strong></font></p></li><li><p>集线器的一些主要特点如下</p><ul><li>使用集线器的以太网虽然<font color = '#DC143C'><strong>物理拓扑是星型</strong></font>的，但在逻辑上仍然是一个<font color = '#DC143C'><strong>总线网</strong></font>。总线上的各站点共享总线资源，<font color = '#DC143C'><strong>使用的还是CSMA&#x2F;CD协议</strong></font></li><li>集线器<font color = '#DC143C'><strong>只工作在物理层</strong></font>，它的每个接口仅简单地转发比特，并不进行碰撞检测。碰撞检测的xingxin任务由各站点中的网卡负责</li><li>集线器一般都<font color = '#DC143C'><strong>有少量的容错能力和网络管理功能</strong></font>。例如，若网络中某个站点的网卡出现了故障而不停地发送帧，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网能正常工作</li></ul></li><li><p>IEEE于1990年制定了<font color = '#DC143C'><strong>10BASE-T</strong></font>星型以太网的标准802.3i，这种以太网是局域网发展史上的一座非常重要的里程碑，它为<font color = '#DC143C'><strong>以太网在局域网中的统治地位</strong></font>奠定了牢固的基础</p></li><li><p>10BASE-T以太网的通信距离较短，每个<font color = '#DC143C'><strong>站点到集线器的距离不能超过100m</strong></font></p></li><li><p>IEEE 802.3以太网还可使用光纤作为传输媒体，相应的标准为10BASE-F，“F”表示光纤。光纤主要用作集线器之间的远程连接</p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311040020983.png"></p><h3 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h3><h4 id="扩展站点与集线器之间的距离"><a href="#扩展站点与集线器之间的距离" class="headerlink" title="扩展站点与集线器之间的距离"></a>扩展站点与集线器之间的距离</h4><ul><li>共享总线以太网中两站点之间的<font color = '#DC143C'><strong>距离不能太远</strong></font>，否则它们之间所传输的<font color = '#DC143C'><strong>信号就会衰减到使CSMA&#x2F;CD协议无法正常工作</strong></font></li><li>在早期广泛使用粗同轴电缆或细同轴电缆共享总线以太网时，为了提高网络的地理覆盖范围，常用的是<font color = '#DC143C'><strong>工作在物理层的转发器</strong></font></li><li>IEEE 802.3标准规定，两个网段可用一个转发器连接起来，任意两个站点之间最多可以经过三个网段</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042130438.png"></p><ul><li>在10BASE-T星型以太网中，可使用<font color = '#DC143C'><strong>光纤</strong></font>和一对<font color = '#DC143C'><strong>光纤调制解调器</strong></font>来<font color = '#DC143C'><strong>扩展站点与集线器之间的距离</strong></font><ul><li>这种扩展方法比较简单，所需付出的代价是：为站点和集线器各增加一个用于电信号和光信号转换的光纤调制解调器，以及它们之间的一对通信光纤</li></ul></li><li>信号在光纤上的衰减和失真很小，因此使用这种方法可以很简单地将站点与集线器之间的距离扩展到1000m以上</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042135295.png"></p><h4 id="扩展共享式以太网的覆盖范围和站点数量"><a href="#扩展共享式以太网的覆盖范围和站点数量" class="headerlink" title="扩展共享式以太网的覆盖范围和站点数量"></a>扩展共享式以太网的覆盖范围和站点数量</h4><ul><li>以太网集线器一般具有8~32个接口，如果要连接的站点数量超过了单个集线器能够提供的接口数量，就需要使用多个集线器，这样就可以连接成覆盖更大的范围、连接更多站点的多级星型以太网</li><li>采用多个集线器连接而成的多级星型以太网，在扩展了网络覆盖范围和站点数量的同时，也带来了一些负面因素</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042143501.png"></p><h3 id="在数据链路层扩展以太网"><a href="#在数据链路层扩展以太网" class="headerlink" title="在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h3><h4 id="使用网桥"><a href="#使用网桥" class="headerlink" title="使用网桥"></a>使用网桥</h4><ul><li>网桥（bridge）工作在数据链路层（包含其下的物理层），因此<font color = '#DC143C'><strong>网桥具备属于数据链路层范畴的相关能力</strong></font><ul><li>网桥可以<font color = '#DC143C'><strong>识别帧的结构</strong></font></li><li>网桥可以根据帧首部中的<font color = '#DC143C'><strong>目的MAC地址</strong></font>和网桥自身的<font color = '#DC143C'><strong>帧转发表</strong></font>来转发或丢弃所收到的帧</li></ul></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042148048.png"></p><h4 id="网桥的主要结构和基本工作原理"><a href="#网桥的主要结构和基本工作原理" class="headerlink" title="网桥的主要结构和基本工作原理"></a>网桥的主要结构和基本工作原理</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042154336.png"></p><h4 id="透明网桥的自学习和转发帧的流程"><a href="#透明网桥的自学习和转发帧的流程" class="headerlink" title="透明网桥的自学习和转发帧的流程"></a>透明网桥的自学习和转发帧的流程</h4><ul><li><p>透明网桥（Transparent Bridge）通过<font color = '#DC143C'><strong>自学习</strong></font>算法建立转发表</p></li><li><p>透明网桥中的 “<font color = '#DC143C'><strong>透明</strong></font>“，是指以太网中的各站点并不知道自己所发送的帧将会经过哪些网桥的转发，最终到达目的站点。也就是说，<font color = '#DC143C'><strong>以太网中的各网桥对于各站点而言是看不见的</strong></font></p></li><li><p>透明网桥的标准是IEEE 802.1D，它通过一种自学习算法<font color = '#DC143C'><strong>基于以太网中各站点间的相互通信</strong></font>逐步建立起自己的转发表</p><p>1、网桥收到帧后进行<font color = '#DC143C'><strong>登记（即自学习）</strong></font>，登记的内容为帧的<font color = '#DC143C'><strong>源MAC地址</strong></font>和进入网桥的<font color = '#DC143C'><strong>接口号</strong></font></p><p>2、网桥根据帧的目的MAC地址和网桥的转发表对帧进行转发，包含以下三种情况</p><ul><li><font color = '#DC143C'><strong>明确转发</strong></font>：网桥知道应当从哪个接口转发帧</li><li><font color = '#DC143C'><strong>盲目转发</strong></font>：网桥不知道应当从哪个接口转发帧，只能将其通过除进入网桥的接口外的其他所有接口转发</li><li><font color = '#DC143C'><strong>丢弃</strong></font>：网桥知道不应该转发该帧，将其丢弃</li></ul></li></ul><blockquote><p>注意</p></blockquote><ol><li>如果网桥收到有<font color = '#DC143C'><strong>误码的帧</strong></font>则直接<font color = '#DC143C'><strong>丢弃</strong></font></li><li>如果网桥收到一个无误码的<font color = '#DC143C'><strong>广播帧</strong></font>，则不用进行查表，而是直接从除接收该广播帧的接口的<font color = '#DC143C'><strong>其他接口转发</strong></font>该广播帧</li><li>转发表中的每条记录都有其<font color = '#DC143C'><strong>有效时间，到期后自动删除</strong></font>！这是因为各站点的MAC地址与网桥接口的对应关系并不是永久性的，例如某个站点更换了网卡，其MAC地址就会改变</li></ol><h4 id="透明网桥的生成树协议STP"><a href="#透明网桥的生成树协议STP" class="headerlink" title="透明网桥的生成树协议STP"></a>透明网桥的生成树协议STP</h4><ul><li>为了提高以太网的<font color = '#DC143C'><strong>可靠性</strong></font>，有时需要在两个以太网之间使用多个透明网桥来提供<font color = '#DC143C'><strong>冗余链路</strong></font></li><li>在增加冗余链路提高以太网可靠性的同时，却给网络引入了<font color = '#DC143C'><strong>环路</strong></font></li><li>网络中的<font color = '#DC143C'><strong>广播帧将在环路中永久兜圈</strong></font>，造成广播帧充斥整个网络，<font color = '#DC143C'><strong>网络资源被白白浪费</strong></font>，而网络中的主机之间无法正常通信！</li><li>为了避免广播帧在环路中永久兜圈，透明网桥使用<font color = '#DC143C'><strong>生成树协议</strong></font>(Spanning Tree Protocol，STP)，可以在增加冗余链路提高网络可靠性的同时，又避免环路带来的问题<ul><li>不管网桥之间连接成了怎样复杂的带环拓扑，网桥之间通过<font color = '#DC143C'><strong>交互网桥协议单元</strong></font>（Bridge Protocol Data Unit，BPDU），<font color = '#DC143C'><strong>找出原网络拓扑的一个连通子集（即生成树）</strong></font>，在这个子集里整个连通的网络中<font color = '#DC143C'><strong>不存在环路</strong></font></li><li>当首次连接网桥或网络拓扑发生变化时（人为改变或出现故障），网桥都会重新构造生成树，以确保网络的连通</li></ul></li></ul><h3 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h3><ul><li>网桥的<font color = '#DC143C'><strong>接口数量很少</strong></font>，通常只有2~4个，一般只用来<font color = '#DC143C'><strong>连接不同的网段</strong></font></li><li>1990年面世的<font color = '#DC143C'><strong>交换式集线器</strong></font>（Switching Hub），实质上是<font color = '#DC143C'><strong>具有多个接口的网桥</strong></font>，常称为以<font color = '#DC143C'><strong>太网交换机</strong></font>（Switch）或二层交换机<ul><li>“二层” 是指以太网交换机工作在数据链路层（包括物理层）</li><li>与网桥相同，交换机内部的转发表也是通过自学习算法，基于网络中各主机间的通信，自动地逐步建立起来的</li><li>另外，交换机也使用生成树协议STP，来产生能够连通全网但不产生环路的通信路径</li></ul></li><li>仅使用交换机（而不使用集线器）的以太网就是交换式以太网</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042224465.png"></p><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><ul><li><p>以太网<font color = '#DC143C'><strong>交换机</strong></font>（以下简称交换机）本质上就是一个<font color = '#DC143C'><strong>多接口的网桥</strong></font></p><ul><li>交换机自学习和转发帧的流程与网桥是相同的</li><li>另外，交换机也使用生成树协议STP，来产生能够连通全网但不产生环路的通信路径</li></ul></li><li><p>交换机的每个接口可以连接<font color = '#DC143C'><strong>计算机</strong></font>，也可以连接<font color = '#DC143C'><strong>集线器</strong></font>或另一个<font color = '#DC143C'><strong>交换机</strong></font></p><ul><li>当交换机的<font color = '#DC143C'><strong>接口与计算机或交换机连接</strong></font>时，可以工作在<font color = '#DC143C'><strong>全双工方式</strong></font>，并能<font color = '#DC143C'><strong>在自身内部同时连通多对接口</strong></font>，使每一对相互通信的计算机都能像独占传输媒体那样，无碰撞地传输数据，这样就<font color = '#DC143C'><strong>不需要使用CSMA&#x2F;CD协议</strong></font>了</li><li>当交换机的<font color = '#DC143C'><strong>接口连接的是集线器</strong></font>时，该接口就<font color = '#DC143C'><strong>只能使用CSMA&#x2F;CD协议</strong></font>并只能工作在<font color = '#DC143C'><strong>半双工方式</strong></font></li><li>现在的交换机和计算机中的网卡都能自动识别上述两种情况，并自动切换到相应的工作方式</li></ul></li><li><p>交换机一般都具有多种速率的接口，例如10Mb&#x2F;s、100Mb&#x2F;s、1Gb&#x2F;s甚至10Gb&#x2F;s的接口，大部分接口支持多速率自适应</p></li><li><p>一般的交换机都采用 “<font color = '#DC143C'><strong>存储转发</strong></font>“ 方式，为了减小交换机的转发时延，某些交换机采用了<font color = '#DC143C'><strong>直通</strong></font>（Cut-Through）交换方式</p></li><li><p>采用<font color = '#DC143C'><strong>直通交换方式</strong></font>的交换机，在<font color = '#DC143C'><strong>接收帧的同时就立即按帧的目的MAC地址决定该帧的转发接口</strong></font>，然后通过其内部<font color = '#DC143C'><strong>基于硬件的交叉矩阵</strong></font>进行转发，而不必把整个帧先缓存后再进行处理</p><ul><li>直通交换的<font color = '#DC143C'><strong>时延非常小</strong></font></li><li>直通交换<font color = '#DC143C'><strong>不检查差错就直接将帧转发出去</strong></font>，有可能会将一些无效帧转发给其他主机</li></ul></li></ul><h3 id="共享式以太网与交换式以太网的对比"><a href="#共享式以太网与交换式以太网的对比" class="headerlink" title="共享式以太网与交换式以太网的对比"></a>共享式以太网与交换式以太网的对比</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042235348.png"></p><ul><li>交换式以太网的网络性能远高于共享式以太网，集线器早已被交换机取代</li></ul><h3 id="以太网的MAC帧格式"><a href="#以太网的MAC帧格式" class="headerlink" title="以太网的MAC帧格式"></a>以太网的MAC帧格式</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311042238352.png"></p><h3 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h3><h4 id="诞生背景"><a href="#诞生背景" class="headerlink" title="诞生背景"></a>诞生背景</h4><ul><li>将多个站点通过一个或多个<font color = '#DC143C'><strong>以太网交换机</strong></font>连接起来就构建出了<font color = '#DC143C'><strong>交换式以太网</strong></font></li><li>交换式以太网中的所有站点都属于<font color = '#DC143C'><strong>同一个广播域</strong></font></li><li>随着交换式以太网规模的扩大，广播域也相应扩大。<font color = '#DC143C'><strong>巨大的广播域会带来一系列问题</strong></font><ul><li><font color = '#DC143C'><strong>广播风暴</strong></font>广播风暴会浪费网络资源和各主机的CPU资源</li><li>难以管理和维护，带来潜在的安全问题</li></ul></li><li>网络中会频繁出现广播信息<ul><li>TCP&#x2F;IP协议栈中的很多协议都会使用广播（例如地址解析协议ARP，路由信息协议RIPv1，动态主机配置协议DHCP）</li><li>NetBEUI: Windows下使用的广播型协议 </li><li>IPX&#x2F;SPX: Novell网络的协议栈</li><li>Apple Talk: Apple公司的网络协议栈</li></ul></li><li><font color = '#DC143C'><strong>分割广播域</strong></font>的方法<ul><li>使用路由器可以隔离广播域（成本较高）</li><li>虚拟局域网技术应运而生</li></ul></li></ul><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><ul><li>虚拟局域网（Virtual Local Area Network，VLAN）是一种将局域网内的站点划分成<font color = '#DC143C'><strong>与物理位置无关的逻辑组</strong></font>的技术，一个逻辑组就是一个VLAN，VLAN中的各站点具有某些共同的应用需求</li><li>属于同一VLAN的站点之间可以直接进行通信，而不同VLAN中的站点之间不能直接通信</li><li>网络管理员可对局域网中的各交换机进行配置来建立多个逻辑上独立的VLAN<ul><li>连接在同一交换机上的多个站点可以属于不同的VLAN，而属于同一VLAN的多个站点可以连接在不同的交换机上</li></ul></li></ul><blockquote><p>虚拟局域网VALN并不是一种新型网络，它只是局域网能够提供给用户的一种服务</p></blockquote><h4 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h4><ul><li>虚拟局域网VLAN有多种实现技术，最常见的就是<font color = '#DC143C'><strong>基于以太网交换机的接口来实现VLAN</strong></font>。这就需要交换机能够实现以下两个功能<ul><li>能够处理带有VLAN标记的帧，也就是<font color = '#DC143C'><strong>IEEE 802.1Q帧</strong></font></li><li>交换机的各接口可以支持<font color = '#DC143C'><strong>不同的接口类型</strong></font>，不同接口类型的接口对帧的处理方式有所不同</li></ul></li></ul><blockquote><p>IEEE 802.1Q帧</p></blockquote><ul><li>IEEE 802.1Q帧也称为Dot One Q帧，它对以太网V2的MAC帧格式进行了扩展：在源地址字段和类型字段之间插入了<font color = '#DC143C'><strong>4字节的VLAN标签</strong></font>（tag）字段</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311070950535.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311070950617.png"></p><ul><li>802.1Q帧一般不由用户主机处理，而是由以太网交换机来处理<ul><li>当交换机<font color = '#DC143C'><strong>收到普通的以太网MAC帧时</strong></font>，会给其<font color = '#DC143C'><strong>插入4字节的VLAN标签使之成为802.1Q帧</strong></font>，该处理简称为 “<font color = '#DC143C'><strong>打标签</strong></font>“</li><li>当交换机<font color = '#DC143C'><strong>转发802.1Q帧</strong></font>时，<font color = '#DC143C'><strong>可能会删除其4字节的VLAN标签使之成为普通的以太网MAC帧</strong></font>，该处理简称为 “<font color = '#DC143C'><strong>去标签</strong></font>“。交换机转发802.1Q帧时也有可能不进行 “去标签” 处理，是否进行 “去标签” 处理取决于交换机的接口类型</li></ul></li></ul><blockquote><p>以太网交换机的接口类型</p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311070956717.png"></p><h3 id="以太网的发展"><a href="#以太网的发展" class="headerlink" title="以太网的发展"></a>以太网的发展</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311070959617.png"></p><ul><li>都使用<font color = '#DC143C'><strong>IEEE 802.3的帧格式</strong></font></li><li>都遵守<font color = '#DC143C'><strong>IEEE 802.3的最小帧长和最大帧长</strong></font>的规定</li><li>10吉比特以太网（10GE）和40&#x2F;100吉比特以太网（40GE&#x2F;100GE）<font color = '#DC143C'><strong>只工作在全双工方式</strong></font>而不存在争用媒体的问题，因此<font color = '#DC143C'><strong>不需要使用CSMA&#x2F;CD协议</strong></font>，这样传输距离就不再受碰撞检测的限制</li><li>都有<font color = '#DC143C'><strong>多种不同的物理层标准</strong></font>，10吉比特以太网（10GE）和40&#x2F;100吉比特以太网（40GE&#x2F;100GE）还增加了<font color = '#DC143C'><strong>支持城域网和广域网的物理层标准</strong></font></li></ul><h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>随着移动通信技术的发展，<font color = '#DC143C'><strong>无线局域网</strong></font>（Wireless Local Area Network，WLAN）自20世纪80年代末以来逐步进入市场</li><li>IEEE于1997年制定出了无线局域网的协议标准802.11，<font color = '#DC143C'><strong>802.11无线局域网</strong></font>是目前应用最广泛的无线局域网之一，更多地将其简称为<font color = '#DC143C'><strong>Wi-Fi</strong></font>（Wireless Fidelity，无线保真度）</li><li>802.11无线局域网可分为以下两类<ul><li>有固定基础设施的</li><li>无固定基础设施的</li></ul></li><li><font color = '#DC143C'><strong>固定基础设施</strong></font>是指预先建立的、能够覆盖一定地理范围的、<font color = '#DC143C'><strong>多个固定的通信基站</strong></font></li><li>802.11无线局域网使用最多的是它的固定基础设施的组网方式</li></ul><h4 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h4><ul><li>802.11无线局域网的物理层非常复杂，根据<font color = '#DC143C'><strong>工作频段</strong></font>、<font color = '#DC143C'><strong>调制方式</strong></font>、<font color = '#DC143C'><strong>传输速率</strong></font>等，可将其分为多种物理层标准：</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071014671.png"></p><ul><li>802.11无线网卡一般会被做成<font color = '#DC143C'><strong>多模</strong></font>的，以便能适应多种不同的物理层标准，例如支持802.11b&#x2F;g&#x2F;n</li><li>无线局域网最初还使用红外技术（infrared，IR）和跳频扩频（Frequency Hopping Spread Spectrum，FHSS）技术，但目前很少使用了</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071014172.png"></p><h4 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h4><blockquote><p>使用CSMA&#x2F;CA协议的原因</p></blockquote><ul><li>对于802.11无线局域网，其使用无线信道传输数据，这与共享总线以太网使用有线<font color = '#DC143C'><strong>传输介质不同</strong></font>。因此，802.11无线局域网<font color = '#DC143C'><strong>不能简单照搬</strong></font>共享总线以太网使用的<font color = '#DC143C'><strong>CSMA&#x2F;CD协议</strong></font></li><li>802.11无线局域网采用了另一种称为CSMA&#x2F;CA的协议，也就是<font color = '#DC143C'><strong>载波监听多址接入&#x2F;碰撞避免</strong></font>（Carrier Sense Multiple Access&#x2F;Collision Avoidance，CSMA&#x2F;CA）</li><li>CSMA&#x2F;CA协议<font color = '#DC143C'><strong>仍然采用</strong></font>CSMA&#x2F;CD协议中的<font color = '#DC143C'><strong>CSMA</strong></font>，以 “先听后说” 的方式来减少碰撞的发生，但是<font color = '#DC143C'><strong>将 “碰撞检测CD” 改为了 “碰撞避免CA”</strong></font></li></ul><blockquote><p>不采用 “碰撞检测CD” 的原因</p></blockquote><ol><li>由于<font color = '#DC143C'><strong>无线信道的传输环境复杂</strong></font>且信号强度的动态范围非常大，在802.11无线网卡上<font color = '#DC143C'><strong>接收到的信号强度一般都远远小于发送信号的强度</strong></font>，信号强度甚至相差百万倍。因此，<font color = '#DC143C'><strong>如果要在802.11无线网卡上实现碰撞检测</strong></font>，<font color = '#DC143C'><strong>对硬件的要求非常高</strong></font></li><li>即使能够在硬件上实现碰撞检测功能，但由于无线电波传播的特殊性（<font color = '#DC143C'><strong>存在隐蔽站问题</strong></font>），<font color = '#DC143C'><strong>还会出现无法检测到碰撞的情况</strong></font>，因此实现<font color = '#DC143C'><strong>碰撞检测并没有意义</strong></font></li></ol><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071028380.png"></p><blockquote><p>CSMA&#x2F;CA协议的基本工作原理</p></blockquote><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071031861.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071031926.png"></p><h4 id="MAC帧"><a href="#MAC帧" class="headerlink" title="MAC帧"></a>MAC帧</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071328410.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071332642.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071332719.png"></p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><h4 id="分组转发和路由选择"><a href="#分组转发和路由选择" class="headerlink" title="分组转发和路由选择"></a>分组转发和路由选择</h4><ul><li>网络层的主要任务就是<font color = '#DC143C'><strong>将分组从源主机经过多个网络和多段链路传输到目的主机</strong></font>，可以将任务划分为<font color = '#DC143C'><strong>分组转发</strong></font>和<font color = '#DC143C'><strong>路由选择</strong></font>两种重要的功能</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071337269.png"></p><h4 id="网路层向其上层提供的两种服务"><a href="#网路层向其上层提供的两种服务" class="headerlink" title="网路层向其上层提供的两种服务"></a>网路层向其上层提供的两种服务</h4><blockquote><p>面向连接的虚电路服务</p></blockquote><ul><li>核心思想是 “<font color = '#DC143C'><strong>可靠通信应由网络自身来保证</strong></font>“</li><li>必须首先<font color = '#DC143C'><strong>建立网络层连接</strong></font> <font color = '#DC143C'><strong>虚电路</strong></font>（Virtual Circuit，VC），以保证通信双方所需的一切网络资源</li><li>通信双方<font color = '#DC143C'><strong>沿着已建立的虚电路发送分组</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071846737.png"></p><blockquote><p>无连接的数据报服务</p></blockquote><ul><li>核心思想是 “<font color = '#DC143C'><strong>可靠通信应由用户主机来保证</strong></font>“</li><li><font color = '#DC143C'><strong>不需要建立网络层连接</strong></font></li><li><font color = '#DC143C'><strong>每个分组可走不同的路径</strong></font>。因此，每个分组的首部都必须携带目的主机的完整地址</li><li>通信结束后，<font color = '#DC143C'><strong>没有需要释放的连接</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071850257.png"></p><h3 id="网际协议和异构网络互连"><a href="#网际协议和异构网络互连" class="headerlink" title="网际协议和异构网络互连"></a>网际协议和异构网络互连</h3><h4 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h4><ul><li>网际协议（Internet Protocol，IP）是TCP&#x2F;IP体系结构<font color = '#DC143C'><strong>网际层中的核心协议</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071905484.png"></p><h4 id="异构网络互连"><a href="#异构网络互连" class="headerlink" title="异构网络互连"></a>异构网络互连</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071907977.png"></p><ul><li>当IP网上的主机进行通信时，就好像在一个单个网络上通信一样，它们看不见互连的各网络的具体异构细节</li></ul><h3 id="IPv4地址及其编址方法"><a href="#IPv4地址及其编址方法" class="headerlink" title="IPv4地址及其编址方法"></a>IPv4地址及其编址方法</h3><h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><ul><li>IPv4地址是给因特网（Internet）上的<font color = '#DC143C'><strong>每一个主机（或路由器）的每一个接口</strong></font>分配的一个在全世界范围内<font color = '#DC143C'><strong>唯一的32比特的标识符</strong></font></li><li>IPv4地址由<font color = '#DC143C'><strong>因特网名字和数字分配机构</strong></font>（Internet Corporation For Assigned Names And Numbers，ICANN）进行分配</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071913954.png"></p><ul><li><font color = '#DC143C'><strong>IPv4地址的编址方法</strong></font>经历了三个历史阶段</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071914763.png"></p><h4 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h4><ul><li>由于IPv4地址由32比特构成，不方便阅读、记录以及输入等，因此IPv4地址采用<font color = '#DC143C'><strong>点分十进制表示方法</strong></font>以方便用户使用</li></ul><h4 id="分类编址方法"><a href="#分类编址方法" class="headerlink" title="分类编址方法"></a>分类编址方法</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071922767.png"></p><ul><li><font color = '#DC143C'><strong>A类</strong></font>、<font color = '#DC143C'><strong>B类</strong></font>和<font color = '#DC143C'><strong>C类</strong></font>地址都是<font color = '#DC143C'><strong>单播地址</strong></font>，只有单播地址可以<font color = '#DC143C'><strong>分配给网络中的主机（或路由器）的各接口</strong></font></li><li><font color = '#DC143C'><strong>主机号为 “全0”</strong></font> 的地址是<font color = '#DC143C'><strong>网络地址</strong></font>，<font color = '#DC143C'><strong>不能分配</strong></font>给主机（或路由器）的各接口</li><li><font color = '#DC143C'><strong>主机号为 “全1”</strong></font> 的地址是<font color = '#DC143C'><strong>广播地址</strong></font>，<font color = '#DC143C'><strong>不能分配</strong></font>给主机（或路由器）的各接口</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311071925393.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311072211310.png"></p><h4 id="划分子网编址方法"><a href="#划分子网编址方法" class="headerlink" title="划分子网编址方法"></a>划分子网编址方法</h4><ul><li>随着更多的中小网络加入因特网，<font color = '#DC143C'><strong>IPv4分类编址方法不够灵活</strong></font>、<font color = '#DC143C'><strong>容易造成大量IPv4地址资源浪费</strong></font>的缺点就暴露出来了</li><li>为新增网络申请新的网络号存在以下弊端<ul><li>需要等待时间和花费更多的费用</li><li>会增加其他路由器中路由条目的数量</li><li>浪费原有网络号中剩余的大量地址</li></ul></li><li><font color = '#DC143C'><strong>子网掩码</strong></font>可以表明分类IPv4地址的主机号部分被借用了几个比特作为子网号</li><li>与IPv4地址类似，子网掩码也是由<font color = '#DC143C'><strong>32比特</strong></font>构成的<ul><li>用左起多个<font color = '#DC143C'><strong>连续的比特1</strong></font>对应IPv4地址中的<font color = '#DC143C'><strong>网络号和子网号</strong></font></li><li>之后的多个<font color = '#DC143C'><strong>连续的比特0</strong></font>对应IPv4地址中的<font color = '#DC143C'><strong>主机号</strong></font></li></ul></li><li>将划分子网的<font color = '#DC143C'><strong>IPv4地址与相应的子网掩码</strong></font>进行逐比特的<font color = '#DC143C'><strong>逻辑和运算</strong></font>，就可<font color = '#DC143C'><strong>得到</strong></font>该IPv4地址所在<font color = '#DC143C'><strong>子网的网络地址</strong></font></li><li>给定一个分类的IPv4地址和其相应的子网掩码，就可以得出子网划分的细节<ul><li>划分出的子网数量</li><li>每个子网可分配的地址数量</li><li>每个子网的网络地址和广播地址</li><li>每个子网可分配的最小地址和最大地址</li></ul></li><li><font color = '#DC143C'><strong>默认子网掩码</strong></font>是指在<font color = '#DC143C'><strong>未划分子网的情况下使用的子网掩码</strong></font><ul><li>A类：255.0.0.0</li><li>B类：255.255.0.0</li><li>C类：255.255.255.0</li></ul></li></ul><h4 id="无分类编址方法"><a href="#无分类编址方法" class="headerlink" title="无分类编址方法"></a>无分类编址方法</h4><ul><li><p>无分类编址方法使用的<font color = '#DC143C'><strong>地址掩码</strong></font>与划分子网使用的<font color = '#DC143C'><strong>子网掩码</strong></font>类似，由32比特构成</p><ul><li>用左起多个<font color = '#DC143C'><strong>连续的比特1</strong></font>对应IPv4地址中的<font color = '#DC143C'><strong>网络前缀</strong></font></li><li>之后的多个<font color = '#DC143C'><strong>连续的比特0</strong></font>对应IPv4地址中的<font color = '#DC143C'><strong>主机号</strong></font></li></ul></li><li><p>为了简便起见，可以不明确给出配套的地址掩码的点分十进制形式，而是在无分类编址的IPv4地址后面加上斜线 “&#x2F;“，在斜线之后写上网络前缀所占的比特数量（也就是地址掩码中左起连续比特1的数量），这种记法称为<font color = '#DC143C'><strong>斜线记法</strong></font></p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311072231298.png"></p><h3 id="应用规划"><a href="#应用规划" class="headerlink" title="应用规划"></a>应用规划</h3><ul><li>IPv4地址的应用规划是将给定的IPv4地址块（或分类网络）划分成若干个更小的地址块（或子网），并将这些地址块（或子网）分配给互联网中的不同网络，进而可以给给网络中的主机和路由器的接口分配IPv4地址</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311072234032.png"></p><h3 id="IPv4地址与MAC地址"><a href="#IPv4地址与MAC地址" class="headerlink" title="IPv4地址与MAC地址"></a>IPv4地址与MAC地址</h3><h4 id="封装位置"><a href="#封装位置" class="headerlink" title="封装位置"></a>封装位置</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311072317966.png"></p><h4 id="数据包传送过程中的变化情况"><a href="#数据包传送过程中的变化情况" class="headerlink" title="数据包传送过程中的变化情况"></a>数据包传送过程中的变化情况</h4><ul><li>在数据包的传送过程中，数据包的<font color = '#DC143C'><strong>源IP地址和目的IP地址保持不变</strong></font></li><li>在数据包的传送过程中，数据包的<font color = '#DC143C'><strong>源MAC地址和目的MAC地址逐链路（或逐网络）改变</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311072323069.png"></p><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul><li><p>如果仅使用MAC地址进行通信，则会出现以下主要问题</p><ul><li><p>因特网中的每台路由器的<font color = '#DC143C'><strong>路由表</strong></font>中就必须<font color = '#DC143C'><strong>记录</strong></font>因特网上<font color = '#DC143C'><strong>所有主机和路由器各接口的MAC地址</strong></font></p></li><li><p>手工给路由器配置路由器几乎是不可能完成的任务，即使使用路由协议让路由器通过相互交换路由信息来自动构建路由表，也会因为<font color = '#DC143C'><strong>路由信息需要包含海量的MAC地址信息而严重占用通信资源</strong></font></p></li><li><p><font color = '#DC143C'><strong>包含海量MAC地址的路由信息需要路由器具备极大的存储空间</strong></font>，并且会给分组的<font color = '#DC143C'><strong>查表转发带来非常大的时延</strong></font></p></li></ul></li><li><p>因特网的网际层<font color = '#DC143C'><strong>使用IP地址进行寻址</strong></font>，就可使因特网中各<font color = '#DC143C'><strong>路由器</strong></font>的路由表中的路由记录的数量大大减少，因为<font color = '#DC143C'><strong>只需记录部分网络的网络地址</strong></font>，而不是记录每个网络中各通信设备的各接口的MAC地址</p><ul><li>路由器收到IP数据报后，根据其首部中的目的IP地址的网络号部分，基于自己的路由表进行查表转发</li></ul></li></ul><h3 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311131316008.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311131317477.png"></p><ul><li>ARP协议的相关注意事项：<ul><li>由于ARP协议的主要用途是从网际层使用的IP地址解析出在数据链路层使用的MAC地址。因此，将ARP协议划归在<font color = '#DC143C'><strong>网际层</strong></font>，将ARP协议划归在<font color = '#DC143C'><strong>数据链路层</strong></font>。两种都是可以的</li><li>除了ARP请求报文和响应报文，<font color = '#DC143C'><strong>ARP协议还有其他类型的报文</strong></font>，例如用于检查IP地址冲突的 “无故ARP”</li><li>由于ARP协议很在就指定出来，当时并没有考虑网络安全问题。因此，ARP协议没有安全验证机制，存在<font color = '#DC143C'><strong>ARP欺骗和攻击</strong></font>等问题</li></ul></li></ul><h3 id="IP数据报的发送和转发过程"><a href="#IP数据报的发送和转发过程" class="headerlink" title="IP数据报的发送和转发过程"></a>IP数据报的发送和转发过程</h3><ul><li>主机发送IP数据报<ul><li><font color = '#DC143C'><strong>判断目的主机是否与自己在同一个网络</strong></font><ul><li>若在<font color = '#DC143C'><strong>同一个网络</strong></font>，则属于<font color = '#DC143C'><strong>直接交付</strong></font></li><li>若<font color = '#DC143C'><strong>不在同一个网络</strong></font>，则属于<font color = '#DC143C'><strong>间接交付</strong></font>。发送给主机所在网络的<font color = '#DC143C'><strong>默认网关</strong></font>（路由器），由默认网关帮忙转发</li></ul></li></ul></li><li>路由器转发IP数据报<ol><li><font color = '#DC143C'><strong>检查收到的IP数据报是否正确</strong></font>（生存时间是否结束；首部是否误码）<ul><li>若出错，则丢弃该IP数据报并给发送该IP数据报的源主机发送差错报告</li><li>若正确，则进行查表转发</li></ul></li><li><font color = '#DC143C'><strong>基于IP数据报首部中的目的IP地址在路由表中进行查找</strong></font><ul><li>若找到匹配的路由条目，则按该路由条目的指示进行转发</li><li>若找不到匹配的路由条目，则丢弃该IP数据报，并向发送该IP数据报的源主机发送差错报告</li></ul></li></ol></li></ul><h3 id="IPv4数据报的首部格式"><a href="#IPv4数据报的首部格式" class="headerlink" title="IPv4数据报的首部格式"></a>IPv4数据报的首部格式</h3><ul><li>固定部分是指<font color = '#DC143C'><strong>每个IPv4数据报都必须要包含的部分</strong></font></li><li>某些IPv4数据报的首部，除了包含20字节的固定部分，还包含一些可选的字段来<font color = '#DC143C'><strong>增加IPv4数据报的功能</strong></font></li><li>IPv4数据报首部中的各字段或某些字段的组合，用来表达IPv4协议的相关功能</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311131330289.png"></p><h3 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h3><ul><li>静态路由配置是指用户或网络运维人员使用路由器的相关命令给路由器<font color = '#DC143C'><strong>人工配置路由表</strong></font><ul><li>人工配置方式<font color = '#DC143C'><strong>简单、开销小</strong></font>、但<font color = '#DC143C'><strong>不能及时适应网络状态（流量、拓扑等）的变化</strong></font>，一般只在小规模网络中采用</li></ul></li><li>进行静态路由配置需要认真考虑和谨慎操作，否则可能出现以下问题：<ul><li>路由条目<font color = '#DC143C'><strong>配置错误</strong></font>，甚至导致出现<font color = '#DC143C'><strong>路由环路</strong></font></li><li>聚合路由条目可能<font color = '#DC143C'><strong>引入不存在的网络</strong></font></li></ul></li></ul><h3 id="因特网路由选择协议概述"><a href="#因特网路由选择协议概述" class="headerlink" title="因特网路由选择协议概述"></a>因特网路由选择协议概述</h3><h4 id="路由选择分类"><a href="#路由选择分类" class="headerlink" title="路由选择分类"></a>路由选择分类</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311131340543.png"></p><h4 id="采用分层次的路由选择协议"><a href="#采用分层次的路由选择协议" class="headerlink" title="采用分层次的路由选择协议"></a>采用分层次的路由选择协议</h4><ul><li>因特网是全球最大的互联网，它所采取的路由选择协议具有以下三个主要特点：</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311131341431.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311131343767.png"></p><h3 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>路由信息协议（Routing Information Protocol，RIP）是内部网关协议中最先得到广泛使用的协议之一，其相关标准文档为[RFC 1058]</li><li>RIP要求自治系统AS内的每一个路由器，都要维护从它自己到AS内其他每一个网络的距离记录。这是一组距离，称为<font color = '#DC143C'><strong>距离向量</strong></font>（Distance-Vector，D-V）</li><li>RIP使用<font color = '#DC143C'><strong>跳数</strong></font>（Hop Count）作为度量（Metric）来衡量到达目的网络的<font color = '#DC143C'><strong>距离</strong></font><ul><li>RIP将路由器<font color = '#DC143C'><strong>到直连网络</strong></font>的<font color = '#DC143C'><strong>距离定义为1</strong></font></li><li>RIP将路由器<font color = '#DC143C'><strong>到非直连网络</strong></font>的<font color = '#DC143C'><strong>距离定义为所经过的路由器数加1</strong></font></li><li>RIP允许一条路径最多只能包含15个路由器，<font color = '#DC143C'><strong>距离等于16时相当于不可达</strong></font>。因此<font color = '#DC143C'><strong>RIP只适用于小型互联网</strong></font></li></ul></li><li>RIP认为<font color = '#DC143C'><strong>好的路由</strong></font>就是 “距离短” 的路由，也就是所<font color = '#DC143C'><strong>通过路由数量最少的路由</strong></font></li><li>当到达同一目的的网络有多条RIP距离相等的路由时，可以进行<font color = '#DC143C'><strong>等价负载均衡</strong></font>，也就是将通信量均衡地分布到多条等价的路径上</li><li>RIP具有以下三个重要特点：<ul><li>和谁交换信息：仅和<font color = '#DC143C'><strong>相邻路由器</strong></font>交换信息</li><li>交换什么信息：路由器自己的<font color = '#DC143C'><strong>路由表</strong></font>。即本路由器到所在自治系统AS中各网络的最短RIP距离，以及到各网络应经过的下一跳路由器</li><li>何时交换信息：<font color = '#DC143C'><strong>周期性交换</strong></font>（例如，每个约30秒）。为了加快RIP的收敛速度，当网络拓扑发生变化时，路由器要即时向相邻路由器通告拓扑变化后的路由信息，这称为<font color = '#DC143C'><strong>触发更新</strong></font></li></ul></li></ul><h4 id="RIP的基本工作过程"><a href="#RIP的基本工作过程" class="headerlink" title="RIP的基本工作过程"></a>RIP的基本工作过程</h4><ol><li>路由器刚开始工作时，<font color = '#DC143C'><strong>只知道自己到直连网络的RIP距离为1</strong></font></li><li>每个路由器<font color = '#DC143C'><strong>仅和相邻路由器周期性地交换并更新路由信息</strong></font></li><li>若干次交换和更新后，<font color = '#DC143C'><strong>每个路由器都知道到达本自治系统AS内各网络的最短距离和下一跳路由器</strong></font>，称为<font color = '#DC143C'><strong>收敛</strong></font></li></ol><h4 id="RIP的距离向量算法"><a href="#RIP的距离向量算法" class="headerlink" title="RIP的距离向量算法"></a>RIP的距离向量算法</h4><ul><li><p>RIP路由条目更新规则</p><ul><li><font color = '#DC143C'><strong>发现了新网络</strong></font>，添加</li><li>到达目的网络，<font color = '#DC143C'><strong>相同下一跳，最新信息</strong></font>，更新</li><li>到达目的网络，<font color = '#DC143C'><strong>不同下一跳，新路由优势</strong></font>，更新</li><li>到达目的网络，<font color = '#DC143C'><strong>不同下一跳，新路由劣势</strong></font>，不更新</li><li>到达目的网络，<font color = '#DC143C'><strong>不同下一跳</strong></font>，等价负载均衡</li></ul></li><li><p>除了上述RIP路由条目更新规则，在RIP的距离向量算法中还包含以下一些<font color = '#DC143C'><strong>时间参数</strong></font></p><ul><li>路由器每隔<font color = '#DC143C'><strong>大约30秒</strong></font>向其所有相邻路由器发送路由更新报文</li><li>若<font color = '#DC143C'><strong>180秒</strong></font>（默认）没有收到某条路由条目的更新报文，则把该路由条目标记为无效（即把RIP距离设置为16，表示不可达），若再过一段时间（如120秒），还没有收到该路由条目的更新报文，则将该路由条目从路由表中删除</li></ul></li></ul><h4 id="RIP存在的问题"><a href="#RIP存在的问题" class="headerlink" title="RIP存在的问题"></a>RIP存在的问题</h4><ul><li>”坏消息传播得慢“ 的问题又被称为路由环路或<font color = '#DC143C'><strong>RIP距离无穷计数问题</strong></font>。这是距离向量算法的一个固有问题。可以采取以下多种措施<font color = '#DC143C'><strong>减少</strong></font>出现该问题的概率或减小该问题带来的危害<ul><li>限制<font color = '#DC143C'><strong>最大RIP距离为15</strong></font>（16表示不可达）</li><li>当路由表发生变化时就立即发送路由更新报文（即 ”<font color = '#DC143C'><strong>触发更新</strong></font>“ ），而不仅是周期性发送</li><li>让路由器记录到收到某个特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送（即 ”<font color = '#DC143C'><strong>水平分割</strong></font>“ ）</li></ul></li></ul><h4 id="RIP版本和相关报文的封装"><a href="#RIP版本和相关报文的封装" class="headerlink" title="RIP版本和相关报文的封装"></a>RIP版本和相关报文的封装</h4><ul><li>现在较新的RIP版本是1998年11月公布的<font color = '#DC143C'><strong>RIP2</strong></font>[RFC 2453]，已经成为因特网标准协议。与RIP1相比，RIP2可以支持<font color = '#DC143C'><strong>变长子网掩码和CIDR</strong></font>。另外，RIP2还提供<font color = '#DC143C'><strong>简单的鉴别</strong></font>过程并支持<font color = '#DC143C'><strong>多播</strong></font></li><li>RIP相关报文使用运输层的用户数据报协议UDP进行封装，使用的<font color = '#DC143C'><strong>UDP端口号为520</strong></font><ul><li>从<font color = '#DC143C'><strong>RIP报文封装</strong></font>的角度看，RIP属于TCP&#x2F;IP体系结构的<font color = '#DC143C'><strong>应用层</strong></font></li><li>但RIP的核心功能是<font color = '#DC143C'><strong>路由选择</strong></font>，这属于TCP&#x2F;IP体系结构的<font color = '#DC143C'><strong>网际层</strong></font></li></ul></li></ul><h4 id="RIP的优缺点"><a href="#RIP的优缺点" class="headerlink" title="RIP的优缺点"></a>RIP的优缺点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>实现<font color = '#DC143C'><strong>简单</strong></font>，路由器开销小</li><li>如果一个路由器发现了RIP距离更短的路由，那么这种更新信息就传播得很快，即 “<font color = '#DC143C'><strong>好消息传播得块</strong></font>”</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>RIP限制了<font color = '#DC143C'><strong>最大RIP距离为15</strong></font>，这就限制了使用RIP的自治系统AS的规模</li><li>相邻路由器之间交换的路由信息是路由器中的<font color = '#DC143C'><strong>完整路由表</strong></font>，因而随着网络规模的扩大，开销也随之增大</li><li>“<font color = '#DC143C'><strong>坏消息传播得慢</strong></font>”，使更新过程的收敛时间过长。因此，对于规模较大的自治系统AS，应当使用OSPF协议</li></ul><h3 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li><p>开放最短路径优先（Open Shortest Path First，OSPF）协议是为了<font color = '#DC143C'><strong>克服路由信息协议RIP的缺点</strong></font>在1989年开发出来的</p><ul><li>“<font color = '#DC143C'><strong>开放</strong></font>” 表明OSPF协议不是受某一厂商控制，而是<font color = '#DC143C'><strong>公开发表</strong></font>的</li><li>“<font color = '#DC143C'><strong>最短路径优先</strong></font>” 是因为使用了Dijkstra提出的<font color = '#DC143C'><strong>最短路径算法</strong></font>（Shortest Path First，SPF）</li></ul></li><li><p>OSPF是基于<font color = '#DC143C'><strong>链路状态</strong></font>的，而不像RIP是基于距离向量的</p></li><li><p>OSPF基于链路状态并采用最短路径算法计算路由，从算法上保证了<font color = '#DC143C'><strong>不会产生路由环路</strong></font></p></li><li><p>OSPF<font color = '#DC143C'><strong>不限制网络规模，更新效率高，收敛速度快</strong></font></p></li><li><p>链路状态（Link State，LS）是指本路由器都和<font color = '#DC143C'><strong>哪些路由器相邻</strong></font>，以及<font color = '#DC143C'><strong>相应链路的 “代价（cost）”</strong></font></p><ul><li>“<font color = '#DC143C'><strong>代价</strong></font>” 用来表示费用、距离、时延和带宽等，这些都由网络管理人员来决定</li></ul></li><li><p>OSPF相邻路由器之间通过交互<font color = '#DC143C'><strong>问候（Hello）分组</strong></font>来建立和维护<font color = '#DC143C'><strong>邻居关系</strong></font></p><ul><li>问候（Hello）分组封装在<font color = '#DC143C'><strong>IP数据报</strong></font>中，发往<font color = '#DC143C'><strong>组播地址224.0.0.5</strong></font>。IP数据报首部中的<font color = '#DC143C'><strong>协议号</strong></font>字段的取值为89，表明IP数据报的数据载荷为OSPF分组</li><li>问候（Hello）分组的<font color = '#DC143C'><strong>发送周期为10秒</strong></font></li><li>若<font color = '#DC143C'><strong>40秒</strong></font>未收到来自邻居路由器的问候（Hello）分组，则认为邻居路由器不可达</li><li>每个路由器都会建立一张<font color = '#DC143C'><strong>邻居表</strong></font></li></ul></li><li><p>使用OSPF的每个路由器都会产生<font color = '#DC143C'><strong>链路状态通告</strong></font>（Link State Advertisement，LSA）</p></li><li><p>LSA中包含以下两类链路状态信息：</p><ul><li><font color = '#DC143C'><strong>直连网络</strong></font>的链路状态信息</li><li><font color = '#DC143C'><strong>邻居路由器</strong></font>的链路状态信息</li></ul></li><li><p>链路状态通告LSA被封装在<font color = '#DC143C'><strong>链路状态更新</strong></font>（Link State Update，LSU）分组中，采用<font color = '#DC143C'><strong>可靠的洪泛法</strong></font>（Flooding）进行发送</p><ul><li>洪泛法的要点是路由器<font color = '#DC143C'><strong>向自己所有的邻居路由器发送链路状态更新分组</strong></font>，收到该分组的各路由器又将该分组转发给自己所有的邻居路由器（但其上游路由器除外），以此类推</li><li>可靠是指收到链路状态更新分组后要发送确认，<font color = '#DC143C'><strong>收到重复的更新分组无需再次转发</strong></font>，但要发送一次确认</li></ul></li><li><p>使用OSPF的每一个路由器都有一个<font color = '#DC143C'><strong>链路状态数据库</strong></font>（Link State Database，LSDB），用于<font color = '#DC143C'><strong>存储链路状态通告LSA</strong></font></p></li></ul><h4 id="OSPF的五种分组类型"><a href="#OSPF的五种分组类型" class="headerlink" title="OSPF的五种分组类型"></a>OSPF的五种分组类型</h4><p>  <img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311132006353.png"></p><h4 id="OSPF的基本工作过程"><a href="#OSPF的基本工作过程" class="headerlink" title="OSPF的基本工作过程"></a>OSPF的基本工作过程</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311132006696.png"></p><h4 id="多点接入网络中的OSPF路由器"><a href="#多点接入网络中的OSPF路由器" class="headerlink" title="多点接入网络中的OSPF路由器"></a>多点接入网络中的OSPF路由器</h4><ul><li>为了<font color = '#DC143C'><strong>减少洪泛发送问候分组和链路状更新分组的数量</strong></font>，OSPF采用以下措施<ul><li>选举<font color = '#DC143C'><strong>指定路由器</strong></font>（Designated Router，DR）和<font color = '#DC143C'><strong>备用的指定路由器</strong></font>（Backup Designated Router，BDR）</li><li><font color = '#DC143C'><strong>所有非DR&#x2F;BDR只与DR&#x2F;BDR建立邻居关系</strong></font></li><li><font color = '#DC143C'><strong>非DR&#x2F;BDR之间通过DR&#x2F;BDR交换信息</strong></font></li></ul></li></ul><h4 id="OSPF划分区域"><a href="#OSPF划分区域" class="headerlink" title="OSPF划分区域"></a>OSPF划分区域</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311132013918.png"></p><h3 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h3><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>边界网关协议（Border Gateway Protocol，BGP）属于外部网关协议EGP这个类别，用于<font color = '#DC143C'><strong>自制系统AS之间的路由选择协议</strong></font></li><li>由于在不同AS内度量路由的 “代价” （距离、带宽、费用等）可能不同，因此<font color = '#DC143C'><strong>对于AS之间的路由选择</strong></font>，<font color = '#DC143C'><strong>使用统一的 “代价” 作为度量来寻找最佳路由是不行的</strong></font></li><li>AS之间的路由选择还必须考虑相关<font color = '#DC143C'><strong>策略</strong></font>，这些策略包括政治、经济、安全等，它们都是由网络管理人员对每一个路由器进行设置的。但这些策略并不是自治系统之间的路由选择协议本身</li><li><font color = '#DC143C'><strong>BGP只能是力求寻找一条能够到达目的网络且比较好的路由（即不能兜圈子），而非要寻找一条最佳路由</strong></font></li><li>在配置BGP时，每个AS的管理员要选择至少一个路由器作为该AS的 “<font color = '#DC143C'><strong>BGP发言人</strong></font>”</li><li>一般来说，两个BGP发言人都是通过一个共享网络连接在一起的，而BGP发言人往往就是<font color = '#DC143C'><strong>BGP边界路由器</strong></font></li><li>使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的<font color = '#DC143C'><strong>邻站</strong></font>（neighbor）或<font color = '#DC143C'><strong>对等站</strong></font>（peer）</li><li>BGP发言人除了运行BGP协议外，还必须运行自己所在AS所使用的内部网关协议IGP，例如RIP或OSPF</li><li>当BGP发言人相互交换了网络可达性的信息后，各BGP发言人就<font color = '#DC143C'><strong>根据</strong></font>所采用的<font color = '#DC143C'><strong>策略</strong></font>，从收到的路由信息中<font color = '#DC143C'><strong>找出到达各自治系统的较好的路由</strong></font>，也就是构造出树形结构且<font color = '#DC143C'><strong>不存在环路的自治系统连通图</strong></font></li><li>BGP适用于多级结构的因特网</li></ul><h4 id="BGP-4的四种报文"><a href="#BGP-4的四种报文" class="headerlink" title="BGP-4的四种报文"></a>BGP-4的四种报文</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311132025212.png"></p><h3 id="路由器的基本工作原理"><a href="#路由器的基本工作原理" class="headerlink" title="路由器的基本工作原理"></a>路由器的基本工作原理</h3><ul><li><font color = '#DC143C'><strong>路由器</strong></font>是一种具有多个输入端口和输出端口的<font color = '#DC143C'><strong>专用计算机</strong></font>，其任务是<font color = '#DC143C'><strong>转发分组</strong></font></li><li><font color = '#DC143C'><strong>路由选择部分</strong></font>：核心构件是<font color = '#DC143C'><strong>路由选择处理机</strong></font>，其任务是根据所使用的<font color = '#DC143C'><strong>路由选择协议</strong></font>周期性地与其他路由器进行路由信息的交换，以便构建和更新<font color = '#DC143C'><strong>路由表</strong></font></li><li><font color = '#DC143C'><strong>分组转发部分</strong></font>：由<font color = '#DC143C'><strong>一组输入端口</strong></font>、<font color = '#DC143C'><strong>交换结构</strong></font>以及<font color = '#DC143C'><strong>一组输出端口</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311132030817.png"></p><h3 id="国际控制报文协议ICMP"><a href="#国际控制报文协议ICMP" class="headerlink" title="国际控制报文协议ICMP"></a>国际控制报文协议ICMP</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311132032419.png"></p><h3 id="虚拟专用网和网络地址转换"><a href="#虚拟专用网和网络地址转换" class="headerlink" title="虚拟专用网和网络地址转换"></a>虚拟专用网和网络地址转换</h3><h4 id="虚拟专用网"><a href="#虚拟专用网" class="headerlink" title="虚拟专用网"></a>虚拟专用网</h4><ul><li><p><font color = '#DC143C'><strong>虚拟专用网</strong></font>（Virtual Private Network，VPN）：<font color = '#DC143C'><strong>利用公用的因特网</strong></font>作为本机构各专用网之间的通信载体，这样形成的网络又称为虚拟专用网</p></li><li><p>给专用网内各主机配置的IP地址应该是该<font color = '#DC143C'><strong>专用网所在机构可以自行分配的IP地址</strong></font>，这类IP地址仅在机构内部有效，称为<font color = '#DC143C'><strong>专用地址</strong></font>（Private Address），不需要向因特网的管理机构申请</p></li><li><p>VPN要保证传输数据的安全性，会将原始的<font color = '#DC143C'><strong>内部IP数据报进行加密</strong></font>，然后再<font color = '#DC143C'><strong>将其封装成为在因特网上传送的外部IP数据报</strong></font></p></li><li><p>同一机构内不同部门的内部网络所构成的VPN，又称为<font color = '#DC143C'><strong>内联网VPN</strong></font></p></li><li><p>有时，一个机构的虚拟专用网VPN需要某些外部机构（通常是合作伙伴）参加进来，这样的VPN就称为<font color = '#DC143C'><strong>外联网VPN</strong></font></p></li><li><p>在外地工作的员工需要访问公司内部的专用网时，只要在任何地点接入因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，就可以访问专用网中的资源，这种虚拟专用网又称为<font color = '#DC143C'><strong>远程接入VPN</strong></font></p></li></ul><h4 id="网络地址转换"><a href="#网络地址转换" class="headerlink" title="网络地址转换"></a>网络地址转换</h4><ul><li><font color = '#DC143C'><strong>网络地址转换</strong></font>（NetworkAddress Translation，NAT）技术于1994年被提出，用来缓解IPv4地址空间即将耗尽的问题<ul><li>NAT能<font color = '#DC143C'><strong>使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源</strong></font></li><li>这种方法需要在专用网络连接到因特网的路由器上<font color = '#DC143C'><strong>安装NAT软件</strong></font>。装有NAT软件的路由器称为<font color = '#DC143C'><strong>NAT路由器</strong></font>，它至少要有一个有效的外部全球地址IPg。这样，所有使用内部专用地址的主机在和外部因特网通信时，都要在NAT路由器上将其内部专用地址转换成IPG</li><li>如果NAT路由器拥有n（n比较小）个全球IP地址，那么专用网内<font color = '#DC143C'><strong>最多可以同时</strong></font>有n台主机接入因特网。若专用网内的主机数量大于n，则需要轮流使用NAT路由器中数量较少的全球IP地址</li><li>由于目前绝大多数基于TCP&#x2F;IP协议栈的网络应用，都使用运输层传输控制协议TCP或用户数据报协议UDP，为了<font color = '#DC143C'><strong>更加有效地利用NAT路由器中的全球IP地址</strong></font>，现在常<font color = '#DC143C'><strong>将NAT转换和运输层端口号结合使用</strong></font>。这样就可以使内部专用网中使用专用地址的<font color = '#DC143C'><strong>大量主机，共用NAT路由器上的1个全球IP地址</strong></font>，因而可以同时与因特网中的不同主机进行通信</li><li>将NAT和运输层端口号结合使用，称为<font color = '#DC143C'><strong>网络地址与端口号转换</strong></font>（Network Address and Port Translation,NAPT）。现在很多家用路由器将家中各种智能设备(手机、平板、笔记本电脑、台式电脑、物联网设备等)接入因特网，这种路由器实际上就是一个<font color = '#DC143C'><strong>NAPT路由器</strong></font>，但往往并不运行路由选择协议</li><li>尽管NAT（和NAPT）的出现在很大程度上缓解了IPv4地址资源紧张的局面，但<font color = '#DC143C'><strong>NAT（和NAPT）对网络应用并不完全透明</strong></font>，会对某些网络应用产生影响</li><li>NAT（和NAPT）的一个重要特点就是<font color = '#DC143C'><strong>通信必须由专用网内部发起，因此拥有内部专用地址的主机不能直接充当因特网中的服务器</strong></font></li><li>对于目前P2P这类需要外网主机主动与内网主机进行通信的网络应用，在通过NAT时会遇到问题，需要网络应用自身使用一些特殊的<font color = '#DC143C'><strong>NAT穿透技术</strong></font>来解决</li></ul></li></ul><h3 id="IP多播技术"><a href="#IP多播技术" class="headerlink" title="IP多播技术"></a>IP多播技术</h3><h4 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><font color = '#DC143C'><strong>多播</strong></font>（Multicast，也称为组播）是一种实现 “<font color = '#DC143C'><strong>一对多</strong></font>” 通信的技术，与传统单播 “一对一” 通信相比，多播可以<font color = '#DC143C'><strong>极大地节省网络资源</strong></font></li><li>在<font color = '#DC143C'><strong>因特网上进行的多播</strong></font>，称为<font color = '#DC143C'><strong>IP多播</strong></font></li></ul><h4 id="IP多播地址和多播组"><a href="#IP多播地址和多播组" class="headerlink" title="IP多播地址和多播组"></a>IP多播地址和多播组</h4><ul><li>在<font color = '#DC143C'><strong>IPv4</strong></font>中，<font color = '#DC143C'><strong>D类地址</strong></font>被作为<font color = '#DC143C'><strong>多播地址（224.0.0.0~239.255.255.255）</strong></font></li><li><font color = '#DC143C'><strong>多播地址只能用作目的地址</strong></font>，而不能用作源地址</li><li>用每一个D类地址来标识一个多播组，<font color = '#DC143C'><strong>使用同一个IP多播地址接收IP多播数据报的所有主机就构成了一个多播组</strong></font><ul><li><font color = '#DC143C'><strong>每个多播组的成员是可以随时变动的</strong></font>，一台主机可以随时加入或离开多播组</li><li><font color = '#DC143C'><strong>多播组成员的数量和所在的地理位置也不受限制，一台主机可以属于几个多播组</strong></font></li></ul></li><li>非多播组成员也可以向多播组发送IP多播数据报</li><li>与IP数据报相同，IP多播数据报也是 “<font color = '#DC143C'><strong>尽最大努力交付</strong></font>” ，不保证一定能够交付给多播组内的所有成员</li><li>IPv4多播地址又可分为<font color = '#DC143C'><strong>预留的多播地址</strong></font>（永久多播地址）、<font color = '#DC143C'><strong>全球范围可用的多播地址</strong></font>以及本地管理的<font color = '#DC143C'><strong>多播地址</strong></font>[RFC 3330]</li><li>IP多播可以分为以下两种:<ul><li>只在<font color = '#DC143C'><strong>本局域网</strong></font>上进行的<font color = '#DC143C'><strong>硬件多播</strong></font></li><li>在<font color = '#DC143C'><strong>因特网</strong></font>上进行的<font color = '#DC143C'><strong>多播</strong></font></li></ul></li></ul><h3 id="在局域网上进行硬件多播"><a href="#在局域网上进行硬件多播" class="headerlink" title="在局域网上进行硬件多播"></a>在局域网上进行硬件多播</h3><ul><li>由于MAC地址（也称为硬件地址）有多播MAC地址这种类型，因此只要<font color = '#DC143C'><strong>把IPv4多播地址映射成多播MAC地址</strong></font>，即可将IP多播数据报封装在局域网的MAC帧中，而MAC帧首部中的目的MAC地址字段的值，就设置为由IPv4多播地址映射成的多播MAC地址。这样，可以很方便地<font color = '#DC143C'><strong>利用硬件多播来实现局域网内的IP多播</strong></font>。</li><li>当给某个多播组的成员主机配置其所属多播组的IP多播地址时，系统就会根据映射规则从该IP多播地址生成相应的局域网多播MAC地址。</li><li>因特网号码指派管理局IANA，将自己从IEEE注册管理机构申请到的以太网MAC地址块中从<font color = '#DC143C'><strong>01-00-5E-00-00-00到01-00-5E-7F-FF-FF</strong></font>的多播MAC地址，用于映射IPv4多播地址。<ul><li>这些多播MAC地址的<font color = '#DC143C'><strong>左起前25个比特都是相同的</strong></font>，<font color = '#DC143C'><strong>剩余23个比特可以任意变化</strong></font>，因此共有223个。</li></ul></li><li>由于IP多播地址可变化的28比特的前5个比特无法映射到MAC多播地址的低23比特，这会造成<font color = '#DC143C'><strong>IP多播地址与多播MAC地址的映射关系并不是唯一的</strong></font>。</li><li>由于IP多播地址与多播MAC地址的映射关系不是唯一的，因此<font color = '#DC143C'><strong>收到IP多播数据报的主机还要在网际层利用软件进行过滤</strong></font>，把不是主机要接收的IP多播数据报丢弃。</li></ul><h3 id="在因特网上进行IP多播需要的两种协议"><a href="#在因特网上进行IP多播需要的两种协议" class="headerlink" title="在因特网上进行IP多播需要的两种协议"></a>在因特网上进行IP多播需要的两种协议</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012124856.png"></p><h3 id="网际组管理协议IGMP"><a href="#网际组管理协议IGMP" class="headerlink" title="网际组管理协议IGMP"></a>网际组管理协议IGMP</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012128759.png"></p><h3 id="多播路由选择协议"><a href="#多播路由选择协议" class="headerlink" title="多播路由选择协议"></a>多播路由选择协议</h3><ul><li>多播路由选择协议的主要任务是：<font color = '#DC143C'><strong>在多播路由器之间为每个多播组建立一个多播转发树</strong></font><ul><li>多播转发树连接多播源和所拥有该多播组成员的路由器</li></ul></li><li>目前有以下两种方法来构建多播转发树：<ul><li><font color = '#DC143C'><strong>基于源树</strong></font>（Source-Base Tree）多播路由选择</li><li><font color = '#DC143C'><strong>组共享树</strong></font>（Group-Shared Tree）多播路由选择</li></ul></li></ul><h4 id="基于源树多播路由选择"><a href="#基于源树多播路由选择" class="headerlink" title="基于源树多播路由选择"></a>基于源树多播路由选择</h4><ul><li>基于源树的多播路由选择的最典型算法是<font color = '#DC143C'><strong>反向路径多播</strong></font>（Reverse Path Multicasting，RPM）算法</li><li>RPM算法包含以下两个步骤：<ol><li>利用<font color = '#DC143C'><strong>反向路径广播</strong></font>（Reverse Path Broadcasting，RPB）算法建立一个<font color = '#DC143C'><strong>广播转发树</strong></font></li><li>利用<font color = '#DC143C'><strong>剪枝</strong></font>（Pruning）算法，剪除广播转发树中的下游非成员路由器，获得一个<font color = '#DC143C'><strong>多播转发树</strong></font></li></ol></li><li>要建立广播转发树，可以使用<font color = '#DC143C'><strong>洪泛</strong></font>（Flooding）法</li><li>利用<font color = '#DC143C'><strong>反向路径广播RPB算法</strong></font>生成的<font color = '#DC143C'><strong>广播转发树</strong></font>，不会存在环路，因此可以避免广播分组在环路中兜圈。 </li><li>RPB算法的要点是：每一台路由器在收到一个广播分组时，先<font color = '#DC143C'><strong>检查该广播分组是否是从源点经最短路径传送来的</strong></font>。<ul><li>若是，本路由器就从自己除刚才接收该广播分组的接口的所有其他接口转发该广播分组。</li><li>否则，丢弃该广播分组。</li><li>如果本路由器有好几个邻居路由器都处在到源点的最短路径上，也就是<font color = '#DC143C'><strong>存在好几条同样长度的最短路径</strong></font>，那么只能选取一条最短路径。选取的规则是这几条最短路径中的<font color = '#DC143C'><strong>邻居路由器的IP地址最小的那条最短路径</strong></font>。</li></ul></li><li>RPB中 “反向路径” 的意思是：<font color = '#DC143C'><strong>在计算最短路径时把源点当作终点</strong></font>。</li></ul><h4 id="组共享树多播路由选择"><a href="#组共享树多播路由选择" class="headerlink" title="组共享树多播路由选择"></a>组共享树多播路由选择</h4><ul><li>组共享树多播路由选择采用<font color = '#DC143C'><strong>基于核心的分布式生成树算法</strong></font>来建立共享树。<ul><li>该方法在<font color = '#DC143C'><strong>每个多播组</strong></font>中指定一个<font color = '#DC143C'><strong>核心（core）路由器</strong></font>，以该路由器为<font color = '#DC143C'><strong>根</strong></font>，建立一棵<font color = '#DC143C'><strong>连接多播组的所有成员路由器的生成树</strong></font>，作为多播转发树。</li></ul></li><li>每个多播组中除了核心路由器，其他所有成员路由器都会向自己多播组中的核心路由器单播<font color = '#DC143C'><strong>加入报文</strong></font>。<ul><li>加入报文通过单播朝着核心路由器转发，直到它到达已经属于<font color = '#DC143C'><strong>该多播生成树的某个节点</strong></font>或者<font color = '#DC143C'><strong>直接到达该核心路由器</strong></font>。</li><li>加入报文所经过的路径，就确定了一条<font color = '#DC143C'><strong>从单播该报文的边缘节点到核心路由器之间的分支</strong></font>，而这个新分支就被<font color = '#DC143C'><strong>嫁接</strong></font>到现有的<font color = '#DC143C'><strong>多播转发树</strong></font>上。</li></ul></li></ul><h4 id="因特网的多播路由选择协议"><a href="#因特网的多播路由选择协议" class="headerlink" title="因特网的多播路由选择协议"></a>因特网的多播路由选择协议</h4><ul><li><font color = '#DC143C'><strong>目前还没有在整个因特网范围使用的多播路由选择协议</strong></font>。下面是一些建议使用的多播路由选择协议:<ul><li>距离向量多播路由选择协议(Distance Vector Multicast Routing Protocol，DVMRP)[RFC 1075]。</li><li>开放最短路径优先的多播扩展(Multicast Extensions to OSPF，MOSPF) [RFC 1585]。</li><li>协议无关多播-稀疏方式(Protocol Independent Multicast-Sparse Mode，PIM-SM) [RFC 2362]。</li><li>协议无关多播-密集方式(Protocol Independent Multicast-Dense Mode， PIM-DM) [RFC 3973]。</li><li>基于核心的转发树(Core Based Tree，CBT)[RFC 2189，RFC 2201]。</li></ul></li><li>尽管因特网工程任务组IETF努力推动着因特网上的<font color = '#DC143C'><strong>全球多播主干网</strong></font>(Multicast Backbone On the Internet, MBONE)的建设，但至今在因特网上的IP多播还没有得到大规模的应用。<ul><li>主要原因是：<font color = '#DC143C'><strong>改变一个已成功运行且广泛部署的网络层协议是一件极其困难的事情</strong></font>。</li><li>目前IP多播主要应用在一些局部的园区网络、专用网络或者虚拟专用网中。</li></ul></li></ul><h3 id="移动IP技术概述"><a href="#移动IP技术概述" class="headerlink" title="移动IP技术概述"></a>移动IP技术概述</h3><h4 id="移动性对因特网应用的影响"><a href="#移动性对因特网应用的影响" class="headerlink" title="移动性对因特网应用的影响"></a>移动性对因特网应用的影响</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012152888.png"></p><h4 id="相关基本概念"><a href="#相关基本概念" class="headerlink" title="相关基本概念"></a>相关基本概念</h4><ul><li><font color = '#DC143C'><strong>移动IP</strong></font>（Mobile IP）是因特网工程任务组IETF开发的一种技术[RFC 3344]，该技术使得<font color = '#DC143C'><strong>移动主机在各网络之间漫游时，仍然能够保持其原来的IP地址不变</strong></font></li><li>移动IP技术还为因特网中的非移动主机提供了相应机制，使得它们能够将IP数据报正确发送到移动主机</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012156884.png"></p><h4 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012157701.png"></p><h3 id="IPv6引进的主要变化"><a href="#IPv6引进的主要变化" class="headerlink" title="IPv6引进的主要变化"></a>IPv6引进的主要变化</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012200758.png"></p><h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><h4 id="地址空间大小"><a href="#地址空间大小" class="headerlink" title="地址空间大小"></a>地址空间大小</h4><ul><li>在IPv6中，每个地址占<font color = '#DC143C'><strong>128个比特</strong></font><ul><li>如果<font color = '#DC143C'><strong>整个地球表面</strong></font>（包括陆地和水面）都覆盖着需要IPv6地址的通信设备，那么IPv6允许<font color = '#DC143C'><strong>每平方米拥有7 * 10^23个IPv6地址</strong></font></li><li>如果IPv6地址的分配速率是<font color = '#DC143C'><strong>每微秒分配100万个IPv6地址</strong></font>，则需要10^19年的时间才能将所有可能的地址分配完毕</li></ul></li><li>很显然，这样巨大的地址空间在<font color = '#DC143C'><strong>采用合理编址方法</strong></font>的情况下，<font color = '#DC143C'><strong>在可预见的未来是不会用完的</strong></font></li></ul><h4 id="表示方法-1"><a href="#表示方法-1" class="headerlink" title="表示方法"></a>表示方法</h4><ul><li>在IPv6地址的冒号十六进制记法的基础上，再使用 <font color = '#DC143C'><strong>“左侧零” 省略和 “连续零” 压缩</strong></font>，可使IPv6地址的表示更加简洁。<ul><li>“左侧零” 省略是指两个冒号间的十六进制数中最前面的一串0可以省略不写。</li><li>“连续零” 压缩是指一连串连续的0可以用一对冒号取代。</li></ul></li><li><font color = '#DC143C'><strong>在一个IPv6地址中只能使用一次“连续零”压缩</strong></font>，否则会导致歧义。</li><li><font color = '#DC143C'><strong>冒号十六进制记法还可结合点分十进制的后缀</strong></font>。这在IPv4向IPv6过渡阶段非常有用。</li><li>CIDR的斜线表示法在IPv6中仍然可用。</li></ul><h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012219123.png"></p><h3 id="从IPv4向IPv6过渡"><a href="#从IPv4向IPv6过渡" class="headerlink" title="从IPv4向IPv6过渡"></a>从IPv4向IPv6过渡</h3><ul><li>因特网上使用IPv4的路由器的数量太大，要让所有路由器都改用IPv6并不能一蹴而就。因此，<font color = '#DC143C'><strong>从IPv4转变到IPv6只能采用逐步演进的办法</strong></font></li><li>另外，<font color = '#DC143C'><strong>新部署的IPv6系统必须能够向后兼容</strong></font>，也就是IPv6系统必须能够接收和转发IPv4数据报，并且能够为IPv4数据报选择路由</li><li>下面介绍两种由IPv4向IPv6过渡的策略：<ul><li><font color = '#DC143C'><strong>使用双协议栈</strong></font></li><li><font color = '#DC143C'><strong>使用隧道技术</strong></font></li></ul></li></ul><h4 id="使用双协议栈"><a href="#使用双协议栈" class="headerlink" title="使用双协议栈"></a>使用双协议栈</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012225913.png"></p><h4 id="使用隧道技术"><a href="#使用隧道技术" class="headerlink" title="使用隧道技术"></a>使用隧道技术</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012225538.png"></p><h3 id="网际控制报文协议ICMPv6"><a href="#网际控制报文协议ICMPv6" class="headerlink" title="网际控制报文协议ICMPv6"></a>网际控制报文协议ICMPv6</h3><h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><ul><li>由于IPv6与IPv4一样，都<font color = '#DC143C'><strong>不确保数据报的可靠交付</strong></font>，因此IPv6也需要使用网际控制报文协议ICMP来向发送IPv6数据报的源主机<font color = '#DC143C'><strong>反馈一些差错信息</strong></font>，相应的ICMP版本为ICMPv6</li><li>ICMPv6比ICMPv4要复杂的多，它<font color = '#DC143C'><strong>合并了原来的地址解析协议ARP和网际组管理协议IGMP的功能</strong></font>。因此与IPv6配套使用的网际层协议就只有ICMPv6这一个协议</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li><font color = '#DC143C'><strong>ICMPv6报文需要封装成IPv6数据报进行发送</strong></font></li></ul><h4 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h4><ul><li>ICMP报文可被用来报告差错、获取信息、探测邻站或管理多播通信</li><li>在对ICMPv6报文进行分类时，不同的RFC文档使用了不同的策略</li></ul><h3 id="软件定义网络"><a href="#软件定义网络" class="headerlink" title="软件定义网络"></a>软件定义网络</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202312012236511.png"></p><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm</title>
    <link href="/2023/10/20/Algorithm/"/>
    <url>/2023/10/20/Algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>在计算机领域里，算法是一系列程序指令，用于处理特定的运算和逻辑问题。衡量算法优劣的主要标准是时间复杂度和空间复杂度</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数据结构是数据的组织、管理和存储格式，其使用目的是为了高效地访问和修改数据</li><li>数据结构包含数组、链表这样的线性数据结构，也包含数、图这样的复杂数据结构</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>时间复杂度是对一个算法运行时间长短的量度，用大 O 表示，记作 T(n) &#x3D; O(f(n))</li><li>常见的时间复杂度按照从低到高的顺序，包括 O(1)、O(logn)、O(n)、O(logn)、O(n^2) 等</li></ul><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，用大 O 表示，记作 S(n) &#x3D; O(f(n))</li><li>常见的空间复杂度按照从低到高的顺序，包括 O(1)、O(n)、O(n^2) 等。其中递归算法的空间复杂度和递归深度成正比</li></ul><h1 id="数据结构基础"><a href="#数据结构基础" class="headerlink" title="数据结构基础"></a>数据结构基础</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组是由有限个相同类型的变量所组成的有序集合，它的物理存储方式是顺序存储，访问方式是随机访问。利用下标查找数组元素的时间复杂度是 O(1)，中间插入、删除数组元素的时间复杂度是 O(n)</li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><ul><li>链表是一种链式数据结构，由若干节点组成，每个节点包含指向下一个节点的指针。链表的物理存储方式是随机存储，访问方式是顺序访问。查找链表节点的时间复杂度是 O(n)，中间插入、删除节点的时间复杂度是 O(1)</li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>栈是一种线性逻辑结构，可以用数组实现，也可以用链表实现。栈包含入栈和出栈操作，遵循先入后出的原则 (FILO)</li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>队列也是一种线性逻辑结构，可以用数组实现，也可以用链表实现。队列包含入队和出队操作，遵循先入先出的原则 (FIFO)</li></ul><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ul><li>散列表也叫哈希表，是存储 Key-Value 映射的集合。对于某一个 Key，散列表可以在接近 O(1) 的时间内进行读写操作。散列表通过哈希函数实现 Key 和数组下标的转换，通过开放寻址法和链表法来解决哈希冲突</li></ul><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h2><ul><li>树是 n 个节点的有限集，有且仅有一个特定的称为根的节点。当 n &gt; 1时，其余节点可分为 m 个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树</li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>二叉树是树的一种特殊形式，每一个节点最多有两个孩子节点。二叉树包含完全二叉树和满二叉树两种特殊形式</li></ul><h2 id="二叉树的遍历有几种"><a href="#二叉树的遍历有几种" class="headerlink" title="二叉树的遍历有几种"></a>二叉树的遍历有几种</h2><ul><li>根据遍历节点之间的关系，可以分为前序遍历、中序遍历、后序遍历、层序遍历这四种方式；从更宏观的角度划分，可以划分为深度优先遍历和广度优先遍历两大类</li></ul><h2 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h2><ul><li>二叉堆是一种特殊的完全二叉树，分为最大堆和最小堆</li><li>在最大堆中，任何一个父节点的值，都大于或等于它左、右孩子节点的值</li><li>在最小堆中，任何一个父节点的值，都小于或等于它左、右孩子节点的值</li></ul><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><ul><li>优先队列分为最大优先队列和最小优先队列</li><li>在最大优先队列中，无论入队顺序如何，当前最大的元素都会优先出队，这是基于最大堆实现的</li><li>在最小优先队列中，无论入队顺序如何，当前最小的元素都会优先出队，这是基于最小堆实现的</li></ul><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最坏时间复杂度</th><th>空间复杂度</th><th>是否稳定排序</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>鸡尾酒排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>计数排序</td><td>O(n+m)</td><td>O(n+m)</td><td>O(m)</td><td>稳定</td></tr><tr><td>桶排序</td><td>O(n)</td><td>O(nlogn)</td><td>O(n)</td><td>稳定</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2023/10/16/JVM/"/>
    <url>/2023/10/16/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="初识JVM"><a href="#初识JVM" class="headerlink" title="初识JVM"></a>初识JVM</h2><h3 id="什么是JVM？"><a href="#什么是JVM？" class="headerlink" title="什么是JVM？"></a>什么是JVM？</h3><ul><li><font color = '#DC143C'><strong>JVM</strong> </font>本质上是一个运行在计算机上的程序，它的职责是运行<font color = '#DC143C'> <strong>java字节码文件</strong> </font></li></ul><h3 id="JVM的功能"><a href="#JVM的功能" class="headerlink" title="JVM的功能"></a>JVM的功能</h3><ol><li>解耦和运行</li></ol><ul><li>对字节码文件中的指令。实时的解释成机器码，让计算机执行</li></ul><ol start="2"><li>内存管理</li></ol><ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制，回收不再使用的对象</li></ul><ol start="3"><li>即时编译</li></ol><ul><li>对热点代码进行优化，提升执行效率</li></ul><h3 id="即时编译"><a href="#即时编译" class="headerlink" title="即时编译"></a>即时编译</h3><ul><li><p>Java语言如果不做任何优化，性能不如C、C++等语言</p></li><li><p>Java需要实时解释，主要为了支持跨平台特性</p></li><li><p>JVM提供了 <font color = '#DC143C'><strong>即时编译（Just-in-Time 简称JIT）</strong></font> 进行性能的优化，最终能达到接近C、C++语言的运行性能，甚至在特定场景下实现超越</p></li></ul><h3 id="Java虚拟机规范"><a href="#Java虚拟机规范" class="headerlink" title="Java虚拟机规范"></a>Java虚拟机规范</h3><ul><li>《Java虚拟机规范》有Oracle制定，内容主要包含了Java虚拟机在设计和实现时需要遵守的规范，主要包含class字节码文件的定义、类和接口的加载和初始化、指令集等内容</li><li>《Java虚拟机规范》是对虚拟机设计的要求，而不是对Java设计的要求，也就是说虚拟机可以运行在其他的语言比如Groovy、Scala生成的class字节码文件之上</li><li><a href="https://docs.oracle.com/javase/specs/index.html">官网地址</a></li></ul><h3 id="常见的JVM虚拟机有哪些？"><a href="#常见的JVM虚拟机有哪些？" class="headerlink" title="常见的JVM虚拟机有哪些？"></a>常见的JVM虚拟机有哪些？</h3><ul><li>HotSpot、GraalVM、OpenJ9等，另外DragonWell龙井JDK也提供了一款功能增强版的JVM。其中使用最广泛的是Hot5pot虚拟机</li></ul><h2 id="字节码文件详解"><a href="#字节码文件详解" class="headerlink" title="字节码文件详解"></a>字节码文件详解</h2><h3 id="Java虚拟机的组成"><a href="#Java虚拟机的组成" class="headerlink" title="Java虚拟机的组成"></a>Java虚拟机的组成</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310121708080.png"></p><h3 id="字节码文件的组成"><a href="#字节码文件的组成" class="headerlink" title="字节码文件的组成"></a>字节码文件的组成</h3><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><ul><li>常量池中的数据都有一个编号，编号从1开始。在字段或者字节码指令中通过编号可以快速的找到对应的数据</li><li>字节码指令中通过编号引用到常量池的过程称之为<font color = '#DC143C'> <strong>符号引用</strong> </font></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>字节码中的方法区域是存放 <font color = '#DC143C'><strong>字节码指令</strong></font> 的核心位置，字节码指令的内容存放在方法的Code属性中</li><li>操作数栈是临时存放数据的地方，局部变量表是存放方法中的局部变量的位置</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310161404175.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310161404042.png"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>int i &#x3D; 0; i &#x3D; i++; 最终i的值是多少？</p><p>答案是0， 通过分析字节码指令发现，i++先把0取出来放入临时的操作数栈中，接下来对 i 进行加1， i 变成了1，最后再将之前保存的临时值0放入 i，最后 i 就变成了0</p><h3 id="字节码文件常见工具"><a href="#字节码文件常见工具" class="headerlink" title="字节码文件常见工具"></a>字节码文件常见工具</h3><h4 id="javap-v命令"><a href="#javap-v命令" class="headerlink" title="javap -v命令"></a>javap -v命令</h4><ul><li>javap是JDK自带的反编译工具，可以通过控制台查看字节码文件的内容。<font color = '#DC143C'>**适合在服务器上查看字节码文件内容 **</font></li><li>直接输入javap查看所有参数</li><li>输入<font color = '#DC143C'> <strong>javao -v 字节码文件名称</strong> </font>查看具体的字节码信息</li></ul><h4 id="jclasslib插件"><a href="#jclasslib插件" class="headerlink" title="jclasslib插件"></a>jclasslib插件</h4><ul><li>jclasslib也有Idea插件版本，建议开发时使用Idea插件版本，可以在代码编译之后实时看到字节码文件内容</li></ul><h4 id="阿里Arthas"><a href="#阿里Arthas" class="headerlink" title="阿里Arthas"></a>阿里Arthas</h4><ul><li>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修 改应用代码的情况下，对业务问题进行诊断，大大提升线上问题排查效率</li><li><a href="https://arthas.aliyun.com/doc/">官网</a></li><li>dump 类的全限定名：dump 已加载类的字节码文件到特定目录</li><li>jad 类的全限定名：反编译已加载类的源码</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310161955498.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>如何查看字节码文件？</li></ol><ul><li>本地文件可以使用 jclasslib工具查看，开发环境使用 jclasslib 插件</li><li>服务器上文件使用 javap 命令直接查看，也可以通过 arthas 的 dump 命令导出字节码文件再查看本地文件。还可以使用 jad 命令反编译出源代码</li></ul><ol start="2"><li>字节码文件的核心组成有哪些？</li></ol><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162016864.png"></p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162021271.png"></p><h4 id="生命周期概述"><a href="#生命周期概述" class="headerlink" title="生命周期概述"></a>生命周期概述</h4><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162025143.png"></p><h4 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h4><ul><li><p>1、加载（Loading）阶段第一步是 <font color='#DC143C'><strong>类加载器</strong> </font>根据类的权限定名通过不同的渠道以二进制流的方式获取字节码信息。程序员可以使用Java代码拓展的不同的渠道</p></li><li><p>2、类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到方法区中。</p></li><li><p>3、类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到内存的方法区中。<font color='#DC143C'><strong>生成一个InstanceKlass对象，保存类的所有信息，里边还包含实现特定功能比如多态的信息</strong></font></p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162032852.png"></p><ul><li>4、同时，Java虚拟机还会在堆中生成一份与方法区中数据类似的java.lang.Class对象。<font color='#DC143C'><strong>作用是在Java代码中去获取类的信息以及存储静态字段的数据（JDK8及之后）</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162032027.png"></p><ul><li>对于开发者来说，只需要访问堆中的Class对象而不需要访问方法区中所有信息。 <font color='#DC143C'><strong>这样Java虚拟机就能很好地控制开发者访问数据的范围</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162042695.png"></p><ul><li>推荐使用 <font color='#DC143C'>**JDK 自带的 hsdb **</font>工具查看Java虚拟机内存信息。工具位于JDK安装目录下 lib 文件夹中的 sa-jdi.jar 中。 </li><li>启动命令：java -cp sa-jdi.jar sun.jvm.hotspot.HSDB</li></ul><h4 id="连接阶段"><a href="#连接阶段" class="headerlink" title="连接阶段"></a>连接阶段</h4><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><ul><li>连接（Linking）阶段的第一个环节时验证，验证的主要目的时检测 Java 字节码文件是否遵守了《Java虚拟机规范》中的约束。<font color='#DC143C'>**这个阶段一般不需要程序员参与 **</font></li><li>主要包含如下四部分</li></ul><ol><li>文件格式验证，比如文件是否以 0xCAFEBABE 开头，主次版本号是否满足当前 Java 虚拟机版本要求</li><li>元信息验证，例如类必须有父类（super不能为空）</li><li>验证程序执行指令的语义，比如方法内的指令执行到一半强行跳转到其他方法中去</li><li>符号引用验证，例如是否访问了其他类中 private 的方法等</li></ol><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><ul><li>准备阶段为静态变量（static）分配内存并设置初始值</li></ul><table><thead><tr><th>数据类型</th><th>初始值</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>short</td><td>0</td></tr><tr><td>char</td><td>‘\u0000’</td></tr><tr><td>byte</td><td>0</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>引用数据类型</td><td>null</td></tr></tbody></table><ul><li>final 修饰的基本数据类型的静态变量，准备阶段直接会将代码中的值进行赋值</li></ul><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><ul><li>解析阶段主要是将常量池中的符号引用替换为直接引用 </li><li><font color='#DC143C'><strong>符号引用就是在字节码文件中使用编号来访问常量池中的内容</strong></font></li></ul><h4 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h4><blockquote><p>添加-XX:+TraceClassLoading 参数可以打印出加载并初始化的类</p></blockquote><ul><li><p>初始阶段会执行 <font color='#DC143C'><strong>静态代码块中的代码</strong></font>，并为<font color='#DC143C'><strong>静态变量赋值</strong></font></p></li><li><p>初始化阶段会执行字节码文件中 <font color='#DC143C'><strong>clinit</strong></font> 部分的字节码指令</p></li><li><p>以下几种方式会导致类的初始化</p></li></ul><ol><li>访问一个类的静态变量或者静态方法，注意变量是 final 修饰的并且等号右边是常量不会触发初始化</li><li>调用 Class.forName (String className)</li><li>new 一个该类的对象时</li><li>执行 Main 方法的当前类</li></ol><ul><li>clinit 指令在特定情况下不会出现，比如：如下几种情况是不会进行初始化指令执行的</li></ul><ol><li>无静态代码块且无静态变量赋值语句</li><li>有静态变量的声明，但是没有赋值语句</li><li>静态变量的定义使用 final 关键字，这类变量会在准备阶段直接进行初始化</li></ol><ul><li>直接访问父类的静态变量，不会触发子类的初始化</li><li>子类的初始化 clinit 调用之前，会先调用父类的 clinit 初始化方法</li></ul><h5 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h5><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162237525.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162244209.png"></p><p>如果把new B02()去掉会怎么样呢？</p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310162244147.png"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ol><li>加载：根据类的全限定名把字节码文件的内容加载并转换成合适的数据放入内存中，存放在方法区和堆上</li><li>连接-验证：魔数、版本号等验证，一般不需要程序员关注</li><li>连接-准备：为静态变量分配内存并设置初始值</li><li>连接-解析：将常量池中的符号引用（编号）替换为直接引用（内存地址）</li><li>初始化：执行静态代码块和静态变量的赋值</li></ol><p>要点：</p><ol><li>静态变量的定义使用 final 关键字，这类变量会在准备阶段直接进行初始化（除非要执行方法）</li><li>直接访问父类的静态变量，不会触发子类的初始化。子类的初始化 clinit 调用之前，会先调用父类的 clinit 初始化方法</li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul><li>类加载器（ClassLoader）是 Java 虚拟机提供给应用程序去实现获取类和接口字节码数据的技术。 类加载器只参与加载过程中的字节码获取并加载到内存这一部分</li></ul><h4 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h4><ul><li>类加载器分为两类，一类是Java代码中实现的，一类是Java虚拟机底层源码实现的</li><li>类加载器的设计JDK8和8之后的版本差别较大，<font color='#DC143C'><strong>JDK8及之前的版本中默认的类加载器有如下几种</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310172139369.png"></p><ul><li>类加载器的详细信息可以通过classloader命令查看：</li></ul><p>classloader - 查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource</p><h5 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h5><ul><li>启动类加载器（BootstrapClassLoader）是由 Hotspot 虚拟机提供的，使用C++编写的类加载器</li><li>默认加载Java安装目录&#x2F;jre&#x2F;lib下的类文件，比如 rt.jar， tools.jar，resources.jar 等</li></ul><blockquote><p>通过启动类加载器去加载用户 jar 包</p></blockquote><ul><li><p>放入 jre&#x2F;lib 下进行扩展</p><p>不推荐，尽可能不要去更改 JDK 安装目录中的内容，会出现即使放进去由于文件名不匹配的问题也不会正常的被加载</p></li><li><p><font color='#DC143C'><strong>使用参数进行扩展</strong></font></p><p>推荐，使用 -Xbootclasspath&#x2F;a:jar 包目录 &#x2F;jar 包名进行扩展</p></li></ul><h5 id="默认类加载器"><a href="#默认类加载器" class="headerlink" title="默认类加载器"></a>默认类加载器</h5><ul><li>扩展类加载器和应用程序类加载器都是JDK中提供的、使用Java编写的类加载器</li><li><font color='#DC143C'><strong>它们的源码都位于 sun.misc.Launcher 中，是一个静态内部类。继承自 URLClassLoader。具备通过目录或者指定 jar 包将字节码文件加载到内存中</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310172200815.png"></p><h5 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h5><ul><li>扩展类加载器（Extension Class Loader）是JDK中提供的，使用 Java 编写的类加载器</li><li>默认加载Java安装目录&#x2F;jre&#x2F;lib&#x2F;ext下的类文件</li></ul><blockquote><p>通过扩展类加载器去加载用户 jar 包</p></blockquote><ul><li><p>放入 jre&#x2F;lib 下进行扩展</p><p>不推荐，尽可能不要去更改 JDK 安装目录中的内容，会出现即使放进去由于文件名不匹配的问题也不会正常的被加载</p></li><li><p><font color='#DC143C'><strong>使用参数进行扩展</strong></font></p><p>推荐，使用 -Djava.ext.dirs&#x3D;jar 包目录进行扩展,这种方式会覆盖掉原始目录，可以用 ;(windows):(macos&#x2F;linux) 追加上原始目录</p></li><li><p>类加载器的加载路径可以通过 classloader–c hash 值查看</p></li></ul><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><blockquote><p>在Java中如何使用代码的方式去主动加载一个类呢？</p></blockquote><p>方式1：使用Class.forName方法，使用当前类的类加载器去加载指定的类</p><p>方式2：获取到类加载器，通过类加载器的loadClass方法指定某个类加载器加载</p><ul><li><p>每个Java实现的类加载器中保存了一个成员变量叫“父”（Parent）类加载器，可以理解为它的上级， 并不是继承关系</p></li><li><p>应用程序类加载器的parent父类加载器是扩展类加载器，而扩展类加载器的parent是空。</p></li><li><p>启动类加载器使用C++编写，没有上级类加载器</p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310181405826.png"></p><ul><li><p>类加载器的继承关系可以通过 classloader–t 查看</p></li><li><p>在类加载的过程中，每个类加载器都会先检查是否已经加载了该类，如果已经加载则直接返回，否则会将加载请求委派给父类加载器</p></li><li><p><font color='#DC143C'><strong>如果类加载的parent为null，则会提交给启动类加载器处理</strong></font></p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310182038710.png"></p><ul><li>如果所有的父类加载器都无法加载该类，则由当前类加载器自己尝试加载。所以看上去是自顶向下尝试加载</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310182038723.png"></p><ul><li>第二次再去加载相同的类，仍然会向上进行委派，如果某个类加载器加载过就会直接返回</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310182038149.png"></p><p>双亲委派机制指的是：<font color='#DC143C'><strong>自底向上查找是否加载过，再由顶向下进行加载</strong></font></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310182038351.png"></p><ul><li>另一个案例：com.itheima.my.B这个类在当前程序的classpath中，看看是如何加载的</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310182043837.png"></p><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><ol><li>重复的类：如果一个类重复出现在三个类加载器的加载位置，应该由谁来加载？</li></ol><ul><li>启动类加载器加载，根据双亲委派机制，它的优先级是最高的</li></ul><ol start="2"><li>String类能覆盖吗？在自己的项目中去创建一个java.lang.String类，会被加载吗？</li></ol><ul><li>不能，会交由启动类加载器加载在 rt.jar 包中的 String 类</li></ul><ol start="3"><li>类加载器的关系：这几个加载器彼此之间存在关系吗？</li></ol><ul><li>应用类加载器的父类加载器是扩展类加载器，扩展类加载器没有父类加载器，但是会委派给启动类加载器加载</li></ul><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>双亲委派机制有什么用？</p><ol><li>保证类加载的安全性</li></ol><ul><li>通过双亲委派机制，让顶层的类加载器去加载核心类，避免恶意代码替换 JDK 中的核心类库，比如 java.lang.String，确保核心类库的完整性和安全性</li></ul><ol start="2"><li>避免重复加载</li></ol><ul><li>双亲委派机制可以避免同一个类被多次加载，上层的类加载器如果记载过类，就会直接返回该类，避免重复加载</li></ul><h4 id="打破双亲委派机制"><a href="#打破双亲委派机制" class="headerlink" title="打破双亲委派机制"></a>打破双亲委派机制</h4><ul><li>三种方式</li></ul><ol><li>自定义类加载器</li></ol><ul><li>自定义类加载器并且重写 loadClass 方法，就可以将双亲委派机制的代码去除</li><li>Tomcat 通过这种方式实现应用之间类隔离</li></ul><ol start="2"><li>线程上下文类加载器</li></ol><ul><li>利用上下文类加载器类，比如 JDBC 和 JNDI</li></ul><ol start="3"><li>Osgi 框架的类加载器</li></ol><ul><li>历史上 Osgi 框架实现了一套新的类加载器机制，允许同级之间委托进行类的加载</li></ul><h5 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h5><ul><li>一个Tomcat程序中是可以运行多个Web应用的，如果这两个应用中出现了相同限定名的类，比如 Servlet 类，Tomcat 要保证这两个类都能加载并且它们应该是不同的类</li><li>如果不打破双亲委派机制，当应用类加载器加载 Web 应用1中的 MyServlet 之后，Web 应用2中相同限定名的 MyServlet 类就无法被加载了</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310202125245.png"></p><ul><li><p>Tomcat 使用了自定义类加载器来实现应用之间类的隔离。每一个应用会有一个独立的类加载器加载对应的类</p></li><li><p>ClassLoader中包含了4个核心方法，双亲委派机制的核心代码就位于loadClass方法中</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类加载的入口，提供了双亲委派机制。内部会调用findClass</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <br><br><span class="hljs-comment">//由类加载器子类实现,获取二进制数据调用defineClass，比如URLClassLoader会根据文件路径去获取类文件中的二进制数据</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <br>    <br><span class="hljs-comment">//做一些类名的校验，然后调用虚拟机底层的方法将字节码信息加载到虚拟机内存中</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len) <span class="hljs-comment">//</span><br>   <br><span class="hljs-comment">//执行类生命周期中的连接阶段</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolveClass</span><span class="hljs-params">(Class&lt;?&gt; c)</span><br></code></pre></td></tr></table></figure><ul><li>打破双亲委派机制的核心就是将下边这一段代码重新实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//parent等于null说明父类加载器是启动类加载器，直接调用findBootstrapClassOrNull</span><br><span class="hljs-comment">//否则调用父类加载器的加载方法</span><br><span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>    c = parent.loadClass(name, <span class="hljs-literal">false</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    c = findBootstrapClassOrNull(name);<br>&#125;<br><span class="hljs-comment">//父类加载器爱莫能助，我来加载！</span><br><span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) <br>    c = findClass(name);<br></code></pre></td></tr></table></figure><blockquote><p>问题</p></blockquote><ol><li>自定义加载器父类怎么是AppClassLoader呢？</li></ol><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310202152913.png"></p><ul><li>以 Jdk8 为例，ClassLoader 类中提供了构造方法设置 parent 的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">ClassLoader</span><span class="hljs-params">(Void unused, ClassLoader paarent)</span>&#123;<br>    <span class="hljs-built_in">this</span>.parent = parent;<br>    <span class="hljs-keyword">if</span>(ParallelLoaders.isRegistered(<span class="hljs-built_in">this</span>.getClass()))&#123;<br>        parallelLockMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        package2certs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        domains = <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这个构造方法由另外一个构造方法调用，其中父类加载器由 getSystemClassLoader 方法设置，该方法返回的 是 AppClassLoader</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">ClassLoader</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">this</span>(checkCreateClassLoader(), getSystemClassLoader());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>两个自定义类加载器加载相同限定名的类，不会冲突吗？</li></ol><ul><li><font color='#DC143C'><strong>不会冲突</strong></font>，在同一个 Java 虚拟机中，只有<font color='#DC143C'><strong>相同类加载器 + 相同的类限定名</strong></font>才会被认为是同一个类</li><li>在 Arthas 中使用 sc–d 类名的方式查看具体的情况</li></ul><h5 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h5><ul><li><p>JDBC 中使用了 DriverManager 来管理项目中引入的不同数据库的驱动，比如 mysql 驱动、oracle 驱动</p></li><li><p>DriverManager 类位于 rt.jar 包中，由启动类加载器加载</p></li><li><p>依赖中的 mysql 驱动对应的类，由应用程序类加载器来加载</p></li><li><p>DriverManager 属于 rt.jar 是启动类加载器加载的。而用户 jar 包中的驱动需要由应用类加载器加载，这就违反了双亲委派机制</p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310202207518.png"></p><blockquote><p>问题</p></blockquote><ol><li>DriverManager 怎么知道 jar 包中要加载的驱动在哪儿？</li></ol><ul><li>spi 全称为（Service Provider Interface），是 JDK 内置的一种服务提供发现机制</li><li>spi 的工作原理<ol><li>在 ClassPath 路径下的 META-INF&#x2F;services 文件夹中，以接口的全限定名来命名文件名，对应的文件里面写该接口的实现</li><li>使用 ServiceLoader 加载实现类</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取Driver对象</span><br>ServiceLoader&lt;Driver&gt; loaderDrivers = ServiceLoader.Load(Driver.class);<br></code></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><ol><li><p>启动类加载器加载 DriverManager。</p></li><li><p>在初始化 DriverManager 时，通过 SPI 机制加载 jar 包中的 myql 驱动</p></li><li><p>SPI 中利用了线程上下文类加载器（应用程序类加载器）去加载类并创建对象</p></li></ol><ul><li>这种由启动类加载器加载的类，委派应用程序类加载器去加载类的方式，打破了双亲委派机制</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310202234545.png"></p><h5 id="Osgi-框架的类加载器"><a href="#Osgi-框架的类加载器" class="headerlink" title="Osgi 框架的类加载器"></a>Osgi 框架的类加载器</h5><ul><li>历史上，OSGi 模块化框架。它存在同级之间的类加载器的委托加载。 OSGi 还使用类加载器实现了<font color='#DC143C'><strong>热部署</strong></font>的功能</li><li>热部署指的是在服务不停止的情况下，动态地更新字节码文件到内存中</li></ul><h4 id="JDK9之后的类加载器"><a href="#JDK9之后的类加载器" class="headerlink" title="JDK9之后的类加载器"></a>JDK9之后的类加载器</h4><ul><li>JDK8 及之前的版本中，扩展类加载器和应用程序类加载器的源码位于 rt.jar 包中的 sun.misc.Launcher.java</li></ul><p>由于JDK9引入了module的概念，类加载器在设计上发生了很多变化</p><ol><li>启动类加载器使用Java编写，位 jdk.internal.loader.ClassLoaders类中</li></ol><ul><li><p>Java中的 BootClassLoader 继承自 BuiltinClassLoader 实现从模块中找到要加载的字节码资源文件</p></li><li><p><font color='#DC143C'><strong>启动类加载器依然无法通过 java 代码获取到，返回的仍然是 null，保持了统一</strong></font></p></li></ul><ol start="2"><li>扩展类加载器被替换成了平台类加载器（Platform Class Loader）</li></ol><ul><li>平台类加载器遵循模块化方式加载字节码文件，所以继承关系从URLClassLoader 变成了 BuiltinClassLoader，BuiltinClassLoader 实现了从模块中加载字节码文件。<font color='#DC143C'><strong>平台类加载器的存在更多的是为了与老版本的设计方案兼容，自身没有特殊的逻辑</strong></font></li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ol><li>类加载器的作用是什么？</li></ol><ul><li>类加载器（ClassLoader）负责在类加载过程中的字节码获取并加载到内存这一部分。通过加载字节码数据放入内存转换成 byte[]，接下来调用虚拟机底层方法将 byte[] 转换成方法区和堆中的数据</li></ul><ol start="2"><li>有几种类加载器？</li></ol><ul><li>启动类加载器（BootstrapClassLoader）加载核心类</li><li>扩展类加载器（Extension ClassLoader）加载扩展类</li><li>应用程序类加载器（Application ClassLoader）加载应用 classpath 中的类</li><li>自定义类加载器，重写 findClass 方法。</li><li>JDK9 及之后扩展类加载器（Extension ClassLoader）变成了平台类加载器（Platform  ClassLoader）</li></ul><ol start="3"><li>什么是双亲委派机制？</li></ol><ul><li>每个 Java 实现的类加载器中保存了一个成员变量叫“父”（Parent）类加载器。 <font color='#DC143C'><strong>自底向上查找是否加载过，再由顶向下进行加载。避免了核心类被应用程序重写并覆盖的问题，提升了安全性</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310202307859.png"></p><ol start="4"><li>怎么打破双亲委派机制？</li></ol><ul><li>重写 loadClass 方法，不再实现双亲委派机制</li><li>JNDI、JDBC、JCE、JAXB 和 JBI 等框架使用了 SPI 机制 + 线程上下文类加载器</li><li>OSGi 实现了一整套类加载机制，允许同级类加载器之间互相调用</li></ul><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><ul><li>Java 虚拟机在运行 Java 程序过程中管理的内存区域，称之为<font color='#DC143C'><strong>运行时数据区</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310202322731.png"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li>程序计数器（Program Counter Register）也叫 <strong>PC</strong> 寄存器，每个线程会通过程序计数器记录当前要执行的的字节码指令的地址</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081014463.png"></p><ul><li>在加载阶段，虚拟机将字节码文件中的指令读取到内存之后，会将原文件中的偏移量转换成内存地址。每一条字节码指令都会拥有一个内存地址</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081014726.png"></p><ul><li>在代码执行过程中，程序计数器会记录下一行字节码指令的地址。执行完当前指令之后，虚拟机的执行引擎根据程序计数器执行下一行指令</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081015830.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081015699.png"></p><ul><li>程序计数器可以控制程序指令的进行，实现分支、跳转、异常等逻辑</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081015258.png"></p><ul><li>在多线程执行情况下，Java虚拟机需要通过程序计数器记录CPU切换前解释执行到那一句指令并继续解释运行</li></ul><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><blockquote><p>程序计数器在运行中会出现内存溢出吗？</p></blockquote><ul><li><font color='#DC143C'><strong>内存溢出</strong></font>指的是程序在使用某一块内存区域时，存放的数据需要占用的内存大小超过了虚拟机能提供的内存上限</li><li>因为每个线程只存储一个固定长度的内存地址，<font color='#DC143C'><strong>程序计数器是不会发生内存溢出的</strong></font></li><li><font color='#DC143C'><strong>程序员无需对程序计数器做任何处理</strong></font></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li><strong>Java</strong> 虚拟机栈（Java Virtual Machine Stack）采用栈的数据结构来管理方法调用中的基本数据，先进后出（First In Last Out），每一个方法的调用使用一个栈帧（Stack Frame）来保存</li><li>Java虚拟机栈随着线程的创建而创建，而回收则会在线程的销毁时进行。由于方法可能会在不同线 程中执行，每个线程都会包含一个自己的虚拟机栈</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081029185.png"></p><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><ul><li>局部变量表的作用是在方法执行过程中存放所有的局部变量。编译成字节码文件时就可以确定局部变量表的内容</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081032381.png"></p><ul><li>栈帧中的局部变量表是一个数组，数组中每一个位置称之为槽(slot) ， long 和 double 类型占用两个槽，其他类型占用一个槽</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081034505.png"></p><ul><li>实例方法中的序号为 0 的位置存放的是 this，指的是当前调用方法的对象，运行时会在内存中存放实例对象的地址</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081035684.png"></p><ul><li>方法参数也会保存在局部变量表中，其顺序与方法中参数定义的顺序一致</li><li>局部变量表保存的内容有：实例方法的this对象，方法的参数，方法体中声明的局部变量</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081035811.png"></p><ul><li>为了节省空间，局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081039738.png"></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081039859.png"></p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><ul><li>操作数栈是栈帧中虚拟机在执行指令过程中用来存放中间数据的一块区域。它是一种栈式的数据结构，如果一条指令将一个值压入操作数栈，则后面的指令可以弹出并使用该值</li><li>在<font color='#DC143C'><strong>编译期</strong></font>就可以确定操作数栈的最大深度，从而在执行时正确的分配内存大小</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081409233.png"></p><h4 id="帧数据"><a href="#帧数据" class="headerlink" title="帧数据"></a>帧数据</h4><ul><li>当前类的字节码指令引用了其他类的属性或者方法时，需要将符号引用（编号）转换成对应的运行时常量池中的内存地址。动态链接就保存了编号到运行时常量池的内存地址的映射关系</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081414971.png"></p><ul><li>方法出口指的是方法在正确或者异常结束时，当前栈帧会被弹出，同时程序计数器应该指向上一个栈帧中的下一条指令的地址。所以在当前栈帧中，需要存储此方法出口的地址</li><li>异常表存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081413940.png"></p><h4 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h4><ul><li><p>Java 虚拟机栈如果栈帧过多，占用内存超过栈内存可以分配的最大大小就会出现<font color='#DC143C'><strong>内存溢出</strong></font></p></li><li><p>Java 虚拟机栈内存溢出时会出现 StackOverflowError 的错误</p></li><li><p>如果我们不指定栈的大小，JVM 将创建一个 具有<font color='#DC143C'><strong>默认大小的栈</strong></font>。大小取决于操作系统和计算机的体系结构</p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081417737.png"></p><h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><blockquote><p>注意事项</p></blockquote><ol><li><p>与 -Xss类似，也可以使用 -XX:ThreadStackSize 调整标志来配置堆栈大小</p><p>格式为： -XX:ThreadStackSize&#x3D;1024</p></li><li><p><font color='#DC143C'><strong>HotSpot JVM对栈大小的最大值和最小值有要求</strong></font>： </p><p>比如测试如下两个参数: </p><p>-Xss1k </p><p>-Xss1025m </p><p>Windows（64位）下的JDK8测试最小值为180k，最大值为1024m</p></li><li><p>局部变量过多、操作数栈深度过大也会影响栈内存的大小</p></li></ol><blockquote><p>总结</p></blockquote><p>一般情况下，工作中即便使用了递归进行操作，栈的深度最多也只能到几百,不会出现栈的溢出。所以此参数 可以手动指定为 -Xss256k 节省内存</p><h5 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h5><ul><li>Java 虚拟机栈存储了 Java 方法调用时的栈帧，而本地方法栈存储的是 native 本地方法的栈帧</li><li>在 Hotspot 虚拟机中，<font color='#DC143C'><strong>Java 虚拟机栈和本地方法栈实现上使用了同一个栈空间</strong></font>。本地方法栈会在栈内存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>一般 Java 程序中堆内存是空间最大的一块内存区域。创建出来的对象都存在于堆上</li><li>栈上的局部变量表中，可以存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实现对象在线程之间共享</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081433924.png"></p><ul><li>堆空间有三个需要关注的值，used total max</li><li>used 指的是当前已使用的堆内存，total 是 Java 虚拟机已经分配的可用堆内存，max 是 Java 虚拟机可以分配的最大堆内存</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081434647.png"></p><ul><li><p>堆内存 used total max 三个值可以通过 dashboard 命令看到</p></li><li><p>手动指定刷新频率（不指定默认5秒一次）：dashboard –i 刷新频率（毫秒）</p></li><li><p>随着堆中的对象增多，当 total 可以使用的内存即将不足时，Java 虚拟机会继续分配内存给堆</p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081439988.png"></p><ul><li>如果堆内存不足，Java 虚拟机就会不断的分配内存，total 值会变大。 total 最多只能与 max 相等</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311081440957.png"></p><ul><li>如果不设置任何的虚拟机参数，max 默认是系统内存的 1&#x2F;4，total 默认是系统内存的1&#x2F;64。在实际应用中一般都需要设置 total 和 max 的值</li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">Oracle官方文档</a></li><li>Java 服务端程序开发时，<font color='#DC143C'><strong>建议将 -Xmx 和 -Xms 设置为相同的值</strong></font>，这样在程序启动之后可使用的总内存就是最大内存，而无需向 Java 虚拟机再次申请，减少了申请并分配内存时间上的开销，同时也不会出现内存过剩之后堆收缩的情况</li></ul><h4 id="设置大小"><a href="#设置大小" class="headerlink" title="设置大小"></a>设置大小</h4><ul><li>要修改堆的大小，可以使用虚拟机参数 –Xmx（max最大值）和-Xms （初始的total）</li><li>语法：-Xmx 值 -Xms 值 </li><li>单位：字节（默认，必须是 1024 的倍数）、k或者K（KB）、m或者M（MB）、g或者G（GB）</li><li>限制：Xmx 必须大于 2 MB，Xms 必须大于 1MB</li></ul><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><p>为什么arthas中显示的heap堆大小与设置的值不一样呢？</p><ul><li>arthas 中的 heap 堆内存使用了 JMX 技术中内存获取方式，这种方式与垃圾回收器有关，计算的是<font color='#DC143C'><strong>可以分配对象的内存</strong></font>，而不是整个内存</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li>方法区是存放基础信息的位置，线程共享，主要包含三部分内容：<ul><li>类的元信息：保存了所有类的基本信息</li><li>运行时常量池：保存了字节码文件中的常量池内容</li><li>字符串常量池：保存了字符串常量</li></ul></li><li>方法区是用来存储每个类的<font color='#DC143C'><strong>基本信息（元信息）</strong></font>，一般称之为 InstanceClass 对象。在类的<font color='#DC143C'><strong>加载阶段</strong></font>完成</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311082238139.png"></p><ul><li>方法区除了存储类的元信息之外，还存放了运行时常量池。常量池中存放的是字节码中的常量池内容</li><li>字节码文件中通过编号查表的方式找到常量，这种常量池称为<font color='#DC143C'><strong>静态常量池</strong></font>。当常量池加载到内存中之后，可以通过内存地址快速的定位到常量池中的内容，这种常量池称为<font color='#DC143C'><strong>运行时常量池</strong></font></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311082238772.png"></p><ul><li>方法区是《Java虚拟机规范》中设计的虚拟概念，每款 Java 虚拟机在实现上都各不相同。Hotspot 设计如下： <ul><li>JDK7 及之前的版本将方法区存放在堆区域中的永久代空间，堆的大小由虚拟机参数来控制</li><li>JDK8 及之后的版本将方法区存放在元空间中，元空间位于操作系统维护的直接内存中，默认情况下只要不超过操作系统承受的上限，可以一直分配</li></ul></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202311082238731.png"></p><ul><li>JDK7 将方法区存放在<font color='#DC143C'><strong>堆区域中的永久代空间</strong></font>，堆的大小由虚拟机参数<font color='#DC143C'><strong>-XX:MaxPermSize&#x3D;值</strong></font>来控制</li><li>JDK8 将方法区存放在<font color='#DC143C'><strong>元空间</strong></font>中，元空间位于操作系统维护的直接内存中，默认情况下只要不超过操作系统承受的上限，可以一直分配。可以使用<font color='#DC143C'><strong>-XX:MaxMetaspaceSize&#x3D;值</strong></font>将元空间最大大小进行限制</li></ul><h4 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h4><ul><li>方法区中除了类的元信息、运行时常量池之外，还有一块区域叫字符串常量池（StringTable）</li><li>字符串常量池存储在代码中定义的常量字符串内容。比如 “123” 这个123 就会被放入字符串常量池</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2023/10/07/Docker/"/>
    <url>/2023/10/07/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="1-卸载旧版"><a href="#1-卸载旧版" class="headerlink" title="1. 卸载旧版"></a>1. 卸载旧版</h3><p>首先如果系统中已经存在旧的Docker，则先卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></td></tr></table></figure><h3 id="2-配置Docker的yum库"><a href="#2-配置Docker的yum库" class="headerlink" title="2. 配置Docker的yum库"></a>2. 配置Docker的yum库</h3><p>首先需要安装一个yum工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils<br></code></pre></td></tr></table></figure><p>安装成功后执行命令，配置Docker的yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="3-安装Docker"><a href="#3-安装Docker" class="headerlink" title="3. 安装Docker"></a>3. 安装Docker</h3><p>最后，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><h3 id="4-启动和校验"><a href="#4-启动和校验" class="headerlink" title="4. 启动和校验"></a>4. 启动和校验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker<br><br>systemctl stop docker<br><br>systemctl restart docker<br><br><span class="hljs-comment"># 设置开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br><br><span class="hljs-comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><h3 id="5-配置镜像加速"><a href="#5-配置镜像加速" class="headerlink" title="5. 配置镜像加速"></a>5. 配置镜像加速</h3><p>阿里云开通<strong>容器镜像服务</strong></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310042111327.png"></p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  mysql<br></code></pre></td></tr></table></figure><h2 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h2><ul><li><p>使用Docker安装应用时，Docker会自动搜索并下载应用<strong>镜像（image）</strong>。镜像不仅包含应用本身，还包含应用所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为<strong>容器（container）</strong></p></li><li><p><strong>镜像仓库</strong>：存储和管理镜像的平台，Docker官方维护了一个公共仓库<a href="https://hub.docker.com/">Docker Hub</a></p></li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310042132981.png"></p><h2 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读"></a>命令解读</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  mysql<br></code></pre></td></tr></table></figure><p>解读：</p><ul><li><strong>docker run -d</strong> ：创建并运行一个容器，**-d**是让容器在后台运行</li><li><strong>–name mysql</strong> : 给容器起个名字，必须唯一</li><li><strong>-p 3306:3306</strong> : 设置端口映射，宿主机端口映射到容器内端口</li><li><strong>-e KEY&#x3D;VALUE</strong> : 设置环境变量</li><li><strong>mysql</strong> : 指定运行的<strong>镜像名称</strong></li></ul><p>镜像命名规范</p><ul><li>镜像名称一般分两部分组成：[repository]:[tag]<ul><li>其中repository就是镜像名</li><li>tag是镜像的版本</li></ul></li><li>在没有指定tag时，默认时latest，代表最新版本的镜像</li></ul><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><p><a href="https://docs.docker.com/engine/reference/commandline/cli/">Use the Docker command line | Docker Docs</a></p><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310042244040.png"></p><p>其中，比较常见的命令有：</p><table><thead><tr><th align="center"><strong>命令</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="center">docker pull</td><td align="center">拉取镜像</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td align="center">docker push</td><td align="center">推送镜像到DockerRegistry</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td align="center">docker images</td><td align="center">查看本地镜像</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td align="center">docker rmi</td><td align="center">删除本地镜像</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td align="center">docker run</td><td align="center">创建并运行容器（不能重复创建）</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td align="center">docker stop</td><td align="center">停止指定容器</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td align="center">docker start</td><td align="center">启动指定容器</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td align="center">docker restart</td><td align="center">重新启动容器</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td align="center">docker rm</td><td align="center">删除指定容器</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td></tr><tr><td align="center">docker ps</td><td align="center">查看容器</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td align="center">docker logs</td><td align="center">查看容器运行日志</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td align="center">docker exec</td><td align="center">进入容器</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td align="center">docker save</td><td align="center">保存镜像到本地压缩文件</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td align="center">docker load</td><td align="center">加载本地压缩文件到镜像</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td align="center">docker inspect</td><td align="center">查看容器详细信息</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第1步，去DockerHub查看nginx镜像仓库及相关信息</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第2步，拉取Nginx镜像</span><br>docker pull nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第3步，查看镜像</span><br>docker images<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果如下：</span><br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>nginx        latest    605c77e624dd   16 months ago   141MB<br>mysql        latest    3218b38490ce   17 months ago   516MB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第4步，创建并允许Nginx容器</span><br>docker run -d --name nginx -p 80:80 nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第5步，查看运行中容器</span><br>docker ps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可以加格式化方式访问，格式会更加清爽</span><br>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第6步，访问网页，地址：http://虚拟机地址</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第7步，停止容器</span><br>docker stop nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第8步，查看所有容器</span><br>docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第9步，再次启动nginx容器</span><br>docker start nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第10步，再次查看容器</span><br>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第11步，查看容器详细信息</span><br>docker inspect nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第12步，进入容器,查看容器内目录</span><br>docker exec -it nginx bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者，可以进入MySQL</span><br>docker exec -it mysql mysql -uroot -p<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第13步，删除容器</span><br>docker rm nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">发现无法删除，因为容器运行中，强制删除容器</span><br>docker rm -f nginx<br></code></pre></td></tr></table></figure><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改/root/.bashrc文件</span><br>vi /root/.bashrc<br><br>内容如下：<br><span class="hljs-meta prompt_"># </span><span class="language-bash">.bashrc</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="hljs-built_in">functions</span></span><br><br>alias rm=&#x27;rm -i&#x27;<br>alias cp=&#x27;cp -i&#x27;<br>alias mv=&#x27;mv -i&#x27;<br>alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;<br>alias dis=&#x27;docker images&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Source global definitions</span><br>if [ -f /etc/bashrc ]; then<br>        . /etc/bashrc<br>fi<br></code></pre></td></tr></table></figure><p>执行命令使别名生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /root/.bashrc<br></code></pre></td></tr></table></figure><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><ul><li><strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁</li></ul><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310042335589.png"></p><h3 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h3><p>数据卷的相关命令有：</p><table><thead><tr><th align="center"><strong>命令</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="center">docker volume create</td><td align="center">创建数据卷</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td align="center">docker volume ls</td><td align="center">查看所有数据卷</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td></tr><tr><td align="center">docker volume rm</td><td align="center">删除指定数据卷</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td></tr><tr><td align="center">docker volume inspect</td><td align="center">查看某个数据卷的详情</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td></tr><tr><td align="center">docker volume prune</td><td align="center">清除数据卷</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table><ul><li>在执行docker run命令时，使用**-v 数据卷:容器内目录**可以完成数据卷挂载</li><li>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span><br>docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.然后查看数据卷</span><br>docker volume ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果</span><br>DRIVER    VOLUME NAME<br>local     d39e5d42d021dab48d2cbf817ed481940d832915098c5cbcb3aa6d164e73ae2e<br>local     html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.查看数据卷详情</span><br>docker volume inspect html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果</span><br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2023-10-04T16:56:53+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/html/_data&quot;,<br>        &quot;Name&quot;: &quot;html&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.查看/var/lib/docker/volumes/html/_data目录</span><br>ll /var/lib/docker/volumes/html/_data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以看到与nginx的html目录内容一样，结果如下：</span><br>总用量 8<br>-rw-r--r--. 1 root root 497 8月  16 01:03 50x.html<br>-rw-r--r--. 1 root root 615 8月  16 01:03 index.html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5.进入该目录，并随意修改index.html内容</span><br>cd /var/lib/docker/volumes/html/_data<br>vi index.html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6.打开页面，查看效果</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span><br>docker exec -it nginx bash<br></code></pre></td></tr></table></figure><h3 id="本地目录挂载"><a href="#本地目录挂载" class="headerlink" title="本地目录挂载"></a>本地目录挂载</h3><ul><li>在执行docker run命令时，使用 **-v 本地目录 : 容器内目录 **可以完成本地目录挂载</li><li>本地目录必须以 “&#x2F;“ 或 “.&#x2F;“ 开头，如果直接以名称开头，会被识别为数据卷而非本地目录<ul><li>-v mysql : &#x2F;var&#x2F;lib&#x2F;mysql 会被识别为一个数据卷叫mysql</li><li>-v .&#x2F;mysql : &#x2F;var&#x2F;lib&#x2F;mysql 会被识别为当前目录下的mysql目录</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.删除原来的MySQL容器</span><br>docker rm -f mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.进入root目录</span><br>cd ~<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.创建并运行新mysql容器，挂载本地目录</span><br>docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  -v ./mysql/data:/var/lib/mysql \<br>  -v ./mysql/conf:/etc/mysql/conf.d \<br>  -v ./mysql/init:/docker-entrypoint-initdb.d \<br>  mysql<br></code></pre></td></tr></table></figure><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><ul><li>镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程</li></ul><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><p><img src="https://kolin-blog.oss-cn-shanghai.aliyuncs.com/blog/202310071452269.png"></p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><ul><li><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令（Instruction）</strong>，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerdfile来构建镜像</li></ul><table><thead><tr><th align="center"><strong>指令</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>示例</strong></th></tr></thead><tbody><tr><td align="center"><strong>FROM</strong></td><td align="center">指定基础镜像</td><td align="center"><code>FROM centos:6</code></td></tr><tr><td align="center"><strong>ENV</strong></td><td align="center">设置环境变量，可在后面指令使用</td><td align="center"><code>ENV key value</code></td></tr><tr><td align="center"><strong>COPY</strong></td><td align="center">拷贝本地文件到镜像的指定目录</td><td align="center"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td align="center"><strong>RUN</strong></td><td align="center">执行Linux的shell命令，一般是安装过程的命令</td><td align="center"><code>RUN yum install gcc</code></td></tr><tr><td align="center"><strong>EXPOSE</strong></td><td align="center">指定容器运行时监听的端口，是给镜像使用者看的</td><td align="center">EXPOSE 8080</td></tr><tr><td align="center"><strong>ENTRYPOINT</strong></td><td align="center">镜像中应用的启动命令，容器运行时调用</td><td align="center">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p><a href="https://docs.docker.com/engine/reference/builder/">官方文档</a></p><ul><li>可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><span class="hljs-comment"># 配置环境变量，JDK的安装目录、容器内时区</span><br><span class="hljs-keyword">ENV</span> JAVA_DIR=/usr/local<br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span><br><span class="hljs-comment"># 设定时区</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone</span><br><span class="hljs-comment"># 安装JDK</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><span class="hljs-comment"># 指定项目监听的端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment"># 入口，java项目的启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><ul><li>也可以直接基于JDK为基础镜像，省略前面的步骤</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 基础镜像</span><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">11.0</span>-jre-buster<br><span class="hljs-comment"># 设定时区</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone</span><br><span class="hljs-comment"># 拷贝jar包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span><br><span class="hljs-comment"># 入口</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>编写好了Dockerfile，可以利用下面命令来构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 进入镜像目录</span><br><span class="hljs-built_in">cd</span> /root/demo<br><span class="hljs-comment"># 开始构建</span><br>docker build -t docker-demo:1.0 .<br></code></pre></td></tr></table></figure><ul><li><strong>-t</strong>：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</li><li>**.**：是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>镜像的结构是怎样的？</p><ul><li>镜像中包含了应用程序所需要的运行环境、函数库、配置、以及应用本身等各种文件，这些文件分层打包而成</li></ul><p>Dockerfile是做什么的？</p><ul><li>Dockerfile利用固定的指令来描述镜像的结构和构建过程，这样Docker才可以依次来构建镜像</li></ul><p>构建镜像的命令是什么？</p><ul><li>docker build -t 镜像名 Dockerfile目录</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</li><li>加入自定义网络的容器才可以通过容器名互相访问</li></ul><h3 id="网络操作命令"><a href="#网络操作命令" class="headerlink" title="网络操作命令"></a>网络操作命令</h3><p>Docker的网络操作命令：</p><table><thead><tr><th align="center"><strong>命令</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="center">docker network create</td><td align="center">创建一个网络</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td align="center">docker network ls</td><td align="center">查看所有网络</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td align="center">docker network rm</td><td align="center">删除指定网络</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td align="center">docker network prune</td><td align="center">清除未使用的网络</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td align="center">docker network connect</td><td align="center">使指定容器连接加入某网络</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td align="center">docker network disconnect</td><td align="center">使指定容器连接离开某网络</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td align="center">docker network inspect</td><td align="center">查看网络详细信息</td><td align="center"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 1.首先通过命令创建一个网络</span><br>docker network create hanyang<br><br><span class="hljs-comment"># 2.然后查看网络</span><br>docker network <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 结果：</span><br>NETWORK ID     NAME      DRIVER    SCOPE<br>639bc44d0a87   bridge    bridge    <span class="hljs-built_in">local</span><br>403f16ec62a2   hanyang   bridge    <span class="hljs-built_in">local</span><br>0dc0f72a0fbb   host      host      <span class="hljs-built_in">local</span><br>cd8d3e8df47b   none      null      <span class="hljs-built_in">local</span><br><span class="hljs-comment"># 其中，除了hanyang以外，其它都是默认的网络</span><br><br><span class="hljs-comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span><br><span class="hljs-comment"># 这样该网络内的其它容器可以用别名互相访问！</span><br><span class="hljs-comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span><br>docker network connect hanyang mysql --<span class="hljs-built_in">alias</span> db<br><span class="hljs-comment"># 3.2.db容器，也就是我们的java项目</span><br>docker network connect hanyang <span class="hljs-built_in">dd</span><br><br><span class="hljs-comment"># 4.进入dd容器，尝试利用别名访问db</span><br><span class="hljs-comment"># 4.1.进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it <span class="hljs-built_in">dd</span> bash<br><span class="hljs-comment"># 4.2.用db别名访问</span><br>ping db<br><span class="hljs-comment"># 结果</span><br>PING db (172.18.0.2) 56(84) bytes of data.<br>64 bytes from mysql.hanyang (172.18.0.2): icmp_seq=1 ttl=64 time=0.773 ms<br>64 bytes from mysql.hanyang (172.18.0.2): icmp_seq=2 ttl=64 time=0.251 ms<br><span class="hljs-comment"># 4.3.用容器名访问</span><br>ping mysql<br><span class="hljs-comment"># 结果：</span><br>PING mysql (172.18.0.2) 56(84) bytes of data.<br>64 bytes from mysql.hanyang (172.18.0.2): icmp_seq=1 ttl=64 time=7.76 ms<br>64 bytes from mysql.hanyang (172.18.0.2): icmp_seq=2 ttl=64 time=0.271 ms<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash">docker run -d \<br>  --name nginx \<br>  -p 18080:18080 \<br>  -p 18081:18081 \<br>  -v /root/nginx/html:/usr/share/nginx/html \<br>  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \<br>  --network hanyang \<br>  nginx<br></code></pre></td></tr></table></figure><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><ul><li>Docker Compose通过一个单独的 <strong>docker-compose.yml</strong> 模板文件（YAML 格式）来定义一组相关联的应用容器，可以实现<strong>多个相互关联的Docker容器的快速部署</strong></li></ul><p>用 <strong>docker run</strong> 部署MySQL的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash">docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  -v ./mysql/data:/var/lib/mysql \<br>  -v ./mysql/conf:/etc/mysql/conf.d \<br>  -v ./mysql/init:/docker-entrypoint-initdb.d \<br>  --network hanyang<br>  mysql<br></code></pre></td></tr></table></figure><p>用 <strong>docker-compose.yml</strong> 文件来定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">new</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">new:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">hanyang</span><br></code></pre></td></tr></table></figure><p>黑马商城部署文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hm-net</span><br>  <span class="hljs-attr">hmall:</span><br>    <span class="hljs-attr">build:</span> <br>      <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">hmall</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hm-net</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;18080:18080&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;18081:18081&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmall</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hm-net</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">hm-net:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">hmall</span><br></code></pre></td></tr></table></figure><p>对比如下：</p><table><thead><tr><th align="center"><strong>docker run 参数</strong></th><th align="center"><strong>docker compose 指令</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">–name</td><td align="center">container_name</td><td align="center">容器名称</td></tr><tr><td align="center">-p</td><td align="center">ports</td><td align="center">端口映射</td></tr><tr><td align="center">-e</td><td align="center">environment</td><td align="center">环境变量</td></tr><tr><td align="center">-v</td><td align="center">volumes</td><td align="center">数据卷配置</td></tr><tr><td align="center">–network</td><td align="center">networks</td><td align="center">网络</td></tr></tbody></table><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></p><p><strong>docker compose</strong> 的命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose [OPTIONS] [COMMAND]<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">类型</th><th align="center">参数或指令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Options</td><td align="center">-f</td><td align="center">指定compose文件的路径和名称</td></tr><tr><td align="center"></td><td align="center">-p</td><td align="center">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center">up</td><td align="center">创建并启动所有service容器</td></tr><tr><td align="center"></td><td align="center">down</td><td align="center">停止并移除所有容器、网络</td></tr><tr><td align="center"></td><td align="center">ps</td><td align="center">列出所有启动的容器</td></tr><tr><td align="center"></td><td align="center">logs</td><td align="center">查看指定容器的日志</td></tr><tr><td align="center">Commands</td><td align="center">stop</td><td align="center">停止容器</td></tr><tr><td align="center"></td><td align="center">start</td><td align="center">启动容器</td></tr><tr><td align="center"></td><td align="center">restart</td><td align="center">重启容器</td></tr><tr><td align="center"></td><td align="center">top</td><td align="center">查看运行的进程</td></tr><tr><td align="center"></td><td align="center">exec</td><td align="center">在指定的运行中容器中执行命令</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud</title>
    <link href="/2023/07/10/SpringCloud/"/>
    <url>/2023/07/10/SpringCloud/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="服务架构"><a href="#服务架构" class="headerlink" title="服务架构"></a>服务架构</h2><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202305221208281.png"></p><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><ul><li>将业务的所有功能集中在一个项目中开发，打成一个包部署</li></ul><p>优点</p><ul><li>架构简单</li><li>部署成本低</li></ul><p>缺点</p><ul><li>耦合度高</li></ul><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><ul><li>根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务</li></ul><p>优点</p><ul><li>降低服务耦合</li><li>有利于服务升级拓展</li></ul><p>问题</p><ul><li>服务拆分粒度如何</li><li>服务集群地址如何维护</li><li>服务之间如何实现远程调用</li><li>服务健康状态如何感知</li></ul><h2 id="认识微服务"><a href="#认识微服务" class="headerlink" title="认识微服务"></a>认识微服务</h2><ul><li>微服务是一种经过良好架构设计的<strong>分布式</strong>架构方案</li></ul><p>特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务对应唯一的业务能力，做到单一职责，避免重复业务开发</li><li>面向服务：微服务对外暴露接口需求</li><li>自治：团队、技术、数据、部署独立</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><h2 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h2><ol><li>不同微服务，不重复开发相同业务</li><li>微服务数据独立，不访问其他微服务的数据库</li><li>微服务可将自身的业务暴露为接口，供其他微服务调用</li></ol><ul><li>注册RestTemplate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建RestTemplate并注入Spring容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>服务远程调用RestTemplate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        <span class="hljs-comment">// 1.查询订单</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br>        <span class="hljs-comment">// 2. 利用RestTemplate发起http请求，查询用户</span><br>        <span class="hljs-comment">// 2.1 url路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, User.class);<br>        <span class="hljs-comment">// 3. 封装user到Order</span><br>        order.setUser(user);<br>        <span class="hljs-comment">// 4.返回</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="服务调用关系"><a href="#服务调用关系" class="headerlink" title="服务调用关系"></a>服务调用关系</h3><ul><li>服务提供者：暴露接口给其他微服务调用</li><li>服务消费者：调用其他微服务提供的接口</li><li>提供者与消费者角色是<strong>相对</strong>的</li><li>一个服务可以同时是服务提供者和服务消费者</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>消费者如何获取服务提供者具体信息？<ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉取提供者信息</li></ul></li><li>如果有多个服务提供者，消费者如何选择？<ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li>消费者如何感知服务提供者健康状态？<ul><li>服务提供者每隔30s向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>消费者可以拉取到最新的信息</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>EurekaServer：服务端，注册中心<ul><li>记录服务信息</li><li>心跳监控</li></ul></li><li>EurekaClient：客户端<ul><li>Provider：服务提供者<ul><li>注册自己的信息到EurekaServer</li><li>每隔30s向EurekaServer发送心跳</li></ul></li><li>consumer：服务消费者<ul><li>根据服务名称从EurekaServer拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><ol><li>搭建EurekaServer</li></ol><ul><li>创建项目，引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--eureka服务端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编写启动类，添加@EnableEurekaServer注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>添加application.yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span> <span class="hljs-comment">#服务端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span> <span class="hljs-comment">#eureka服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment">#eureka地址信息</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>服务注册</li></ol><ul><li>引入依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--eureka客户端依赖--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li>在application.yml文件，编写配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/cloud_user?useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment">#user服务名称</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">cn.itcast.user.pojo</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">cn.itcast:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-attr">dateformat:</span> <span class="hljs-string">MM-dd</span> <span class="hljs-string">HH:mm:ss:SSS</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment">#eureka地址信息</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><ol start="3"><li>服务发现</li></ol><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li><li>给RestTemplate添加@LodeBalanced注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建RestTemplate并注入Spring容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>用服务提供者的服务名称远程调用</li></ul><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202305221639554.png"></p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>规则接口是IRule</li><li>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询</li></ul><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器，它是Ribbon默认的负载均衡规则</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：（1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加（2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h4 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h4><ul><li>代码方式：配置灵活，但修改时需要重新打包发布</li><li>配置方式：直观、方便，无需重新打包发布，但无法做全局配置</li></ul><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><ul><li>Ribbon默认采用懒加载，即第一次访问时会创建LoadBalanceClient，请求时间会很长</li><li>饥饿加载则会在项目启动时创建，降低第一次访问的耗时</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">ribbon:</span><br><span class="hljs-attr">eager-load:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启饥饿加载</span><br><span class="hljs-attr">clients:</span> <span class="hljs-string">userservice</span> <span class="hljs-comment">#指定对userservice这个服务器饥饿加载</span><br></code></pre></td></tr></table></figure><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p><a href="https://github.com/alibaba/nacos/releases">官网</a></p><ol><li>引入依赖</li></ol><ul><li>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在user-service和order-service中的pom文件中引入nacos-discovery依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置nacos地址</li></ol><ul><li>在user-service和order-service的application.yml中添加nacos地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure><h3 id="服务多级存储模型"><a href="#服务多级存储模型" class="headerlink" title="服务多级存储模型"></a>服务多级存储模型</h3><p>修改user-service的application.yml文件，添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><ul><li>一级是服务，例如userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li></ul><p>设置实例的集群属性</p><ul><li>修改application.yml文件，添加spring.cloud.nacos.discovery.cluster-name属性</li></ul><h3 id="NacosRule负载均衡"><a href="#NacosRule负载均衡" class="headerlink" title="NacosRule负载均衡"></a>NacosRule负载均衡</h3><ul><li>优先选择同集群的服务实例列表</li><li>本地集群找不到提供者，才去其它集群寻找，并且会报警告</li><li>确定了可用实例列表后，再采取负载均衡挑选实例</li></ul><h3 id="服务实例的权重设置"><a href="#服务实例的权重设置" class="headerlink" title="服务实例的权重设置"></a>服务实例的权重设置</h3><ol><li>在Nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮</li><li>将权重设置为0.1，测试可以发现8081被访问到的频率大大降低</li></ol><ul><li>Nacos控制台可以设置实例的权重值，0~1之间</li><li>同集群内的多个实例，权重越高被访问的频率越高</li><li>权重设置为0则完全不会被访问</li></ul><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307112149583.png"></p><ul><li>namespace用来做环境隔离</li><li>每个namespace都有唯一id</li><li>不同namespace下的服务不可见</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span><br>        <span class="hljs-attr">namespace:</span>  <span class="hljs-comment"># 命名空间，填ID</span><br></code></pre></td></tr></table></figure><h2 id="端口被占用问题解决"><a href="#端口被占用问题解决" class="headerlink" title="端口被占用问题解决"></a>端口被占用问题解决</h2><ol><li>键盘输入（win+r），接着在运行对话框中输入“cmd”，进入命令窗口</li><li>输入netstat -ano|findstr “8080”，回车</li><li>接着输入tasklist|findstr”3516”，回车得到占用8080端口的进程</li><li>打开“任务管理器”，定位改进程，然后结束进程，8080端口占用被取消</li><li>或者使用命令关闭：taskkill -PID 3516 -F</li></ol><h2 id="Nacos和Eureka对比"><a href="#Nacos和Eureka对比" class="headerlink" title="Nacos和Eureka对比"></a>Nacos和Eureka对比</h2><ol><li>共同点</li></ol><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul><ol start="2"><li>区别</li></ol><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送方式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul><h2 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h2><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><ol><li>在Nacos中添加配置信息</li><li>在弹出表单中填写配置信息</li></ol><h3 id="配置获取"><a href="#配置获取" class="headerlink" title="配置获取"></a>配置获取</h3><ol><li>在Nacos中添加配置文件</li><li>在微服务中引入Nacos的config依赖</li><li>在微服务中添加bootstrap.yml，配置Nacos地址、当前环境、服务名称、文件后缀名</li></ol><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><ol><li>通过@Value注解注入，结合@RefreshScope来刷新</li><li>通过@ConfigurationProperties注入，自动刷新</li></ol><h3 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h3><p>多种配置的优先级</p><ul><li><p>服务名-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</p><p>  当前环境配置</p><p>​                    nacos中的配置                       本地配置</p></li></ul><p>微服务会从Nacos读取的配置文件</p><ol><li>[服务名]-[spring.profile.active].yaml，环境配置</li><li>[服务名].yaml，默认配置，多环境共享</li></ol><h3 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h3><h4 id="集群结构图"><a href="#集群结构图" class="headerlink" title="集群结构图"></a>集群结构图</h4><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307121741150.png"></p><p>三个nacos节点的地址：</p><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.150.1</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.150.1</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.150.1</td><td>8847</td></tr></tbody></table><h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载nacos安装包</li><li>配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="配置Nacos"><a href="#配置Nacos" class="headerlink" title="配置Nacos"></a>配置Nacos</h4><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf</p><p>添加内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:8845</span><br><span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">8846</span><br><span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">8847</span><br></code></pre></td></tr></table></figure><p>然后修改application.properties文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">123</span><br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p>分别修改三个文件夹中的application.properties</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8845</span><br></code></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8846</span><br></code></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8847</span><br></code></pre></td></tr></table></figure><p>然后分别启动三个nacos节点：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span><br></code></pre></td></tr></table></figure><h4 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h4><p>修改conf&#x2F;nginx.conf文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> nacos-cluster &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8845</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8846</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8847</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br><br>    <span class="hljs-section">location</span> /nacos &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://nacos-cluster;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p><p>代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:80</span> <span class="hljs-comment"># Nacos地址</span><br></code></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul><li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p></li><li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p></li></ul><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="基于Feign远程调用"><a href="#基于Feign远程调用" class="headerlink" title="基于Feign远程调用"></a>基于Feign远程调用</h3><ul><li><p>Fegin是一个声明式的http客户端</p></li><li><p><a href="https://github.com/OpenFeign/feign">官网</a></p></li><li><p>作用是优雅的实现http请求的发送</p></li></ul><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在order-service的启动类添加注解开启Feign的功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>编写Feign客户端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：&#x2F;user&#x2F;{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>Feign运行自定义配置来覆盖默认配置</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>类型</td><td>作用</td><td>说明</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>方式一：配置文件方式</p><ol><li>全局生效</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><ol start="2"><li>局部生效</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><p>方式二：java代码</p><p>声明一个Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfiguration</span>  &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.BASIC; <span class="hljs-comment">// 日志级别为BASIC</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>如果是全局配置，则把它放到@EnableFeignCients注解中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> <br></code></pre></td></tr></table></figure><ol start="2"><li>如果是局部配置，则把它放到@FeignClient注解中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> <br></code></pre></td></tr></table></figure><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>Feign底层客户端实现</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>优化Feign性能主要包括</p><ol><li><p>使用连接池代替默认的URLConnection</p></li><li><p>日志级别，最好用basic或none</p></li></ol><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置连接池</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># default全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span> <span class="hljs-comment"># 日志级别，BASIC就是基本的请求和响应信息</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>方式一（继承）：给消费者的FeignClient和提供者的controller定义统一的父接口作为标准</p><p>方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用</p><p>实现最佳实践方式二的步骤</p><ol><li>首先创建一个module，命名为feign-api，然后引入feign的starter依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>将order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p></li><li><p>在order-service的pom文件中中引入feign-api的依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.itcast.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>修改order-service中所有与上述三个组件有关的import部分，改成导入feign-api中的包</p></li><li><p>重启测试</p></li></ol><h2 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h2><h3 id="网关作用"><a href="#网关作用" class="headerlink" title="网关作用"></a>网关作用</h3><ul><li>身份认证和权限校验</li><li>服务路由、负载均衡</li><li>请求限流</li></ul><p>在SpringCloud中网关的实现包括两种</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateWay则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能</p><h3 id="搭建网关"><a href="#搭建网关" class="headerlink" title="搭建网关"></a>搭建网关</h3><ol><li>创建新的module，引入SpringCloudGateway的依赖和nacos的服务发现依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--网关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>编写路由配置及nacos地址</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <span class="hljs-comment"># 网关端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment"># 网关路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment"># 路由id，自定义，只要唯一即可</span><br>          <span class="hljs-comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <span class="hljs-comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span><br></code></pre></td></tr></table></figure><p><strong>路由配置</strong></p><ol><li>路由id：路由唯一的标示</li><li>路由目标（url）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</li><li>路由断言（predicates）：判断路由的规则</li><li>路由过滤器（filters）：对请求或响应做处理</li></ol><h3 id="路由断言工厂"><a href="#路由断言工厂" class="headerlink" title="路由断言工厂"></a>路由断言工厂</h3><ul><li><p>在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p></li><li><p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的</p></li><li><p>像这样的断言工厂在SpringCloudGateway还有十几个</p></li></ul><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><ul><li><p>PredicateFactory的作用是什么？</p><p>读取用户定义的断言条件，对请求做出判断</p></li><li><p>Path&#x3D;&#x2F;user&#x2F;**是什么含义？</p><p>路径是以&#x2F;user开头的就以为是符合的</p></li></ul><h3 id="路由的过滤器配置"><a href="#路由的过滤器配置" class="headerlink" title="路由的过滤器配置"></a>路由的过滤器配置</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理</p><p>Spring提供了31种不同的路由过滤器工厂</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><p>在gateway中修改application.yml文件，给userservice的路由添加过滤器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>        <span class="hljs-attr">predicates:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <br>        <span class="hljs-attr">filters:</span> <span class="hljs-comment"># 过滤器</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <span class="hljs-comment"># 添加请求头</span><br></code></pre></td></tr></table></figure><ul><li>过滤器的作用？</li></ul><ol><li>对路由的请求或响应做加工处理，比如添加请求头</li><li>配置在路由下的过滤器只对当前路由的请求生效</li></ol><ul><li>defaultFilters的作用？</li></ul><ol><li>对所有路由都生效的过滤器</li></ol><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewanFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>实现GlobalFilter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  处理当前请求，有必要的话通过&#123;<span class="hljs-doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span><br><span class="hljs-comment">     */</span><br>    Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器链执行顺序"><a href="#过滤器链执行顺序" class="headerlink" title="过滤器链执行顺序"></a>过滤器链执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器</p><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307132241239.png"></p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong></li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行</li></ul><p>路由过滤器、DefaultFilter、GlobalFilter的执行顺序？</p><ol><li>order值越小，优先级越高</li><li>当order值一样时，顺序是DefaultFilter最先，然后是局部路由过滤器，最后是GlobalFilter</li></ol><h3 id="网关的cors跨域配置"><a href="#网关的cors跨域配置" class="headerlink" title="网关的cors跨域配置"></a>网关的cors跨域配置</h3><p>跨域：域名不一致就是跨域</p><ul><li>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</li><li>域名相同，端口不同：localhost:8080和localhost8081</li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术</p><ol><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成、方便快捷</li></ol><h3 id="Docker与虚拟机"><a href="#Docker与虚拟机" class="headerlink" title="Docker与虚拟机"></a>Docker与虚拟机</h3><p>虚拟机（virtual machine）是在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在Windows系统里面运行Ubuntu系统，这样就可以运行任意的Ubuntu应用了</p><table><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>性能</td><td>接近原生</td><td>性能较差</td></tr><tr><td>硬盘占用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table><p>Docker与虚拟机的差异</p><ul><li>Docker是一个系统进程；虚拟机时在操作系统中的操作系统</li><li>Docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><h4 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h4><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见</p><h4 id="Docker和DockerHub"><a href="#Docker和DockerHub" class="headerlink" title="Docker和DockerHub"></a>Docker和DockerHub</h4><ul><li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等</p></li><li><p><a href="https://hub.docker.com/">DockerHub</a></p></li></ul><h3 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>Docker是一个CS架构的程序，由两部分组成</p><ul><li>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令</li></ul><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li>镜像名称一般分两部分组成：[repository]:[tag]</li><li>没有指定时，默认时latest，代表最新版本的镜像</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307141548502.png"></p><p>镜像操作有哪些？</p><ul><li>docker images</li><li>docker rmi</li><li>docker pull</li><li>docker push</li><li>docker save</li><li>docker load</li></ul><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307141608394.png"></p><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name containerName -p 80:80 -d nginx<br></code></pre></td></tr></table></figure><ul><li>docker run：创建并运行一个容器</li><li>–name：给容器起一个名字，比如mn</li><li>-p：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p>docker run命令的常见参数有哪些？</p><ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志命令</p><ul><li>docker logs</li><li>添加-f参数可以持续查看日志</li></ul><p>查看容器状态</p><ul><li>docker ps</li></ul><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mn bash<br></code></pre></td></tr></table></figure><ul><li>docker exec：进入容器内部，执行一个命令</li><li>-it：给当前进入的容器创建一个标准输入、输出终端，允许与容器交互</li><li>mn：要进入的容器的名称</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><p>进入nginx的HTML所在目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/share/nginx/html<br></code></pre></td></tr></table></figure><p>修改index.html的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s#Welcome to nginx#汉阳大学欢迎您#g&#x27; index.html<br>sed -i &#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27; index.html<br></code></pre></td></tr></table></figure><p>查看容器状态</p><ul><li>docker ps</li><li>添加-a参数查看所有状态的容器</li></ul><p>删除容器</p><ul><li>docker rm</li><li>不能删除运行中的容器，除非添加-f参数</li></ul><p>进入容器</p><ul><li>docker exec -it [容器名] [要执行的命令]</li><li>exec命令可以进入容器修改文件，但在容器内修改文件是不推荐的</li></ul><h3 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h3><p>数据卷（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume [COMMADN]<br></code></pre></td></tr></table></figure><ul><li>create：创建一个volume</li><li>inspect：显示一个或多个volume信息</li><li>ls：列出所有的volume</li><li>prune：删除未使用的volume</li><li>rm：删除一个或多个指定对volume</li></ul><h4 id="挂载案例一"><a href="#挂载案例一" class="headerlink" title="挂载案例一"></a>挂载案例一</h4><ol><li>创建容器并挂载数据卷到容器内的HTML目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mn -v html:/root/html -p 80:80 -的nginx<br></code></pre></td></tr></table></figure><ol start="2"><li>进入html数据卷所在位置，并修改HTML内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看html数据卷的位置</span><br>docker volume inspect html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入该目录</span><br>cd /var/lib/docker/volumes/html/ data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改文件</span><br>vi index.html<br></code></pre></td></tr></table></figure><p>数据卷挂载方式</p><ul><li>-v volumeName: &#x2F;targetContainerPath</li><li>如果容器运行时volume不存在，会自动被创建出来</li></ul><h4 id="挂载案例二"><a href="#挂载案例二" class="headerlink" title="挂载案例二"></a>挂载案例二</h4><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上</p><ul><li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307142333572.png"></p><p>docker run的命令中通过 -v 参数挂载文件或目录到容器</p><ul><li>-v volume名称：容器内目录</li><li>-v 宿主机文件：容器内文件</li><li>-v 宿主机目录：容器内目录</li></ul><h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><h4 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h4><ul><li>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307151529461.png"></p><p>镜像是分层结构，每一层称为一个Layer</p><ul><li>BaseImage层：包含基本的系统函数库、环境变量、文件系统</li><li>Entrypoint：入口，是镜像中应用启动的命令</li><li>其它：在BaseImage基础上添加依赖、安装程序、完成整个应用的安装和配置</li></ul><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer</p><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY .&#x2F;mysql-5.7.rpm &#x2F;tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN yum install gcc</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，给镜像使用者看</td><td>EXPOSE 8080</td></tr><tr><td>ENTERPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><ol><li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以是基本操作系统，如Ubuntu。也可以是制作好的镜像，如java:8-alpine</li></ol><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><h4 id="初识Compose"><a href="#初识Compose" class="headerlink" title="初识Compose"></a>初识Compose</h4><ul><li>DockerCompose可以基于Compose文件快速的部署分布式应用，无需手动一个个创建和运行容器</li><li>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.8&quot;</span><br> services<span class="hljs-punctuation">:</span><br>  mysql<span class="hljs-punctuation">:</span><br>    image<span class="hljs-punctuation">:</span> mysql<span class="hljs-punctuation">:</span><span class="hljs-number">5.7</span><span class="hljs-number">.25</span><br>    environment<span class="hljs-punctuation">:</span><br>     MYSQL_ROOT_PASSWORD<span class="hljs-punctuation">:</span> <span class="hljs-number">123</span> <br>    volumes<span class="hljs-punctuation">:</span><br>     - <span class="hljs-string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span><br>     - <span class="hljs-string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span><br>  web<span class="hljs-punctuation">:</span><br>    build<span class="hljs-punctuation">:</span> .<br>    ports<span class="hljs-punctuation">:</span><br>     - <span class="hljs-string">&quot;8090:8090&quot;</span><br></code></pre></td></tr></table></figure><p>DockerCompose作用</p><ul><li>快速部署分布式应用，无需一个个微服务构建镜像和部署</li></ul><h3 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h3><p>镜像仓库（Docker Registry）有公共的和私有的两种形式</p><ul><li>公共仓库：例如Docker官方的Docker Hub</li><li>用户可以在本地搭建私有Docker Registry。企业镜像最好是采用私有Docker Registry实现</li></ul><h4 id="简化版镜像仓库"><a href="#简化版镜像仓库" class="headerlink" title="简化版镜像仓库"></a>简化版镜像仓库</h4><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>    --restart=always \<br>    --name registry\<br>    -p 5000:5000 \<br>    -v registry-data:/var/lib/registry \<br>    registry<br></code></pre></td></tr></table></figure><p>命令中挂载了一个数据卷registry-data到容器内的&#x2F;var&#x2F;lib&#x2F;registry 目录，这是私有镜像库存放数据的目录。</p><p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p><h4 id="带有图形化界面版本"><a href="#带有图形化界面版本" class="headerlink" title="带有图形化界面版本"></a>带有图形化界面版本</h4><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./registry-data:/var/lib/registry</span><br>  <span class="hljs-attr">ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">joxit/docker-registry-ui:static</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_TITLE=汉阳大学私有仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_URL=http://registry:5000</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">registry</span><br></code></pre></td></tr></table></figure><h4 id="配置Docker信任地址"><a href="#配置Docker信任地址" class="headerlink" title="配置Docker信任地址"></a>配置Docker信任地址</h4><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 打开要修改的文件</span><br>vi /etc/docker/daemon.json<br><span class="hljs-comment"># 添加内容：</span><br><span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;http://192.168.150.101:8080&quot;</span>]<br><span class="hljs-comment"># 重加载</span><br>systemctl daemon-reload<br><span class="hljs-comment"># 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="在私有镜像仓库推送或拉取镜像"><a href="#在私有镜像仓库推送或拉取镜像" class="headerlink" title="在私有镜像仓库推送或拉取镜像"></a>在私有镜像仓库推送或拉取镜像</h4><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><ol><li>重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080&#x2F;</li></ol> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><ol start="2"><li>推送镜像</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker push 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><ol start="3"><li>拉取镜像</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="初识MQ"><a href="#初识MQ" class="headerlink" title="初识MQ"></a>初识MQ</h3><p>同步调用存在的问题</p><ol><li>耦合度高：每次加入新的需求，都要修改原来的源码</li><li>性能下降：调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用的时间之和</li><li>资源浪费：调用链中的每个服务在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源</li><li>级联失败：如果服务提供者出现问题，所有调用方都会跟着出现问题，如同多米诺骨牌一样，迅速导致整个微服务器故障</li></ol><h4 id="同步调用的优缺点"><a href="#同步调用的优缺点" class="headerlink" title="同步调用的优缺点"></a>同步调用的优缺点</h4><p>优点</p><ul><li>时效性较强，可以立即得到结果</li></ul><p>缺点</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><h4 id="异步通信的优缺点"><a href="#异步通信的优缺点" class="headerlink" title="异步通信的优缺点"></a>异步通信的优缺点</h4><p>优点</p><ul><li>耦合度低</li><li>吞吐量提升</li><li>故障隔离</li><li>流量削峰</li></ul><p>缺点</p><ul><li>依赖于Broker的可靠性、安全性、吞吐能力</li><li>架构复杂，业务没有明显的流程线，不好追踪管理</li></ul><h4 id="MQ常见技术"><a href="#MQ常见技术" class="headerlink" title="MQ常见技术"></a>MQ常见技术</h4><p>MQ（MessageQueue），消息队列，字面上看是存放消息的对列。就是事件驱动架构中的Broker</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司&#x2F;社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><h4 id="RabbitMQ概述和部署"><a href="#RabbitMQ概述和部署" class="headerlink" title="RabbitMQ概述和部署"></a>RabbitMQ概述和部署</h4><ul><li>RabbitMQ是基于Erlang语言开发的开源消息通信中间件</li><li><a href="https://www.rabbitmq.com/">官网</a></li></ul><p>RabbitMQ概念</p><ul><li>channel：操作MQ的工具</li><li>exchange：路由消息到队列中</li><li>queue：缓存消息</li><li>virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202307161539975.png"></p><ol><li>下载镜像</li></ol><p>方式一：在线拉取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull rabbitmq:3-management<br></code></pre></td></tr></table></figure><p>方式二：从本地加载</p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i mq.tar<br></code></pre></td></tr></table></figure><ol start="2"><li>安装MQ</li></ol><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br> -e RABBITMQ_DEFAULT_USER=itcast \<br> -e RABBITMQ_DEFAULT_PASS=123321 \<br> --name mq \<br> --hostname mq1 \<br> -p 15672:15672 \<br> -p 5672:5672 \<br> -d \<br> rabbitmq:3-management<br></code></pre></td></tr></table></figure><h4 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h4><p>RabbitMQ官方提供了5个不同的Demo示例，对应不同的消息模型</p><ul><li><p>基本消息队列（BasicQueue）</p></li><li><p>工作消息队列（WorkQueue）</p></li><li><p>发布订阅（public、Subscribe），根据交换机类型不同分为三种</p><ul><li>Fanout Exchange：广播</li><li>Direct Exchange：路由</li><li>Topik Exchange：主题</li></ul></li></ul><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><p>基本消息队列的消息发送流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>利用channel向队列发送消息</p></li></ol><p>基本消息队列的消息接收流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>定义consumer的消费行为handleDelivery()</p></li><li><p>利用channel将消费者与队列绑定</p></li></ol><h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li><p>AMQP：Advanced Message Queuing Protocol，是用于在应用程序或之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求</p></li><li><p>Spring AMQP：基于AMQP协议定义的一套API规范，提供模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现</p></li><li><p><a href="https://spring.io/projects/spring-amqp">官网</a></p></li></ul><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h3 id="案例消息发送"><a href="#案例消息发送" class="headerlink" title="案例消息发送"></a>案例消息发送</h3><ol><li>在父工程中引入spring-amqp依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在publisher服务中利用RabbitTemplate发送消息到simple.queue队列</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.190</span><span class="hljs-number">.131</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在consumer服务中编写消费逻辑，绑定simple.queue队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate  rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageSimpleQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例消息接收"><a href="#案例消息接收" class="headerlink" title="案例消息接收"></a>案例消息接收</h3><ol><li>在consumer服务中编写application.yml，添加mq连接信息</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.190</span><span class="hljs-number">.131</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在consumer服务中新建一个类，编写消费逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到simple.queue的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="WorkQueue模型"><a href="#WorkQueue模型" class="headerlink" title="WorkQueue模型"></a>WorkQueue模型</h3><ul><li>工作队列，可以提高消息处理速度，避免队列消息堆积</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure><p>Work模型的使用</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h3 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h3><ul><li>发布订阅模式与之前区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange（交换机）</li><li>常见exchange类型包括<ul><li>Fanout：广播</li><li>Direct：路由</li><li>Topic：话题</li></ul></li></ul><h4 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h4><p>FanoutExchange会将收到的消息路由到每一个跟其绑定的queue</p><ol><li>在consumer服务声明Exchange、Queue、Binding</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.FanoutExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConfig</span> &#123;<br>    <span class="hljs-comment">//itcast.fanout</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">fanoutExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(<span class="hljs-string">&quot;itcast.fanout&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//fanout.queue1</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定队列1到交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">fanoutBinding1</span><span class="hljs-params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder<br>                .bind(fanoutQueue1)<br>                .to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-comment">//fanout.queue2</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定队列2到交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">fanoutBinding2</span><span class="hljs-params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder<br>                .bind(fanoutQueue2)<br>                .to(fanoutExchange);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在consumer服务声明两个消费者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到simple.queue的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到fanout.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到fanout.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在publisher服务发送消息到FanoutExchange</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageFanoutExchange</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//交换机名称</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.fanout&quot;</span>;<br>       <span class="hljs-comment">//消息</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, every one!&quot;</span>;<br>       <span class="hljs-comment">//发送消息</span><br>       rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>   &#125;<br></code></pre></td></tr></table></figure><p>交换机的作用</p><ul><li>接收publisher发送的信息</li><li>将消息按照规则路由与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><h4 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h4><p>DirectExchange会将接收到的消息根据规则路由到指定的Queue，因此称为路由模式（routes）</p><ul><li>每一个Queue都与Exchange设置一个BindingKey</li><li>发布者发送消息时，指定消息的RountingKey</li><li>Exchange将消息路由到BindingKey与消息RountingKey一致的队列</li></ul><ol><li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p></li><li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;,&quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消跟接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;,&quot;yellow&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消跟接收到direct.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Direct交换机与Fanout交换机的差异</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解</p><ul><li>@Queue</li><li>@Exchange</li></ul><h4 id="TopikExchange"><a href="#TopikExchange" class="headerlink" title="TopikExchange"></a>TopikExchange</h4><p>TopikExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以 <strong>.</strong> 分割</p><p>Queue与Exchange指定BindingKey是可以使用通配符</p><p>#：代指0个或多个单词</p><p>*：代指一个单词</p><ol><li>在consumer服务中，编写两个消费者方法，分别监听topik.queue1和topik.queue2</li><li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = &quot;topic.queue1&quot;),</span><br><span class="hljs-meta">            exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">            key = &quot;china.#&quot;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消跟接收到topic.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = &quot;topic.queue2&quot;),</span><br><span class="hljs-meta">            exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">            key = &quot;#.news&quot;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消跟接收到topic.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>Direct交换机与Topic交换机的差异</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li></ul><h3 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h3><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置消息转换器，在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">jsonMessageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringAMQP中的消息的序列化和反序列化是怎么实现的</p><ul><li>利用MessageConverter实现，默认是JDK的序列化</li><li>注意发送与接收方必须使用相同的MessageConverter</li></ul><h2 id="初识ES"><a href="#初识ES" class="headerlink" title="初识ES"></a>初识ES</h2><h3 id="什么是elasticsearch"><a href="#什么是elasticsearch" class="headerlink" title="什么是elasticsearch"></a>什么是elasticsearch</h3><ul><li><p>elasticsearch是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容</p></li><li><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域</p></li><li><p>elasticsearch是elastic stack的核心，负责存储、搜索、分析数据</p></li></ul><p><strong>Lucene</strong>是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。<a href="https://lucene.apache.org/">官网</a></p><p>Lucene优势</p><ul><li>易扩展</li><li>高性能（基于倒排索引）</li></ul><p>Lucene缺点</p><ul><li>只限于Java语言开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul><p><a href="https://www.elastic.co/cn/">elasticsearch官网</a></p><p>相比与lucene，elasticsearch具备的优势</p><ul><li>支持分布式，可水平扩展</li><li>提供Restful接口，可被任何语言调用</li></ul><p>什么是elasticsearch？</p><ul><li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li></ul><p>什么是elastic stack（ELK）？</p><ul><li>是以elasticsearch为核心的技术栈，包括beats、Logstash、kibana、elasticsearch</li></ul><p>什么是Lucene？</p><ul><li>是Apache的开源搜索引擎类库，提供了搜索引擎的核心API</li></ul><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>elasticsearch采用倒排索引</p><ul><li>文档（document）：每条数据就是一个文档</li><li>词条（term）：文档按照语义分成的词语</li></ul><p>什么是文档和词条？</p><ul><li>每一条数据就是一个文档</li><li>对文档中的内容分词，得到的词语就是词条</li></ul><p>什么是正向索引？</p><ul><li>基于文档id创建索引。查询词条时必须先找到文档，而后判断是否包含词条</li></ul><p>什么是倒排索引？</p><ul><li>对文档内容分词，对词条创建索引，并记录词条所在文档的信息，查询时先根据词条查询到文档id，而后获取到文档</li></ul><h3 id="es与mysql概念对比"><a href="#es与mysql概念对比" class="headerlink" title="es与mysql概念对比"></a>es与mysql概念对比</h3><ul><li><p>elasticsearch是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中</p></li><li><p>Json文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列</p></li><li><p><strong>索引（Index）</strong>，就是相同类型的文档的集合</p></li><li><p><strong>映射（mapping）</strong>，索引中文档的字段约束信息，类似表的结构约束</p></li></ul><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><p><strong>架构</strong></p><ul><li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p></li><li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p></li></ul><h3 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h3><h4 id="部署单点es"><a href="#部署单点es" class="headerlink" title="部署单点es"></a>部署单点es</h4><ol><li>创建网络</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create es-net<br></code></pre></td></tr></table></figure><ol start="2"><li>加载镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">导入数据</span><br>docker load -i es.tar<br></code></pre></td></tr></table></figure><ol start="3"><li>运行</li></ol><p>运行docker命令，部署单点es：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>--name es \<br>    -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \<br>    -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>    -v es-data:/usr/share/elasticsearch/data \<br>    -v es-plugins:/usr/share/elasticsearch/plugins \<br>    --privileged \<br>    --network es-net \<br>    -p 9200:9200 \<br>    -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><p>在浏览器中输入：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到elasticsearch的响应结果</p><h3 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h3><h4 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h4><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习</p><ol><li>部署</li></ol><p>运行docker命令，部署kibana</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>--name kibana \<br>-e ELASTICSEARCH_HOSTS=http://es:9200 \<br>--network=es-net \<br>-p 5601:5601  \<br>kibana:7.12.1<br></code></pre></td></tr></table></figure><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f kibana<br></code></pre></td></tr></table></figure><p>查看运行日志，当查看到下面的日志，说明成功</p><p>此时，在浏览器输入地址访问：<a href="http://192.168.150.101:5601，即可看到结果">http://192.168.150.101:5601，即可看到结果</a></p><h3 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h3><h4 id="在线安装ik插件（较慢）"><a href="#在线安装ik插件（较慢）" class="headerlink" title="在线安装ik插件（较慢）"></a>在线安装ik插件（较慢）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器内部</span><br>docker exec -it elasticsearch /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在线下载并安装</span><br>./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">退出</span><br>exit<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启容器</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure><h4 id="离线安装ik插件（推荐）"><a href="#离线安装ik插件（推荐）" class="headerlink" title="离线安装ik插件（推荐）"></a>离线安装ik插件（推荐）</h4><ol><li>查看数据卷目录</li></ol><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect es-plugins<br></code></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;CreatedAt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-05-06T10:06:34+08:00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Mountpoint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/es-plugins/_data&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es-plugins&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中</p><ol start="2"><li><p>解压缩分词器安装包</p></li><li><p>上传到es容器的插件数据卷中</p><p>就是<code>/var/lib/docker/volumes/es-plugins/_data </code></p></li><li><p>重启容器</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">4、重启容器</span><br>docker restart es<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看es日志</span><br>docker logs -f es<br></code></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员学习java太棒了&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="IK分词器拓展"><a href="#IK分词器拓展" class="headerlink" title="IK分词器拓展"></a>IK分词器拓展</h4><ol><li><p>打开IK分词器config目录</p></li><li><p>在IKAnalyzer.cfg.xml配置文件内容添加：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">汉阳大学</span><br><span class="hljs-attr">泰酷辣</span><br></code></pre></td></tr></table></figure><ol start="4"><li>重启elasticsearch</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker restart es<br><br><span class="hljs-comment"># 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>分词器的作用是什么？</p><ul><li>创建倒排索引时对文档分词</li><li>用户搜索时，对输入的内容分词</li></ul><p>IK分词器有几种模式？</p><ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><p>IK分词器如何拓展词条？如何停用词条？</p><ul><li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条或者停用词条</li></ul><h3 id="操作索引库"><a href="#操作索引库" class="headerlink" title="操作索引库"></a>操作索引库</h3><h4 id="mapping属性"><a href="#mapping属性" class="headerlink" title="mapping属性"></a>mapping属性</h4><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><p>例如下面的json文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">52.1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isMarried&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;汉阳程序员Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">99.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">99.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">98.9</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的每个字段映射（mapping）：</p><ul><li>age：类型为 integer；参与搜索，因此需要index为true；无需分词器</li><li>weight：类型为float；参与搜索，因此需要index为true；无需分词器</li><li>isMarried：类型为boolean；参与搜索，因此需要index为true；无需分词器</li><li>info：类型为字符串，需要分词，因此是text；参与搜索，因此需要index为true；分词器可以用ik_smart</li><li>email：类型为字符串，但是不需要分词，因此是keyword；不参与搜索，因此需要index为false；无需分词器</li><li>score：虽然是数组，但是我们只看元素的类型，类型为float；参与搜索，因此需要index为true；无需分词器</li><li>name：类型为object，需要定义多个子属性<ul><li>name.firstName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li><li>name.lastName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li></ul></li></ul><p>mapping常见属性</p><ul><li>type：数据类型</li><li>index：是否索引</li><li>analyzer：分词器</li><li>properties：子字段</li></ul><p>type常见的有哪些？</p><ul><li>字符串：text、keyword</li><li>数字：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul><h4 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h4><p>ES中通过Restful请求操作索引库、文档。请求内容用DSL语句来表示。创建索引库和mapping的DSL语法如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名称<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;子字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// ...略</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="查询、删除、修改索引库"><a href="#查询、删除、修改索引库" class="headerlink" title="查询、删除、修改索引库"></a>查询、删除、修改索引库</h4><p><strong>查看索引库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /索引库名<br></code></pre></td></tr></table></figure><p><strong>删除索引库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DELETE /索引库名<br></code></pre></td></tr></table></figure><p><strong>修改索引库</strong></p><ul><li>索引库和mapping一旦创建无法修改，但是可以添加新的字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;新字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>索引库操作有哪些？</p><ul><li>创建索引库：PUT &#x2F;索引库名</li><li>查询索引库：GET &#x2F;索引库名</li><li>删除索引库：DELETE &#x2F;索引库名</li><li>添加字段：PUT &#x2F;索引库名&#x2F;_mapping</li></ul><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="新增、查询、删除文档"><a href="#新增、查询、删除文档" class="headerlink" title="新增、查询、删除文档"></a>新增、查询、删除文档</h4><p><strong>新增文档</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /索引库名/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;子属性1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;子属性2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值4&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ...</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>查看文档</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /索引库名/_doc/文档id<br></code></pre></td></tr></table></figure><p><strong>删除索引库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DELETE /索引库名/_doc/文档id<br></code></pre></td></tr></table></figure><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ul><h5 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h5><p>全量修改是覆盖原来的文档，其本质是</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ... 略</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="增量修改"><a href="#增量修改" class="headerlink" title="增量修改"></a>增量修改</h5><p>增量修改是只修改指定id匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_update/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新的值&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>文档操作有哪些？</p><ul><li>创建文档：POST &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id   { json文档 }</li><li>查询文档：GET &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id</li><li>删除文档：DELETE &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id</li><li>修改文档：<ul><li>全量修改：PUT &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id { json文档 }</li><li>增量修改：POST &#x2F;{索引库名}&#x2F;_update&#x2F;文档id { “doc”: {字段}}</li></ul></li></ul><h3 id="RestClient"><a href="#RestClient" class="headerlink" title="RestClient"></a>RestClient</h3><h4 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h4><ul><li><p>ES官方提供了各种不同语言的客户端，用来操作ES。客户端的本质就是组装DSL语句，通过http请求发送给ES</p></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">官网</a></p></li></ul><ol><li>定义mapping映射的JSON字符串常量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MAPPING_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建索引</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求的参数：DSL语句</span><br>    request.source(MAPPING_TEMPLATE, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.indices().create(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>删除索引</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.indices().delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>判断索引库是否存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistsHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.输出</span><br>    System.err.println(exists ? <span class="hljs-string">&quot;索引库已经存在！&quot;</span> : <span class="hljs-string">&quot;索引库不存在！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档</h4><ul><li>初始化RestHighLevelClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDocumentTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Hotel类型的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;tb_hotel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hotel</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.INPUT)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String longitude;<br>    <span class="hljs-keyword">private</span> String latitude;<br>    <span class="hljs-keyword">private</span> String pic;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义一个新的类型，与索引库结构吻合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDoc</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String pic;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HotelDoc</span><span class="hljs-params">(Hotel hotel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = hotel.getId();<br>        <span class="hljs-built_in">this</span>.name = hotel.getName();<br>        <span class="hljs-built_in">this</span>.address = hotel.getAddress();<br>        <span class="hljs-built_in">this</span>.price = hotel.getPrice();<br>        <span class="hljs-built_in">this</span>.score = hotel.getScore();<br>        <span class="hljs-built_in">this</span>.brand = hotel.getBrand();<br>        <span class="hljs-built_in">this</span>.city = hotel.getCity();<br>        <span class="hljs-built_in">this</span>.starName = hotel.getStarName();<br>        <span class="hljs-built_in">this</span>.business = hotel.getBusiness();<br>        <span class="hljs-built_in">this</span>.location = hotel.getLatitude() + <span class="hljs-string">&quot;, &quot;</span> + hotel.getLongitude();<br>        <span class="hljs-built_in">this</span>.pic = hotel.getPic();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>查询文档</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.根据id查询酒店数据</span><br>    <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> hotelService.getById(<span class="hljs-number">61083L</span>);<br>    <span class="hljs-comment">// 2.转换为文档类型</span><br>    <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>    <span class="hljs-comment">// 3.将HotelDoc转json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(hotelDoc);<br><br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());<br>    <span class="hljs-comment">// 2.准备Json文档</span><br>    request.source(json, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.index(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>删除文档</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>修改文档</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.doc(<br>        <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;952&quot;</span>,<br>        <span class="hljs-string">&quot;starName&quot;</span>, <span class="hljs-string">&quot;四钻&quot;</span><br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.update(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>批量导入文档</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulkRequest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 批量查询酒店数据</span><br>    List&lt;Hotel&gt; hotels = hotelService.list();<br><br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    <span class="hljs-comment">// 2.准备参数，添加多个新增的Request</span><br>    <span class="hljs-keyword">for</span> (Hotel hotel : hotels) &#123;<br>        <span class="hljs-comment">// 2.1.转换为文档类型HotelDoc</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>        <span class="hljs-comment">// 2.2.创建新增文档的Request对象</span><br>        request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>)<br>                    .id(hotelDoc.getId().toString())<br>                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON));<br>    &#125;<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.bulk(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h2><h3 id="DSL查询语法"><a href="#DSL查询语法" class="headerlink" title="DSL查询语法"></a>DSL查询语法</h3><ul><li>GET &#x2F;索引库名&#x2F;_search</li><li>{“query”：{“查询类型”：{“FIELD”：”TEXT”}}}</li></ul><h4 id="全文检索查询"><a href="#全文检索查询" class="headerlink" title="全文检索查询"></a>全文检索查询</h4><ul><li>match：根据一个字段查询</li><li>multi_match：根据多个字段查询，参与查询字段越多，查询性能越差</li></ul><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><ul><li>term查询：根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</li><li>range查询：根据数值范围查询，可以是数值、日期的范围</li></ul><h4 id="地理查询"><a href="#地理查询" class="headerlink" title="地理查询"></a>地理查询</h4><ul><li>geo_bounding_box：根据geo_point值落在某个矩形范围的所有文档</li><li>geo_distance：查询到指定中心点小于某个距离值的所有文档</li></ul><h4 id="相关性算分"><a href="#相关性算分" class="headerlink" title="相关性算分"></a>相关性算分</h4><ul><li>TF-IDF：在elasticsearch5.0之前，会随着词频增加而越来越大</li><li>BM25：在elasticsearch5.0之后，会随着词频增加而增大，但增长曲线会趋于水平</li></ul><h4 id="FunctionScoreQuery"><a href="#FunctionScoreQuery" class="headerlink" title="FunctionScoreQuery"></a>FunctionScoreQuery</h4><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算function score</li><li>加权方式：function score与query score如何运算</li></ul><h4 id="BooleanQuery"><a href="#BooleanQuery" class="headerlink" title="BooleanQuery"></a>BooleanQuery</h4><ul><li>must：必须匹配的条件，”与“</li><li>should：选择性匹配的条件，”或“</li><li>must_not：必须不匹配的条件，不参与打分</li><li>filter：必须匹配的条件，不参与打分</li></ul><h3 id="搜索结果处理"><a href="#搜索结果处理" class="headerlink" title="搜索结果处理"></a>搜索结果处理</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>elasticsearch支持对搜索<strong>结果排序</strong>，默认是根据相关度算分（_score）来排序</li><li>排序字段类型：keyword类型、数值类型、地图坐标类型、日期类型等</li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ul><li>from + size<ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限（from + size）是10000</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li></ul></li><li>after search：<ul><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li></ul></li><li>scroll：<ul><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li><li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议用after search方案</li></ul></li></ul><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><ul><li>在搜索结果中把搜索关键字突出显示</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//分页开始的位置</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//期望获取的文档总数</span><br>    <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//普通排序</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//距离排序</span><br>                <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;31.040699,121.618075&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;unit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;km&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//高亮字段</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;em&gt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//用来标记高亮字段的前置标签</span><br>                <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span> <span class="hljs-comment">//用来标记高亮字段的后置标签</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="RestClient查询文档"><a href="#RestClient查询文档" class="headerlink" title="RestClient查询文档"></a>RestClient查询文档</h3><h4 id="全文检索查询-1"><a href="#全文检索查询-1" class="headerlink" title="全文检索查询"></a>全文检索查询</h4><ul><li>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单字段查询</span><br>QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>,<span class="hljs-string">&quot;如家&quot;</span>);<br><span class="hljs-comment">// 多字段查询</span><br>QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;如家&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;business&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="精确查询-1"><a href="#精确查询-1" class="headerlink" title="精确查询"></a>精确查询</h4><ul><li>精确查询常见的有term查询和range查询，同样利用QueryBuilders实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 词条查询</span><br>QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;杭州&quot;</span>);<br><span class="hljs-comment">// 范围查询</span><br>QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">100</span>).lte(<span class="hljs-number">150</span>);<br></code></pre></td></tr></table></figure><h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建布尔查询</span><br><span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br><span class="hljs-comment">// 添加must条件</span><br>boolQuery.must(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;杭州&quot;</span>));<br><span class="hljs-comment">// 范围查询</span><br>boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>)lte(<span class="hljs-number">250</span>));<br></code></pre></td></tr></table></figure><h4 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h4><ul><li>搜索结果的排序和分页是与query同级的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询</span><br>request.source().query(QueryBuilders.matchAllQuery());<br><span class="hljs-comment">// 分页</span><br>request.source().from(<span class="hljs-number">0</span>).size(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 价格排序</span><br>request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.ASC);<br></code></pre></td></tr></table></figure><h4 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h4><ul><li>高亮API包括请求DSL构建和结果解析两部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">request.source().highlighter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>()<br>                            .field(<span class="hljs-string">&quot;name&quot;</span>)<br>                            <span class="hljs-comment">// 是否需要与查询字段匹配</span><br>                            .requireFieldMatch(<span class="hljs-literal">false</span>)<br>                            );<br></code></pre></td></tr></table></figure><ul><li>所有搜索DSL的构建，API：SearchRequest的source()方法</li><li>高亮结果解析是参考JSON结果，逐层解析</li></ul><h2 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h2><h3 id="聚合的分类"><a href="#聚合的分类" class="headerlink" title="聚合的分类"></a>聚合的分类</h3><p>聚合常见的有三类：</p><ul><li><p><strong>桶（Bucket）</strong>聚合：用来对文档做分组</p><ul><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li><p><strong>度量（Metric）</strong>聚合：用以计算一些值，比如：最大值、最小值、平均值等</p><ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li></ul></li><li><p><strong>管道（pipeline）</strong>聚合：其它聚合的结果为基础做聚合</p></li></ul><p>什么是聚合？</p><ul><li>聚合是对文档数据的统计、分析、计算</li></ul><p>聚合的常见种类有哪些？</p><ul><li>Bucket：对文档数据分组，并统计每组数量</li><li>Metric：对文档数据做计算，例如avg</li><li>Pipeline：基于其它聚合结果再做聚合</li></ul><p>参与聚合的字段类型必须是：</p><ul><li>keyword</li><li>数值</li><li>日期</li><li>布尔</li></ul><h3 id="DSL实现Bucket聚合"><a href="#DSL实现Bucket聚合" class="headerlink" title="DSL实现Bucket聚合"></a>DSL实现Bucket聚合</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 定义聚合</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//给聚合起个名字</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合的类型，按照品牌值聚合，所以选择term</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 参与聚合的字段</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-comment">// 希望获取的聚合结果数量</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以指定order属性，自定义聚合的排序方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span> <span class="hljs-comment">// 按照_count升序排列</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以限定要聚合的文档范围，只要添加query条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span> <span class="hljs-comment">// 只对200元以下的文档聚合</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Metric聚合语法"><a href="#Metric聚合语法" class="headerlink" title="Metric聚合语法"></a>Metric聚合语法</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 是brands聚合的子聚合，也就是分组后对每组分别计算</span><br>        <span class="hljs-attr">&quot;score_stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合名称</span><br>          <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合类型，这里stats可以计算min、max、avg等</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;score&quot;</span> <span class="hljs-comment">// 聚合字段，这里是score</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>aggs代表聚合，与query同级，此时query的作用是？</p><ul><li>限定聚合的文档范围</li></ul><p>聚合必须的三要素：</p><ul><li>聚合名称</li><li>聚合类型</li><li>聚合字段</li></ul><p>聚合可配置属性有：</p><ul><li>size：指定聚合结果数量</li><li>order：指定聚合结果排序方式</li><li>field：指定聚合字段</li></ul><h3 id="RestAPI实现聚合"><a href="#RestAPI实现聚合" class="headerlink" title="RestAPI实现聚合"></a>RestAPI实现聚合</h3><p>请求组装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">request.source().size(<span class="hljs-number">0</span>);<br>request.source().aggregation(<br>    AggregationBuilders<br>    .terms(<span class="hljs-string">&quot;brand_agg&quot;</span>)<br>    .field(<span class="hljs-string">&quot;brand&quot;</span>)<br>    .size(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>聚合结果解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解析聚合结果</span><br><span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br><span class="hljs-comment">// 根据名称获取聚合结果</span><br><span class="hljs-type">Terms</span> <span class="hljs-variable">brandTerms</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;brand_agg&quot;</span>);<br><span class="hljs-comment">// 获取桶</span><br>List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();<br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>    <span class="hljs-comment">// 获取key，也就是品牌信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>    System.out.println(brandName);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><h3 id="拼音分词器"><a href="#拼音分词器" class="headerlink" title="拼音分词器"></a>拼音分词器</h3><p><a href="https://github.com/medcl/elasticsearch-analysis-pinyin">网址</a></p><p>安装方式与IK分词器一样，分三步：</p><p>​①解压</p><p>​②上传到虚拟机中，elasticsearch的plugin目录</p><p>​③重启elasticsearch</p><p>​④测试</p><h3 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h3><p>elasticsearch中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分词；还有ik_smart</li><li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><p>声明自定义分词器的语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义分词器</span><br>        <span class="hljs-attr">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// 分词器名称</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义tokenizer filter</span><br>        <span class="hljs-attr">&quot;py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 过滤器名称</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 过滤器类型，这里是pinyin</span><br>  <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如何使用拼音分词器？</p><ul><li><p>①下载pinyin分词器</p></li><li><p>②解压并放到elasticsearch的plugin目录</p></li><li><p>③重启即可</p></li></ul><p>如何自定义分词器？</p><ul><li><p>①创建索引库时，在settings中配置，可以包含三部分</p></li><li><p>②character filter</p></li><li><p>③tokenizer</p></li><li><p>④filter</p></li></ul><p>拼音分词器注意事项？</p><ul><li>为了避免搜索到同音字，搜索时不要使用拼音分词器</li></ul><h3 id="自动补全查询"><a href="#自动补全查询" class="headerlink" title="自动补全查询"></a>自动补全查询</h3><ul><li><p>参与补全查询的字段必须是completion类型</p></li><li><p>字段的内容一般是用来补全的多个词条形成的数组</p></li></ul><p>一个这样的索引库：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 创建索引库</span><br>PUT test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后插入下面的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 示例数据</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Sony&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;WH-1000XM3&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;SK-II&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PITERA&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Nintendo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;switch&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查询的DSL语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 自动补全查询</span><br>GET /test/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title_suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 关键字</span><br>      <span class="hljs-attr">&quot;completion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 补全查询的字段</span><br>        <span class="hljs-attr">&quot;skip_duplicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 跳过重复的</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span> <span class="hljs-comment">// 获取前10条结果</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="RestAPI实现自动补全"><a href="#RestAPI实现自动补全" class="headerlink" title="RestAPI实现自动补全"></a>RestAPI实现自动补全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.准备请求</span><br><span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br><span class="hljs-comment">// 2.请求参数</span><br>request.source()<br>    .suggest(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestBuilder</span>().addSuggestion&#123;<br>            <span class="hljs-string">&quot;mySuggestion&quot;</span>,<br>            SuggestBuilders<br>                    .completionSuggestion(<span class="hljs-string">&quot;title&quot;</span>)<br>                    .prefix(<span class="hljs-string">&quot;h&quot;</span>)<br>                    .skipDuplicates(<span class="hljs-literal">true</span>)<br>                    .size(<span class="hljs-number">10</span>)<br>        &#125;);<br><span class="hljs-comment">// 3.发送请求</span><br>client.search(request, RequestOptions.DEFAULT);<br></code></pre></td></tr></table></figure><p>结果解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4.处理结果</span><br><span class="hljs-type">Suggest</span> <span class="hljs-variable">suggest</span> <span class="hljs-operator">=</span> response.getSuggest();<br><span class="hljs-comment">//4.1.根据名称获取补全结果</span><br><span class="hljs-type">CompletionSuggest</span> <span class="hljs-variable">suggestion</span> <span class="hljs-operator">=</span> suggest.getSuggestion(<span class="hljs-string">&quot;hotelSuggestion&quot;</span>);<br><span class="hljs-comment">//4.2.获取options并遍历</span><br><span class="hljs-keyword">for</span>(CompletionSuggestion.Entry.Option option : suggestion.getOptions())&#123;<br>    <span class="hljs-comment">//4.3.获取一个option中的text，补全的词条</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> option.getText().string();<br>    System.out.println(text);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><ul><li>elasticsearch中的酒店数据来自于mysql数据库，因此mysql数据发生改变时，elasticsearch也必须跟着改变，这个就是elasticsearch与mysql之间的<strong>数据同步</strong></li></ul><p>方式一：同步调用</p><ul><li>优点：实现简单，粗暴</li><li>缺点：业务耦合度高</li></ul><p>方式二：异步通知</p><ul><li>优点：低耦合，实现难度一般</li><li>缺点：依赖mq的可靠性</li></ul><p>方式三：监听binlog</p><ul><li>优点：完全解除服务间耦合</li><li>缺点：开启binlog增加数据库负担、实现复杂度高</li></ul><h2 id="ES集群"><a href="#ES集群" class="headerlink" title="ES集群"></a>ES集群</h2><h3 id="集群结构"><a href="#集群结构" class="headerlink" title="集群结构"></a>集群结构</h3><p>单机的elasticsearch做数据存储，必然面临两个问题：海量数据存储问题、单点故障问题。</p><ul><li>海量数据存储问题：将索引库从逻辑上拆分为N个分片（shard），存储到多个节点</li><li>单点故障问题：将分片数据在不同节点备份（replica）</li></ul><p><strong>ES集群相关概念</strong>:</p><ul><li><p>集群（cluster）：一组拥有共同的 cluster name 的 节点</p></li><li><p><font color="red">节点（node)</font>   ：集群中的一个 Elasticearch 实例</p></li><li><p><font color="red">分片（shard）</font>：索引可以被拆分为不同的部分进行存储，称为分片。在集群环境下，一个索引的不同分片可以拆分到不同的节点中</p><p>解决问题：数据量太大，单点存储量有限的问题</p></li><li><p>主分片（Primary shard）：相对于副本分片的定义</p></li><li><p>副本分片（Replica shard）每个主分片可以有一个或者多个副本，数据和主分片一样</p></li></ul><h3 id="集群职责"><a href="#集群职责" class="headerlink" title="集群职责"></a>集群职责</h3><table><thead><tr><th>节点类型</th><th>配置参数</th><th>默认值</th><th>节点职责</th></tr></thead><tbody><tr><td>master eligible</td><td>node.master</td><td>true</td><td>备选主节点：主节点可以管理和记录集群状态、决定分片再哪个节点、处理创意和删除索引库的请求</td></tr><tr><td>data</td><td>node.data</td><td>true</td><td>数据节点：存储数据、搜索、聚合、CRUD</td></tr><tr><td>ingest</td><td>node.ingest</td><td>true</td><td>数据存储之前的预处理</td></tr><tr><td>coordinating</td><td>上面3个参数都为false则为coordinating节点</td><td>无</td><td>路由请求到其它节点合并其它节点处理的结果，返回给用户</td></tr></tbody></table><p>真实的集群一定要将集群职责分离：</p><ul><li>master节点：对CPU要求高，但是内存要求第</li><li>data节点：对CPU和内存要求都高</li><li>coordinating节点：对网络带宽、CPU要求高</li></ul><p><strong>脑裂问题</strong></p><ul><li>默认情况下，每个节点都是master eligible节点，因此一旦master节点宕机，其他候选节点会选举一个成为主节点。当主节点与其他节点网络故障时，可能发生脑裂问题</li><li>为了避免脑裂，需要要求选票超过（eligible节点数量 + 1）&#x2F; 2才能当选为主，因此eligible节点数量最好是奇数。对于配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题</li></ul><p><strong>小结</strong></p><p>master eligible节点的作用是什么？</p><ul><li>参与集群选主</li><li>主节点可以管理集群状态、管理分片信息、处理创建和删除索引库的请求</li></ul><p>data节点的作用是什么？</p><ul><li>数据的CRUD</li></ul><p>coordinator节点的作用是什么？</p><ul><li><p>路由请求到其它节点</p></li><li><p>合并查询到的结果，返回给用户</p></li></ul><h3 id="分布式新增"><a href="#分布式新增" class="headerlink" title="分布式新增"></a>分布式新增</h3><ul><li>1）新增一个id&#x3D;1的文档</li><li>2）对id做hash运算，假如得到的是2，则应该存储到shard-2</li><li>3）shard-2的主分片在node3节点，将数据路由到node3</li><li>4）保存文档</li><li>5）同步给shard-2的副本replica-2，在node2节点</li><li>6）返回结果给coordinating-node节点</li></ul><h3 id="分布式查询"><a href="#分布式查询" class="headerlink" title="分布式查询"></a>分布式查询</h3><p>elasticsearch的查询分成两个阶段：</p><ul><li><p>scatter phase：分散阶段，coordinating node会把请求分发到每一个分片</p></li><li><p>gather phase：聚集阶段，coordinating node汇总data node的搜索结果，并处理为最终结果集返回给用户</p></li></ul><p><strong>小结</strong></p><p>分布式新增如何确定分片？</p><ul><li>coordinating node根据id做hash运算，得到结果对shard数量取余，余数就是对应的分片</li></ul><p>分布式查询</p><ul><li>分散阶段：coordinating node将查询请求分发给不同分片</li><li>收集阶段：将查询结果汇总到coordinating node，整理并返回给用户</li></ul><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做故障转移。</p><ul><li>master宕机后，EligibleMaster选举为新的主节点</li><li>master节点监控分片、节点状态，将故障节点上的分片转移到正常节点，确保数据安全</li></ul>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backend</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring6</title>
    <link href="/2023/06/11/Spring/"/>
    <url>/2023/06/11/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring6"><a href="#Spring6" class="headerlink" title="Spring6"></a>Spring6</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Spring-Framework特点"><a href="#Spring-Framework特点" class="headerlink" title="Spring Framework特点"></a>Spring Framework特点</h3><ul><li><p>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</p></li><li><p>控制反转：IoC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。</p></li><li><p>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。</p></li><li><p>容器：Spring IoC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</p></li><li><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</p></li><li><p>一站式：在 IoC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</p></li></ul><p><img src="https://raw.githubusercontent.com/renkelin/my-pic-bed/main/springModel.png"></p><h3 id="Spring模块组成"><a href="#Spring模块组成" class="headerlink" title="Spring模块组成"></a>Spring模块组成</h3><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202305271611603.png"></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h3><ol><li>引入spring相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建类、定义属性和方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>按照spring要求创建配置文件（xml格式）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.hanyang.spring6.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestUserObject</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user);<br>        user.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h3><p><strong>（1）日志信息的优先级</strong>，日志信息的优先级从高到低有<strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</strong><br>                TRACE：追踪，是最低的日志级别，相当于追踪程序的执行<br>                DEBUG：调试，一般在开发中，都将其设置为最低的日志级别<br>                INFO：信息，输出重要的信息，使用较多<br>                WARN：警告，输出警告的信息<br>                ERROR：错误，输出错误信息<br>                FATAL：严重错误</p><p>这些级别分别用来指定这条日志信息的重要程度；级别高的会自动屏蔽级别低的日志，也就是说，设置了WARN的日志，则INFO、DEBUG的日志级别的日志不会显示</p><p><strong>（2）日志信息的输出目的地</strong>，日志信息的输出目的地指定了日志将打印到<strong>控制台</strong>还是<strong>文件中</strong>；</p><p><strong>（3）日志信息的输出格式</strong>，而输出格式则控制了日志信息的显示内容。</p><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>加入日志配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            level指定日志级别，从低到高的优先级：</span><br><span class="hljs-comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br><span class="hljs-comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span><br><span class="hljs-comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span><br><span class="hljs-comment">                info：信息，输出重要的信息，使用较多</span><br><span class="hljs-comment">                warn：警告，输出警告的信息</span><br><span class="hljs-comment">                error：错误，输出错误信息</span><br><span class="hljs-comment">                fatal：严重错误</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;spring6log&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFile&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;log&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;spring6log&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;d:/spring6_log/test.log&quot;</span> <span class="hljs-attr">append</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个会打印出所有的信息，</span><br><span class="hljs-comment">            每次大小超过size，</span><br><span class="hljs-comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span><br><span class="hljs-comment">            作为存档--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFile&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;d:/spring6_log/app.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50MB&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span><br><span class="hljs-comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用日志</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">helloworld</span> <span class="hljs-operator">=</span> (HelloWorld) ac.getBean(<span class="hljs-string">&quot;helloWorld&quot;</span>);<br>        helloworld.sayHello();<br>        logger.info(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><h3 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h3><h4 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h4><ul><li><p>控制反转是一种思想</p></li><li><p>控制反转是为了降低程序耦合度，提高程序扩展力</p></li><li><p>控制反转，反转的是什么？</p><ul><li><p>将对象的创建权利交出去，交给第三方容器负责</p></li><li><p>将对象和对象之间关系的维护权交出去，交给第三方容器负责</p></li></ul></li><li><p>控制反转这种思想如何实现呢？</p><ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。</p><p><strong>依赖注入：</strong></p><ul><li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li></ul><p>依赖注入常见的实现方式：</p><ul><li>第一种：set注入</li><li>第二种：构造注入</li></ul><p>结论：IOC 就是一种控制反转的思想， 而 DI 是对IoC的一种具体实现</p><p><strong>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）</strong></p><h4 id="IoC容器在Spring的实现"><a href="#IoC容器在Spring的实现" class="headerlink" title="IoC容器在Spring的实现"></a>IoC容器在Spring的实现</h4><p><strong>①BeanFactory</strong></p><p>这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p><strong>②ApplicationContext</strong></p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中</td></tr></tbody></table><h3 id="基于XML管理bean"><a href="#基于XML管理bean" class="headerlink" title="基于XML管理bean"></a>基于XML管理bean</h3><h4 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserObject</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br><br>        <span class="hljs-comment">//1.根据id获取bean</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;根据id获取bean:&quot;</span> + user1);<br><br>        <span class="hljs-comment">//2.根据类型获取bean</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;根据类型获取bean:&quot;</span> + user2);<br><br>        <span class="hljs-comment">//3.根据id和类型获取bean</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        System.out.println(<span class="hljs-string">&quot;根据id和类型获取bean&quot;</span> + user3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p><h4 id="依赖注入-setter注入"><a href="#依赖注入-setter注入" class="headerlink" title="依赖注入-setter注入"></a>依赖注入-setter注入</h4><ol><li>创建类，定义属性，生成属性set方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.di;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String author;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在spring配置文件中配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.hanyang.iocxml.di.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;后端开发&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;汉阳&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.di;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBook</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestSetter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di.xml&quot;</span>);<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>        System.out.println(book);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="依赖注入-构造器注入"><a href="#依赖注入-构造器注入" class="headerlink" title="依赖注入-构造器注入"></a>依赖注入-构造器注入</h4><ol><li>创建类，定义属性，生成有参数构造方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String bname, String author)</span> &#123;<br>    <span class="hljs-built_in">this</span>.bname = bname;<br>    <span class="hljs-built_in">this</span>.author = author;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在spring配置文件中配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookCon&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.hanyang.iocxml.di.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;前端开发&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;汉阳&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.di;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBook</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestCon</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di.xml&quot;</span>);<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;bookCon&quot;</span>, Book.class);<br>        System.out.println(book);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特殊值处理"><a href="#特殊值处理" class="headerlink" title="特殊值处理"></a>特殊值处理</h4><ol><li>字面量赋值</li></ol><blockquote><p>什么是字面量？</p><p>int a &#x3D; 10;</p><p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a的时候，我们实际上拿到的值是10。</p><p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>null值</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;null&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上写法，为name所赋的值是字符串null</p></blockquote><ol start="3"><li>xml实体</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span><br><span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a <span class="hljs-symbol">&amp;lt;</span> b&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>CDATA节</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="对象类型属性"><a href="#对象类型属性" class="headerlink" title="对象类型属性"></a>对象类型属性</h4><ol><li>引用外部bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>内部bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzInner&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;远大前程班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>级联属性赋值</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3333&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;最强王者班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数组类型属性"><a href="#数组类型属性" class="headerlink" title="数组类型属性"></a>数组类型属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean6.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>吃饭<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>睡觉<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>敲代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="集合类型属性"><a href="#集合类型属性" class="headerlink" title="集合类型属性"></a>集合类型属性</h4><ol><li>List类型属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4444&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Javaee0222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Map类型属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1 创建两个对象</span><br><span class="hljs-comment">2 注入普通类型属性</span><br><span class="hljs-comment">3 在学生bean注入map集合类型属性</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10010<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10086<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>引用集合bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1 创建三个对象</span><br><span class="hljs-comment">2 注入普通类型属性</span><br><span class="hljs-comment">3 使用util: 类型 定义</span><br><span class="hljs-comment">4 在学生bean引入util: 类型定义bean，完成list、map类型属性注入</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!--list集合类型的bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><span class="hljs-comment">&lt;!--map集合类型的bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10010<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10086<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rkl71/pic-bed@main/img/202305301751344.png"></p><h4 id="p命名空间"><a href="#p命名空间" class="headerlink" title="p命名空间"></a>p命名空间</h4><p>引入p命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentSix&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">p:id</span>=<span class="hljs-string">&quot;1006&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;小明&quot;</span> <span class="hljs-attr">p:clazz-ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">p:teacherMap-ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="引入外部属性文件"><a href="#引入外部属性文件" class="headerlink" title="引入外部属性文件"></a>引入外部属性文件</h4><ol><li>引入数据库相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建外部属性文件</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><ol start="3"><li>引入属性文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>配置bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-datasource.xml&quot;</span>);<br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> ac.getBean(DataSource.class);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    System.out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h4><ul><li>概念：在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围</li></ul><table><thead><tr><th>singleton（默认）</th><th>在IOC容器中，这个bean的对象始终为单实例</th><th>IOC容器初始化时</th></tr></thead><tbody><tr><td>取值</td><td>含义</td><td>创建对象的时机</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><ul><li>配置bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h4><ol><li>bean对象创建（调用无参数构造）</li><li>给bean对象设置相关属性</li><li>bean后置处理器（初始化之前）</li><li>bean对象初始化（调用指定初始化方法）</li><li>bean后置处理器（初始化之后）</li><li>bean对象创建完成，可以使用</li><li>bean对象销毁（配置指定销毁的方法）</li><li>IoC容器关闭</li></ol><ul><li>配置bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span><br><span class="hljs-comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lucy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>bean的后置处理器</p><p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且配置到IOC容器中。注意，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p><p>创建bean的后置处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.process;<br>    <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;：<br></code></pre></td></tr></table></figure></li><li><p>在IOC容器中配置后置处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><ul><li>简介：FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</li></ul><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><ul><li><p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p></li><li><p>创建类UserController</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.auto.controller;<br><br><span class="hljs-keyword">import</span> com.hanyang.iocxml.auto.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;controller方法执行了...&quot;</span>);<br>        userService.addUserService();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建接口UserService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.auto.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserService</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建类UserServiceImpl实现接口UserService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.auto.service;<br><br><span class="hljs-keyword">import</span> com.hanyang.iocxml.auto.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserService</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService方法执行了...&quot;</span>);<br>        userDao.addDao();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建接口UserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.auto.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDao</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建类UserDaoImpl实现接口UserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.auto.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDao</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao方法执行了...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.hanyang.iocxml.auto.controller.UserController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.hanyang.iocxml.auto.service.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.hanyang.iocxml.auto.dao.UserDaoImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.iocxml.auto;<br><br><span class="hljs-keyword">import</span> com.hanyang.iocxml.auto.controller.UserController;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-auto.xml&quot;</span>);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userController&quot;</span>, UserController.class);<br>        controller.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于注解管理bean"><a href="#基于注解管理bean" class="headerlink" title="基于注解管理bean"></a>基于注解管理bean</h3><ul><li>注解（Annotation）：是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理</li><li>Spring通过注解实现自动装配步骤：</li></ul><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义Bean</li><li>依赖注入</li></ol><h4 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.hanyang&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用注解定义Bean"><a href="#使用注解定义Bean" class="headerlink" title="使用注解定义Bean"></a>使用注解定义Bean</h4><ul><li>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。  使用时只需将该注解标注在相应类上即可</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同</td></tr></tbody></table><h4 id="Autowired注入"><a href="#Autowired注入" class="headerlink" title="@Autowired注入"></a>@Autowired注入</h4><ul><li>单独使用@Autowired注解，<strong>默认根据类型装配</strong></li><li>源码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Autowired &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>属性注入</li></ol><ul><li>创建UserDao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserDao</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserDaoImpl实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserDaoImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserService接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserService</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserServiceImpl实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.service;<br><br><span class="hljs-keyword">import</span> com.hanyang.autowired.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserServiceImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-comment">//注入Dao</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service.......&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserController类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.controller;<br><br><span class="hljs-keyword">import</span> com.hanyang.autowired.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserController</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.controller</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:50</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-comment">//注入Service</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;controller.......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired;<br><br><span class="hljs-keyword">import</span> com.hanyang.autowired.controller.UserController;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestUserController</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUserController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> context.getBean(UserController.class);<br>        controller.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>set方法注入</p></li><li><p>构造方法注入</p></li><li><p>形参上注入</p></li><li><p>只有一个有参数构造函数，无注解</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userDao = userDao;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="6"><li>两个注解，根据名称注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="hljs-comment">// 指定bean的名字</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br></code></pre></td></tr></table></figure><h4 id="Resource注入"><a href="#Resource注入" class="headerlink" title="@Resource注入"></a>@Resource注入</h4><ul><li><p>@Resource注解也可以完成属性注入。</p></li><li><p>和@Autowired注解区别：</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性</li><li>@Autowired注解是Spring框架自己的</li><li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配</strong></li><li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用</strong></li><li>@Resource注解用在属性上、setter方法上</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上</li></ul></li><li><p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>源码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jakarta.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Repeatable;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Repeatable(Resources.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Resource &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Class&lt;?&gt; type() <span class="hljs-keyword">default</span> Object.class;<br><br>    Resource.AuthenticationType <span class="hljs-title function_">authenticationType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Resource.AuthenticationType.CONTAINER;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">shareable</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br><br>    String <span class="hljs-title function_">mappedName</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AuthenticationType</span> &#123;<br>        CONTAINER,<br>        APPLICATION;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">AuthenticationType</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>根据name注入</li></ol><ul><li>修改UserDaoImpl类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserDaoImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository(&quot;myUserDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改UserServiceImpl类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.service;<br><br><span class="hljs-keyword">import</span> com.hanyang.autowired.dao.UserDao;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserServiceImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-comment">//注入Dao</span><br>    <span class="hljs-meta">@Resource(name = &quot;myUserDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao myUserDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service.......&quot;</span>);<br>        myUserDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>name未知注入</li></ol><ul><li>修改UserDaoImpl类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserDaoImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository(&quot;myUserDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改UserServiceImpl类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.service;<br><br><span class="hljs-keyword">import</span> com.hanyang.autowired.dao.UserDao;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserServiceImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-comment">//注入Dao</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao myUserDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service.......&quot;</span>);<br>        myUserDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全注解开发"><a href="#全注解开发" class="headerlink" title="全注解开发"></a>全注解开发</h4><ul><li>写一个配置类来代替配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SpringConfig</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired.config</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 22:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.hanyang&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.autowired;<br><br><span class="hljs-keyword">import</span> com.hanyang.autowired.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.hanyang.autowired.controller.UserController;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestUserController</span><br><span class="hljs-comment"> * Package: com.hanyang.autowired</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/5 - 21:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUserControllerAnno</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//加载配置类</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> context.getBean(UserController.class);<br>        controller.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="手写IoC"><a href="#手写IoC" class="headerlink" title="手写IoC"></a>手写IoC</h3><h4 id="实现Bean创建"><a href="#实现Bean创建" class="headerlink" title="实现Bean创建"></a>实现Bean创建</h4><ol><li><p>搭建模块</p></li><li><p>准备测试需要的bean</p></li></ol><ul><li>创建UserDao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserDao</span><br><span class="hljs-comment"> * Package: com.hanyang.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 15:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserDaoImpl实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.dao.impl;<br><br><span class="hljs-keyword">import</span> com.hanyang.anno.Bean;<br><span class="hljs-keyword">import</span> com.hanyang.dao.UserDao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserDaoImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.dao.impl</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 15:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserService接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserService</span><br><span class="hljs-comment"> * Package: com.hanyang.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 15:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建UserServiceImpl实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.service.impl;<br><br><span class="hljs-keyword">import</span> com.hanyang.anno.Bean;<br><span class="hljs-keyword">import</span> com.hanyang.anno.Di;<br><span class="hljs-keyword">import</span> com.hanyang.dao.UserDao;<br><span class="hljs-keyword">import</span> com.hanyang.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: UserServiceImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.service.impl</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 15:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Di</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service......&quot;</span>);<br>        <span class="hljs-comment">//调用dao方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>定义注解</li></ol><ul><li>bean注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.anno;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Bean</span><br><span class="hljs-comment"> * Package: com.hanyang.anno</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 15:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Bean &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>依赖注入注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.anno;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Di</span><br><span class="hljs-comment"> * Package: com.hanyang.anno</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 15:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Di &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>说明：上面两个注解可以随意取名</li></ul><ol start="4"><li>定义Bean容器接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: ApplicationContext</span><br><span class="hljs-comment"> * Package: com.hanyang.bean</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 16:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>编写注解bean容器接口实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.bean;<br><br><span class="hljs-keyword">import</span> com.hanyang.anno.Bean;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: AnnocationApplicationContext</span><br><span class="hljs-comment"> * Package: com.hanyang.bean</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 16:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">//创建map集合，放bean对象</span><br>    <span class="hljs-keyword">private</span> Map&lt;Class, Object&gt; beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String rootPath;<br><br>    <span class="hljs-comment">//返回对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">//创建有参构造，传递包路径，设置包扫描规则</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1 把.替换成\</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">packagePath</span> <span class="hljs-operator">=</span> basePackage.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>);<br><br>            <span class="hljs-comment">//2 获取包绝对路径</span><br>            Enumeration&lt;URL&gt; urls = Thread.currentThread().getContextClassLoader().getResources(packagePath);<br>            <span class="hljs-keyword">while</span> (urls.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> urls.nextElement();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> URLDecoder.decode(url.getFile(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                <span class="hljs-comment">//获取包前面路径部分</span><br>                rootPath = filePath.substring(<span class="hljs-number">0</span>, filePath.length() - packagePath.length());<br>                <span class="hljs-comment">//包扫描</span><br>                loadBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//包扫描过程，实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBean</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1 判断当前是否文件夹</span><br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-comment">//2 获取文件夹里面所有内容</span><br>            File[] childrenFiles = file.listFiles();<br>            <span class="hljs-comment">//3 判断文件夹里面为空，直接返回</span><br>            <span class="hljs-keyword">if</span> (childrenFiles == <span class="hljs-literal">null</span> || childrenFiles.length == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//4 如果文件夹不为空，遍历文件夹所有内容</span><br>            <span class="hljs-keyword">for</span> (File child : childrenFiles) &#123;<br>                <span class="hljs-comment">//4.1 遍历得到每个File对象，继续判断，如果还是文件夹，递归</span><br>                <span class="hljs-keyword">if</span> (child.isDirectory()) &#123;<br>                    <span class="hljs-comment">//递归</span><br>                    loadBean(child);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//4.2 遍历得到File对象不是文件夹，是文件</span><br>                    <span class="hljs-comment">//4.3 得到包路径+类名称部分-字符串截取</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">pathWithClass</span> <span class="hljs-operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-comment">//4.4 判断当前文件类型是否.class</span><br>                    <span class="hljs-keyword">if</span> (pathWithClass.contains(<span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br>                        <span class="hljs-comment">//4.5 如果是.class类型，把路径\替换成.  把.class去掉</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">allName</span> <span class="hljs-operator">=</span> pathWithClass.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>).replace(<span class="hljs-string">&quot;.class&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>                        <span class="hljs-comment">//4.6 判断类上面是否有注解@Bean，如果有实例化过程</span><br>                        <span class="hljs-comment">//4.6.1 获取类的Class</span><br>                        Class&lt;?&gt; clazz = Class.forName(allName);<br>                        <span class="hljs-comment">//4.6.2 判断不是接口</span><br>                        <span class="hljs-keyword">if</span> (!clazz.isInterface()) &#123;<br>                            <span class="hljs-comment">//4.6.3 判断类上面是否有注解@Bean</span><br>                            <span class="hljs-type">Bean</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> clazz.getAnnotation(Bean.class);<br>                            <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>                                <span class="hljs-comment">//4.6.4 实例化</span><br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.getConstructor().newInstance();<br>                                <span class="hljs-comment">//4.7 把对象实例化之后，放到map集合beanFactory</span><br>                                <span class="hljs-comment">//4.7.1 判断当前类如果有接口，让接口Class作为map的key</span><br>                                <span class="hljs-keyword">if</span> (clazz.getInterfaces().length &gt; <span class="hljs-number">0</span>) &#123;<br>                                    beanFactory.put(clazz.getInterfaces()[<span class="hljs-number">0</span>], instance);<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    beanFactory.put(clazz, instance);<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang;<br><br><span class="hljs-keyword">import</span> com.hanyang.bean.AnnotationApplicationContext;<br><span class="hljs-keyword">import</span> com.hanyang.bean.ApplicationContext;<br><span class="hljs-keyword">import</span> com.hanyang.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestUser</span><br><span class="hljs-comment"> * Package: com.hanyang</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 17:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationApplicationContext</span>(<span class="hljs-string">&quot;com.hanyang&quot;</span>);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(UserService.class);<br>        System.out.println(userService);<br>        userService.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现属性注入"><a href="#实现属性注入" class="headerlink" title="实现属性注入"></a>实现属性注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.bean;<br><br><span class="hljs-keyword">import</span> com.hanyang.anno.Bean;<br><span class="hljs-keyword">import</span> com.hanyang.anno.Di;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: AnnocationApplicationContext</span><br><span class="hljs-comment"> * Package: com.hanyang.bean</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/6 - 16:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">//创建map集合，放bean对象</span><br>    <span class="hljs-keyword">private</span> Map&lt;Class, Object&gt; beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String rootPath;<br><br>    <span class="hljs-comment">//返回对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">//创建有参构造，传递包路径，设置包扫描规则</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1 把.替换成\</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">packagePath</span> <span class="hljs-operator">=</span> basePackage.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>);<br><br>            <span class="hljs-comment">//2 获取包绝对路径</span><br>            Enumeration&lt;URL&gt; urls = Thread.currentThread().getContextClassLoader().getResources(packagePath);<br>            <span class="hljs-keyword">while</span> (urls.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> urls.nextElement();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> URLDecoder.decode(url.getFile(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                <span class="hljs-comment">//获取包前面路径部分</span><br>                rootPath = filePath.substring(<span class="hljs-number">0</span>, filePath.length() - packagePath.length());<br>                <span class="hljs-comment">//包扫描</span><br>                loadBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        <span class="hljs-comment">//属性注入</span><br>        loadDi();<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//包扫描过程，实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBean</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1 判断当前是否文件夹</span><br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-comment">//2 获取文件夹里面所有内容</span><br>            File[] childrenFiles = file.listFiles();<br>            <span class="hljs-comment">//3 判断文件夹里面为空，直接返回</span><br>            <span class="hljs-keyword">if</span> (childrenFiles == <span class="hljs-literal">null</span> || childrenFiles.length == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//4 如果文件夹不为空，遍历文件夹所有内容</span><br>            <span class="hljs-keyword">for</span> (File child : childrenFiles) &#123;<br>                <span class="hljs-comment">//4.1 遍历得到每个File对象，继续判断，如果还是文件夹，递归</span><br>                <span class="hljs-keyword">if</span> (child.isDirectory()) &#123;<br>                    <span class="hljs-comment">//递归</span><br>                    loadBean(child);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//4.2 遍历得到File对象不是文件夹，是文件</span><br>                    <span class="hljs-comment">//4.3 得到包路径+类名称部分-字符串截取</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">pathWithClass</span> <span class="hljs-operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-comment">//4.4 判断当前文件类型是否.class</span><br>                    <span class="hljs-keyword">if</span> (pathWithClass.contains(<span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br>                        <span class="hljs-comment">//4.5 如果是.class类型，把路径\替换成.  把.class去掉</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">allName</span> <span class="hljs-operator">=</span> pathWithClass.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>).replace(<span class="hljs-string">&quot;.class&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>                        <span class="hljs-comment">//4.6 判断类上面是否有注解@Bean，如果有实例化过程</span><br>                        <span class="hljs-comment">//4.6.1 获取类的Class</span><br>                        Class&lt;?&gt; clazz = Class.forName(allName);<br>                        <span class="hljs-comment">//4.6.2 判断不是接口</span><br>                        <span class="hljs-keyword">if</span> (!clazz.isInterface()) &#123;<br>                            <span class="hljs-comment">//4.6.3 判断类上面是否有注解@Bean</span><br>                            <span class="hljs-type">Bean</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> clazz.getAnnotation(Bean.class);<br>                            <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>                                <span class="hljs-comment">//4.6.4 实例化</span><br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.getConstructor().newInstance();<br>                                <span class="hljs-comment">//4.7 把对象实例化之后，放到map集合beanFactory</span><br>                                <span class="hljs-comment">//4.7.1 判断当前类如果有接口，让接口Class作为map的key</span><br>                                <span class="hljs-keyword">if</span> (clazz.getInterfaces().length &gt; <span class="hljs-number">0</span>) &#123;<br>                                    beanFactory.put(clazz.getInterfaces()[<span class="hljs-number">0</span>], instance);<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    beanFactory.put(clazz, instance);<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//属性注入</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadDi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//实例化对象在beanFactory的map集合里</span><br>        <span class="hljs-comment">//1 遍历beanFactory的map集合</span><br>        Set&lt;Map.Entry&lt;Class, Object&gt;&gt; entries = beanFactory.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Class, Object&gt; entry : entries) &#123;<br>            <span class="hljs-comment">//2 获取map集合每个对象（value），每个对象属性获取</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> entry.getValue();<br><br>            <span class="hljs-comment">//获取对象Class</span><br>            Class&lt;?&gt; clazz = obj.getClass();<br><br>            <span class="hljs-comment">//获取每个对象的属性</span><br>            Field[] declaredFields = clazz.getDeclaredFields();<br><br>            <span class="hljs-comment">//3 遍历得到每个对象属性数组，得到每个属性</span><br>            <span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>                <span class="hljs-comment">//4 判断属性上是否有@Di注解</span><br>                <span class="hljs-type">Di</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> field.getAnnotation(Di.class);<br>                <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>                    field.setAccessible(<span class="hljs-literal">true</span>);<br><br>                    <span class="hljs-comment">//5 如果有@Di注解，把对象进行注入</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        field.set(obj, beanFactory.get(field.getType()));<br>                    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面向切面：AOP"><a href="#面向切面：AOP" class="headerlink" title="面向切面：AOP"></a>面向切面：AOP</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li>概念：二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</li></ul><ol><li>静态代理</li></ol><ul><li>创建静态代理类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-comment">// 将被代理的目标对象声明为成员变量</span><br>    <span class="hljs-keyword">private</span> Calculator target;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculatorStaticProxy</span><span class="hljs-params">(Calculator target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-comment">// 附加功能由代理类中的代理方法来实现</span><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br>    <br>        <span class="hljs-comment">// 通过目标对象来实现核心业务逻辑</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">addResult</span> <span class="hljs-operator">=</span> target.add(i, j);<br>    <br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);<br>    <br>        <span class="hljs-keyword">return</span> addResult;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p></blockquote><ol start="2"><li>动态代理</li></ol><ul><li>生产代理对象的工厂类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.aop.example;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: ProxyFactory</span><br><span class="hljs-comment"> * Package: com.hanyang.aop.example</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/7 - 14:31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br>    <span class="hljs-comment">//目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//返回代理对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * newProxyInstance()：创建一个代理实例</span><br><span class="hljs-comment">         * 其中有三个参数：</span><br><span class="hljs-comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span><br><span class="hljs-comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span><br><span class="hljs-comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br><br>            <span class="hljs-comment">//第一个参数：代理对象</span><br>            <span class="hljs-comment">//第二个参数：需要重写目标对象方法</span><br>            <span class="hljs-comment">//第三个参数：method方法里面参数</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">//方法调用之前输出</span><br>                System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class="hljs-string">&quot;，参数：&quot;</span> + Arrays.toString(args));<br>                <span class="hljs-comment">//调用目标方法</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>                <span class="hljs-comment">//方法调用之后输出</span><br>                System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class="hljs-string">&quot;，结果：&quot;</span> + result);<br><br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.aop.example;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCalculator</span><br><span class="hljs-comment"> * Package: com.hanyang.aop.example</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/7 - 16:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建代理对象（动态）</span><br>        <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorImpl</span>());<br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Calculator) proxyFactory.getProxy();<br>        proxy.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AOP概念和术语"><a href="#AOP概念和术语" class="headerlink" title="AOP概念和术语"></a>AOP概念和术语</h3><ul><li>概念：AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li></ul><ol><li>横切关注点</li></ol><ul><li>分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点。</li></ul><ol start="2"><li>通知（增强）</li></ol><ul><li><p><strong>增强，通俗说，就是你想要增强的功能，比如 安全，事务，日志等。</strong></p></li><li><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul></li></ul><ol start="3"><li>切面</li></ol><ul><li>封装通知方法的类</li></ul><ol start="4"><li>目标</li></ol><ul><li>被代理的目标对象</li></ul><ol start="5"><li>代理</li></ol><ul><li>向目标对象应用通知之后创建的代理对象</li></ul><ol start="6"><li>连接点</li></ol><ul><li>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。<strong>通俗说，就是spring允许你使用通知的地方</strong></li></ul><ol start="7"><li>切入点</li></ol><ul><li>定位连接点的方式</li><li>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）</li><li>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句</li><li><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></li><li>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件</li></ul><h3 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h3><h4 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h4><ul><li>动态代理分为JDK动态代理和cglib动态代理</li><li>当目标类有接口的情况使用JDK动态代理和cglib动态代理，没有接口时只能使用cglib动态代理</li><li>JDK动态代理动态生成的代理类会在com.sun.proxy包下，类名为$proxy1，和目标类实现相同的接口</li><li>cglib动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类</li><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</li><li>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：是AOP思想的一种实现。本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ol><li>引入AOP相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring aop依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--spring aspects依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建目标资源</li></ol><ul><li><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br>    <br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br>    <br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br>    <br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br>    <br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>创建切面类</li></ol><ul><li>各种通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.aop.annoaop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: LogAspect</span><br><span class="hljs-comment"> * Package: com.hanyang.aop.annoaop</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/8 - 14:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//切面类</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//IoC容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-comment">//设置切入点和通知类型</span><br>    <span class="hljs-comment">//切入点表达式：execution（访问修饰符 增强方法返回类型 增强方法所在类全路径.方法名称（方法参数））</span><br>    <span class="hljs-comment">//前置 @Before(value = &quot;execution(* com.hanyang.aop.annoaop.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(public int com.hanyang.aop.annoaop.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;Logger-&gt;前置通知，方法名称：&quot;</span> + methodName + <span class="hljs-string">&quot;, 参数：&quot;</span> + Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-comment">//后置 @After()</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.hanyang.aop.annoaop.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger-&gt;后置通知，方法名称：&quot;</span> + methodName);<br>    &#125;<br><br>    <span class="hljs-comment">//返回 @AfterReturning()</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.hanyang.aop.annoaop.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger-&gt;返回通知，方法名称：&quot;</span> + methodName + <span class="hljs-string">&quot;, 返回结果&quot;</span> + result);<br>    &#125;<br><br>    <span class="hljs-comment">//异常 @AfterThrowing()</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.hanyang.aop.annoaop.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger-&gt;返回通知，方法名称：&quot;</span> + methodName + <span class="hljs-string">&quot;, 异常信息&quot;</span> + ex);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕 @Around()</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.hanyang.aop.annoaop.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">throwMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">argString</span> <span class="hljs-operator">=</span> Arrays.toString(args);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知==目标方法之前执行&quot;</span>);<br><br>            <span class="hljs-comment">//调用目标方法</span><br>            result = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知==目标方法返回值之后&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知==目标方法出现异常执行&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知==目标方法执行完毕执行&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.aop.annoaop;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestAop</span><br><span class="hljs-comment"> * Package: com.hanyang.aop.annoaop</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/8 - 14:39</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAop</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> context.getBean(Calculator.class);<br>        calculator.add(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="重用切入点"><a href="#重用切入点" class="headerlink" title="重用切入点"></a>重用切入点</h4><ul><li>声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重用切入点表达式</span><br><span class="hljs-meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>在同一个切面中使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在不同切面中使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h4><ul><li><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul></li></ul><h4 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.hanyang.aop.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loggerAspect&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointCut&quot;</span> </span><br><span class="hljs-tag">                   <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforeMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningMethod&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-returning</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingMethod&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;ex&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-throwing</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:around</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="单元测试：JUnit"><a href="#单元测试：JUnit" class="headerlink" title="单元测试：JUnit"></a>单元测试：JUnit</h2><h3 id="整合Junit5"><a href="#整合Junit5" class="headerlink" title="整合Junit5"></a>整合Junit5</h3><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring对junit的支持相关依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>添加配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.hanyang.spring6.junit5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>添加java类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.junit5;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: User</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.junit5</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/8 - 15:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.junit5;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SpringTestJunit5</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.junit5</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/8 - 16:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:bean.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTestJunit5</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(user);<br>        user.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整合Junit4"><a href="#整合Junit4" class="headerlink" title="整合Junit4"></a>整合Junit4</h3><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.hanyang.spring6.junit4;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringJUnit4Test</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><ul><li>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</li></ul><h4 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h4><ul><li>加入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring jdbc  Spring 持久化层支持jar包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>创建jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring_db?characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li><li><p>配置Spring的配置文件**</p><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 导入外部属性文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 JdbcTemplate --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 装配数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>准备数据库和测试表</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `spring`;<br><br>use `spring`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_emp` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>  `sex` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><h4 id="实现CRUD操作"><a href="#实现CRUD操作" class="headerlink" title="实现CRUD操作"></a>实现CRUD操作</h4><ul><li>测试增删改功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.jdbc;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: JDBCTemplateTest</span><br><span class="hljs-comment"> * Package: com.hanyang.jdbc</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 14:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:bean.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTemplateTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">//查询：返回对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectObject</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        String sql = &quot;SELECT * FROM t_emp WHERE id = ?&quot;;</span><br><span class="hljs-comment">//        Emp empResult = jdbcTemplate.queryForObject(sql, (rs, rowNum) -&gt; &#123;</span><br><span class="hljs-comment">//            Emp emp = new Emp();</span><br><span class="hljs-comment">//            emp.setName(rs.getString(&quot;name&quot;));</span><br><span class="hljs-comment">//            emp.setAge(rs.getInt(&quot;age&quot;));</span><br><span class="hljs-comment">//            emp.setSex(rs.getString(&quot;sex&quot;));</span><br><span class="hljs-comment">//            return emp;</span><br><span class="hljs-comment">//        &#125;, 1);</span><br><span class="hljs-comment">//        System.out.println(empResult);</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM t_emp WHERE id = ?&quot;</span>;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class),<span class="hljs-number">1</span>);<br>        System.out.println(emp);<br>    &#125;<br><br>    <span class="hljs-comment">//查询：返回list集合</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM t_emp&quot;</span>;<br>        List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-comment">//查询：返回单个值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectValue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT count(*) FROM t_emp&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1 添加操作</span><br>        <span class="hljs-comment">//编写sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO t_emp VALUES(NULL,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">//调用jdbcTemplate的方法，传入相关参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-string">&quot;东方不败&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;女&quot;</span>);<br>        System.out.println(rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//2 修改操作</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE t_emp SET name = ? WHERE id = ?&quot;</span>;<br>        <span class="hljs-comment">//调用jdbcTemplate的方法，传入相关参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-string">&quot;林平之666&quot;</span>, <span class="hljs-number">3</span>);<br>        System.out.println(rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//3 删除操作</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE FROM t_emp WHERE id = ?&quot;</span>;<br>        <span class="hljs-comment">//调用jdbcTemplate的方法，传入相关参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-number">3</span>);<br>        System.out.println(rows);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于注解的申明式事务"><a href="#基于注解的申明式事务" class="headerlink" title="基于注解的申明式事务"></a>基于注解的申明式事务</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</li></ul><p><strong>A：原子性(Atomicity)</strong></p><p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p><strong>C：一致性(Consistency)</strong></p><p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p><p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p><p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p><strong>I：隔离性(Isolation)</strong></p><p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p><strong>D：持久性(Durability)</strong></p><p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><h4 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h4><ul><li><p>添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_book` (<br>  `book_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `book_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;图书名称&#x27;</span>,<br>  `price` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;价格&#x27;</span>,<br>  `stock` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;库存（无符号）&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`book_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;围城&#x27;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;操作系统&#x27;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user` (<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>  `balance` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;余额（无符号）&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `t_user`(`user_id`,`username`,`balance`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建组件</p></li></ul><ol><li>创建BookController</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.controller;<br><br><span class="hljs-keyword">import</span> com.hanyang.spring6.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: BookController</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.controller</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 15:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-comment">//买书的方法：图书id和用户id</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>&#123;<br>        <span class="hljs-comment">//调用service方法</span><br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建接口BookService</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: BookService</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 15:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建实现类BookServiceImpl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.service;<br><br><span class="hljs-keyword">import</span> com.hanyang.spring6.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: BookServiceImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.service</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 15:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>        <span class="hljs-comment">//查询图书的价格</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>        <span class="hljs-comment">//更新图书的库存</span><br>        bookDao.updateStock(bookId);<br>        <span class="hljs-comment">//更新用户的余额</span><br>        bookDao.updateBalance(userId, price);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>创建接口BookDao</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: BookDao</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 15:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>创建实现类BookDaoImpl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: BookDaoImpl</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.dao</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 15:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">//根据图书id查询价格</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT price FROM t_book WHERE book_id = ?&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-comment">//更新库存</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE t_book SET stock = stock - 1 WHERE book_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br><br>    <span class="hljs-comment">//更新用户表用户余额</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE t_user SET balance = balance - ? WHERE user_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6;<br><br><span class="hljs-keyword">import</span> com.hanyang.spring6.controller.BookController;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestBook</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 15:48</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:bean.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBook</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookController bookController;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyBook</span><span class="hljs-params">()</span>&#123;<br>        bookController.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="添加事务"><a href="#添加事务" class="headerlink" title="添加事务"></a>添加事务</h4><ol><li><p>在Spring的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    开启事务的注解驱动</span><br><span class="hljs-comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加事务注解</p></li></ol><ul><li><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p> <strong>在BookServiceImpl的buybook()添加注解@Transactional</strong></p></li></ul><ol start="3"><li>观察结果</li></ol><ul><li>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</li></ul><ol start="4"><li>@Transactional注解标识的位置</li></ol><ul><li>@Transactional标识在方法上，则只会影响该方法</li><li>@Transactional标识的类上，则会影响类中所有的方法</li></ul><h4 id="事务相关属性"><a href="#事务相关属性" class="headerlink" title="事务相关属性"></a>事务相关属性</h4><ol><li>只读：设置只读，只能查询，不能修改添加删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    <span class="hljs-comment">//System.out.println(1/0);</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>超时：在设置超时时间之内没有完成，抛出异常回滚</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//超时时间单位秒</span><br><span class="hljs-meta">@Transactional(timeout = 3)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    <span class="hljs-comment">//System.out.println(1/0);</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>回滚策略：设置哪些异常不回滚</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(noRollbackFor = ArithmeticException.class)</span><br><span class="hljs-comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    System.out.println(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>隔离级别：读问题</li></ol><ul><li><p>隔离级别一共有四种：</p><ul><li><p>读未提交：READ UNCOMMITTED</p><p>允许Transaction01读取Transaction02未提交的修改。</p></li><li><p>读已提交：READ COMMITTED、</p><p>要求Transaction01只能读取Transaction02已提交的修改。</p></li><li><p>可重复读：REPEATABLE READ</p><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</p></li><li><p>串行化：SERIALIZABLE</p><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p></li></ul><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th>隔离级别</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="hljs-comment">//使用数据库默认的隔离级别</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="hljs-comment">//读未提交</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="hljs-comment">//读已提交</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="hljs-comment">//可重复读</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="hljs-comment">//串行化</span><br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>传播行为：事务方法之间调用，事务如何使用</li></ol><ul><li><p>一共有七种传播行为：</p><ul><li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<strong>【有就加入，没有就不管了】</strong></li><li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常<strong>【有就加入，没有就抛异常】</strong></li><li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起<strong>【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</strong></li><li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<strong>【不支持事务，存在就挂起】</strong></li><li>NEVER：以非事务方式运行，如果有事务存在，抛出异常<strong>【不支持事务，存在就抛异常】</strong></li><li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】</strong></li></ul></li></ul><h4 id="全注解配置事务"><a href="#全注解配置事务" class="headerlink" title="全注解配置事务"></a>全注解配置事务</h4><ul><li>添加配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SpringConfig</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.config</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 20:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@ComponentScan(&quot;com.hanyang.spring6&quot;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启事务管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring_db?characterEncoding=utf8&amp;useSSL=false&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;jdbcTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6;<br><br><span class="hljs-keyword">import</span> com.hanyang.spring6.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.hanyang.spring6.controller.BookController;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestAnno</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/10 - 20:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAnno</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTxAllAnnotation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookController</span> <span class="hljs-variable">accountService</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;bookController&quot;</span>, BookController.class);<br>        accountService.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于XML的声明式事务"><a href="#基于XML的声明式事务" class="headerlink" title="基于XML的声明式事务"></a>基于XML的声明式事务</h3><ul><li>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span><br><span class="hljs-comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <br>        <span class="hljs-comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="资源操作"><a href="#资源操作" class="headerlink" title="资源操作"></a>资源操作</h2><h3 id="Resources接口"><a href="#Resources接口" class="headerlink" title="Resources接口"></a>Resources接口</h3><ul><li><p>Spring 的 Resource 接口位于 org.springframework.core.io 中。 旨在成为一个更强大的接口，用于抽象对低级资源的访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Resource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStreamSource</span> &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">exists</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReadable</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOpen</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFile</span><span class="hljs-params">()</span>;<br><br>    URL <span class="hljs-title function_">getURL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    URI <span class="hljs-title function_">getURI</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    File <span class="hljs-title function_">getFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    ReadableByteChannel <span class="hljs-title function_">readableChannel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">contentLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">lastModified</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    Resource <span class="hljs-title function_">createRelative</span><span class="hljs-params">(String relativePath)</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    String <span class="hljs-title function_">getFilename</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Resource接口继承了InputStreamSource接口，提供了很多InputStreamSource所没有的方法。InputStreamSource接口，只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InputStreamSource</span> &#123;<br><br>    InputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Resource实现类"><a href="#Resource实现类" class="headerlink" title="Resource实现类"></a>Resource实现类</h3><ul><li><p>Resource 接口是 Spring 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。Resource一般包括这些实现类：UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource</p></li><li><p>UrlResource访问网络资源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.resources;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.UrlResource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlResourceDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAndReadUrlResource</span><span class="hljs-params">(String path)</span>&#123;<br>        <span class="hljs-comment">// 创建一个 Resource 对象</span><br>        <span class="hljs-type">UrlResource</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(path);<br>            <span class="hljs-comment">// 获取资源名</span><br>            System.out.println(url.getFilename());<br>            System.out.println(url.getURI());<br>            <span class="hljs-comment">// 获取资源描述</span><br>            System.out.println(url.getDescription());<br>            <span class="hljs-comment">//获取资源内容</span><br>            System.out.println(url.getInputStream().read());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//访问网络资源</span><br>        loadAndReadUrlResource(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ClassPathResource 访问类路径下资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.resources;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassPathResourceDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAndReadUrlResource</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 创建一个 Resource 对象</span><br>        <span class="hljs-type">ClassPathResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(path);<br>        <span class="hljs-comment">// 获取文件名</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());<br>        <span class="hljs-comment">// 获取文件描述</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());<br>        <span class="hljs-comment">//获取文件内容</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>(in.read(b)!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        loadAndReadUrlResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FileSystemResource 访问文件系统资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.resources;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystemResourceDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAndReadUrlResource</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//相对路径</span><br>        <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>        <span class="hljs-comment">//绝对路径</span><br>        <span class="hljs-comment">//FileSystemResource resource = new FileSystemResource(&quot;C:\\atguigu.txt&quot;);</span><br>        <span class="hljs-comment">// 获取文件名</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());<br>        <span class="hljs-comment">// 获取文件描述</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());<br>        <span class="hljs-comment">//获取文件内容</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>(in.read(b)!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        loadAndReadUrlResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>ServletContextResource</p><p>这是ServletContext资源的Resource实现，它解释相关Web应用程序根目录中的相对路径。它始终支持流(stream)访问和URL访问，但只有在扩展Web应用程序存档且资源实际位于文件系统上时才允许java.io.File访问。无论它是在文件系统上扩展还是直接从JAR或其他地方（如数据库）访问，实际上都依赖于Servlet容器。</p></li><li><p>InputStreamResource</p><p>InputStreamResource 是给定的输入流(InputStream)的Resource实现。它的使用场景在没有特定的资源实现的时候使用(感觉和@Component 的适用场景很相似)。与其他Resource实现相比，这是已打开资源的描述符。 因此，它的isOpen()方法返回true。如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。</p></li><li><p>ByteArrayResource</p><p>字节数组的Resource实现类。通过给定的数组创建了一个ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的InputStreamResource。</p></li></ul><h3 id="ResourceLoader接口"><a href="#ResourceLoader接口" class="headerlink" title="ResourceLoader接口"></a>ResourceLoader接口</h3><ul><li><p>Spring 提供如下两个标志性接口：</p><ul><li><p><strong>ResourceLoader</strong> ：该接口实现类的实例可以获得一个Resource实例。</p></li><li><p><strong>ResourceLoaderAware ：</strong> 该接口实现类的实例将获得一个ResourceLoader的引用。</p></li></ul></li><li><p>在ResourceLoader接口里有如下方法：</p><ul><li><strong>Resource getResource（String location）</strong> ： 该接口仅有这个方法，用于返回一个Resource实例。ApplicationContext实现类都实现ResourceLoader接口，因此ApplicationContext可直接获取Resource实例。</li></ul></li></ul><h3 id="ResourceLoaderAware-接口"><a href="#ResourceLoaderAware-接口" class="headerlink" title="ResourceLoaderAware 接口"></a>ResourceLoaderAware 接口</h3><ul><li>ResourceLoaderAware接口实现类的实例将获得一个ResourceLoader的引用，ResourceLoaderAware接口也提供了一个setResourceLoader()方法，该方法将由Spring容器负责调用，Spring容器会将一个ResourceLoader对象作为该方法的参数传入。</li><li>如果把实现ResourceLoaderAware接口的Bean类部署在Spring容器中，Spring容器会将自身当成ResourceLoader作为setResourceLoader()方法的参数传入。由于ApplicationContext的实现类都实现了ResourceLoader接口，Spring容器自身完全可作为ResorceLoader使用。</li></ul><h3 id="使用Resource-作为属性"><a href="#使用Resource-作为属性" class="headerlink" title="使用Resource 作为属性"></a>使用Resource 作为属性</h3><ul><li>实际上，当应用程序中的 Bean 实例需要访问资源时，Spring 有更好的解决方法：直接利用依赖注入。</li><li><strong>如果 Bean 实例需要访问资源，有如下两种解决方案：</strong><ul><li><strong>代码中获取 Resource 实例</strong></li><li><strong>使用依赖注入</strong></li></ul></li></ul><blockquote><p>对于第一种方式，当程序获取 Resource 实例时，总需要提供 Resource 所在的位置，不管通过 FileSystemResource 创建实例，还是通过 ClassPathResource 创建实例，或者通过 ApplicationContext 的 getResource() 方法获取实例，都需要提供资源位置。这意味着：资源所在的物理位置将被耦合到代码中，如果资源位置发生改变，则必须改写程序。因此，通常建议采用第二种方法，让 Spring 为 Bean 实例<strong>依赖注入</strong>资源。</p></blockquote><h3 id="指定访问策略"><a href="#指定访问策略" class="headerlink" title="指定访问策略"></a>指定访问策略</h3><ul><li><p>不管以怎样的方式创建ApplicationContext实例，都需要为ApplicationContext指定配置文件，Spring允许使用一份或多分XML配置文件。当程序创建ApplicationContext实例时，通常也是以Resource的方式来访问配置文件的，所以ApplicationContext完全支持ClassPathResource、FileSystemResource、ServletContextResource等资源访问方式。</p></li><li><p><strong>ApplicationContext确定资源访问策略通常有两种方法：</strong></p><ul><li><p><strong>使用ApplicationContext实现类指定访问策略</strong></p></li><li><p><strong>使用前缀指定访问策略</strong></p></li></ul></li><li><p>创建ApplicationContext对象时，通常可以使用如下实现类：</p><ul><li><p>ClassPathXMLApplicationContext : 对应使用ClassPathResource进行资源访问</p></li><li><p>FileSystemXmlApplicationContext ： 对应使用FileSystemResource进行资源访问</p></li><li><p>XmlWebApplicationContext ： 对应使用ServletContextResource进行资源访问</p></li></ul></li></ul><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li>国际化也称作i18n，其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。</li></ul><h3 id="Java国际化"><a href="#Java国际化" class="headerlink" title="Java国际化"></a>Java国际化</h3><ol><li>创建子模块spring6-i18n，引入spring依赖</li><li>在resource目录下创建两个配置文件：messages_zh_CN.propertes和messages_en_GB.propertes</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">test</span>=<span class="hljs-string">China test</span><br><span class="hljs-attr">test</span>=<span class="hljs-string">GB test</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.javai18n;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: ResourceI18n</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.javai18n</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/11 - 22:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceI18n</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle1</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;messages&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;zh&quot;</span>, <span class="hljs-string">&quot;CN&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> bundle1.getString(<span class="hljs-string">&quot;test&quot;</span>);<br>        System.out.println(value1);<br><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle2</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;messages&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;en&quot;</span>, <span class="hljs-string">&quot;GB&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> bundle2.getString(<span class="hljs-string">&quot;test&quot;</span>);<br>        System.out.println(value2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring国际化"><a href="#Spring国际化" class="headerlink" title="Spring国际化"></a>Spring国际化</h3><ol><li>创建atguigu_en_US.properties</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">www.hanyang.com</span>=<span class="hljs-string">welcome &#123;0&#125;,时间:&#123;1&#125;</span><br></code></pre></td></tr></table></figure><p>   创建atguigu_zh_CN.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">www.hanyang.com</span>=<span class="hljs-string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建spring配置文件，配置MessageSource</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageSource&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basenames&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hanyang<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.springi18n;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: ResourceI18n</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.springi18n</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/11 - 23:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceI18n</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>        <span class="hljs-comment">//传递动态参数，使用数组形式对应&#123;0&#125; &#123;1&#125;顺序</span><br>        Object[] objs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;hanyang&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString()&#125;;<br><br>        <span class="hljs-comment">//www.atguigu.com为资源文件的key值</span><br>        <span class="hljs-comment">//objs为资源文件value值所需要的参数,Local.CHINA为国际化为语言</span><br>        String str=context.getMessage(<span class="hljs-string">&quot;www.hanyang.com&quot;</span>, objs, Locale.CHINA);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><ul><li><p>在Spring中有多种校验的方式</p><ul><li><p>第一种是通过实现org.springframework.validation.Validator接口，然后在代码中调用这个类</p></li><li><p>第二种是按照Bean Validation方式来进行校验，即通过注解的方式</p></li><li><p>第三种是基于方法实现校验</p></li><li><p>除此之外，还可以实现自定义校验</p></li></ul></li></ul><h3 id="通过Validator接口实现"><a href="#通过Validator接口实现" class="headerlink" title="通过Validator接口实现"></a>通过Validator接口实现</h3><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.5.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建实体类，定义属性，创建对应set和get方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.one;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Person</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.one</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 22:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建类，实现接口，编写校验逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.one;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.Errors;<br><span class="hljs-keyword">import</span> org.springframework.validation.ValidationUtils;<br><span class="hljs-keyword">import</span> org.springframework.validation.Validator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: PersonValidator</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.one</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 22:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Validator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> Person.class.equals(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">//校验规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(Object target, Errors errors)</span> &#123;<br>        <span class="hljs-comment">//name不能为空</span><br>        ValidationUtils.rejectIfEmpty(errors, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name.empty&quot;</span>, <span class="hljs-string">&quot;name is null&quot;</span>);<br>        <span class="hljs-comment">//age不能小于0，不能大于200</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) target;<br>        <span class="hljs-keyword">if</span> (p.getAge() &lt; <span class="hljs-number">0</span>) &#123;<br>            errors.rejectValue(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;age.value.error&quot;</span>,<span class="hljs-string">&quot;age &lt; 0&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.getAge() &gt; <span class="hljs-number">200</span>)&#123;<br>            errors.rejectValue(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;age.value.error.old&quot;</span>,<span class="hljs-string">&quot;age &gt; 200&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.one;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.validation.DataBinder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestPerson</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.one</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 23:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//校验测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建person对象</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        person.setAge(-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//创建person对应databinder</span><br>        <span class="hljs-type">DataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataBinder</span>(person);<br>        <span class="hljs-comment">//设置校验器</span><br>        binder.setValidator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonValidator</span>());<br>        <span class="hljs-comment">//调用方法执行校验</span><br>        binder.validate();<br>        <span class="hljs-comment">//输出校验结果</span><br>        <span class="hljs-type">BindingResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> binder.getBindingResult();<br>        System.out.println(result.getAllErrors());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bean-Validation注解实现"><a href="#Bean-Validation注解实现" class="headerlink" title="Bean Validation注解实现"></a>Bean Validation注解实现</h3><ol><li>创建配置类，配置LocalValidatorFactoryBean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: ValidationConfig</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.two</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 23:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.hanyang.spring6.validator.two&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocalValidatorFactoryBean <span class="hljs-title function_">validator</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalValidatorFactoryBean</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建实体类，定义属性，生成get和set方法，在属性上使用注解设置校验规则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Max;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Min;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: User</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.two</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 23:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Min(0)</span><br>    <span class="hljs-meta">@Max(150)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建校验器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> jakarta.validation.Validator;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: MyValidation1</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.two</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 23:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyValidation1</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validatorByUserOne</span><span class="hljs-params">(User user)</span>&#123;<br>        Set&lt;ConstraintViolation&lt;User&gt;&gt; validate = validator.validate(user);<br>        <span class="hljs-keyword">return</span> validate.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindException;<br><span class="hljs-keyword">import</span> org.springframework.validation.Validator;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: MyValidation2</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.two</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 23:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyValidation2</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validatorByUserTwo</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-type">BindException</span> <span class="hljs-variable">bindException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindException</span>(user,user.getName());<br>        validator.validate(user,bindException);<br>        <span class="hljs-keyword">return</span> bindException.hasErrors();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestUser</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.two</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/12 - 23:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testValidationOne</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);<br>        <span class="hljs-type">MyValidation1</span> <span class="hljs-variable">validation1</span> <span class="hljs-operator">=</span> context.getBean(MyValidation1.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> validation1.validatorByUserOne(user);<br>        System.out.println(message);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testValidationTwo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);<br>        <span class="hljs-type">MyValidation2</span> <span class="hljs-variable">validation2</span> <span class="hljs-operator">=</span> context.getBean(MyValidation2.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> validation2.validatorByUserTwo(user);<br>        System.out.println(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于方法实现校验"><a href="#基于方法实现校验" class="headerlink" title="基于方法实现校验"></a>基于方法实现校验</h3><ol><li>创建配置类，配置MethodValidationPostProcessor</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.three;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: ValidationConfig</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.three</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/13 - 15:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.hanyang.spring6.validator.three&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MethodValidationPostProcessor <span class="hljs-title function_">validationPostProcessor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodValidationPostProcessor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建实体类，使用注解设置校验规则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.three;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: User</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.three</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/13 - 15:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Min(0)</span><br>    <span class="hljs-meta">@Max(150)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>定义Service类，通过注解操作对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.three;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.validation.annotation.Validated;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: MyService</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.three</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/13 - 15:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMethod</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> user.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.three;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestUser</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.three</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/13 - 15:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);<br>        <span class="hljs-type">MyService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> context.getBean(MyService.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        user.setPhone(<span class="hljs-string">&quot;18012345678&quot;</span>);<br>        service.testMethod(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h3><ol><li>自定义校验注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.four;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Constraint;<br><span class="hljs-keyword">import</span> jakarta.validation.Payload;<br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CannotBlank</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.four</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/13 - 15:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123;CannotBlankValidation.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CannotBlank &#123;<br><br>    <span class="hljs-comment">//默认错误信息</span><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;不能包含空格&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>    <span class="hljs-meta">@Documented</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> List &#123;<br>        CannotBlank[] value();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>编写真正的校验类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hanyang.spring6.validator.four;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> jdk.vm.ci.meta.Value;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CannotBlankValidation</span><br><span class="hljs-comment"> * Package: com.hanyang.spring6.validator.four</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: renkelin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2023/6/13 - 15:36</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CannotBlankValidation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;CannotBlank,String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(CannotBlank constraintAnnotation)</span> &#123;<br>        ConstraintValidator.<span class="hljs-built_in">super</span>.initialize(constraintAnnotation);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> &#123;<br>        <span class="hljs-keyword">if</span>(value != <span class="hljs-literal">null</span> &amp;&amp; value.contains(<span class="hljs-string">&quot; &quot;</span>))&#123;<br>            <span class="hljs-comment">//获取默认提示信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">defaultConstraintMessageTemplate</span> <span class="hljs-operator">=</span> context.getDefaultConstraintMessageTemplate();<br>            System.out.println(<span class="hljs-string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);<br>            <span class="hljs-comment">//禁用默认提示信息</span><br>            context.disableDefaultConstraintViolation();<br>            <span class="hljs-comment">//设置提示语</span><br>            context.buildConstraintViolationWithTemplate(<span class="hljs-string">&quot;can not contains blank&quot;</span>).addConstraintViolation();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="提前编译：AOT"><a href="#提前编译：AOT" class="headerlink" title="提前编译：AOT"></a>提前编译：AOT</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><p><strong>JIT， Just-in-time,动态(即时)编译，边运行边编译</strong></p><p>在程序运行时，根据算法计算出热点代码，然后进行 JIT 实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制。JIT 缺点就是编译需要占用运行时资源，会导致进程卡顿。</p></li><li><p><strong>AOT，Ahead Of Time，指运行前编译，预先编译</strong></p><p>AOT 编译能直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，AOT 缺点就是在程序运行前编译会使程序安装的时间增加。</p></li><li><p><strong>简单来讲：</strong>JIT即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而 AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</p></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点：Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验。</p><p>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗<br>可以在程序运行初期就达到最高性能，程序启动速度快。运行产物只有机器码，打包体积小。</p></li><li><p>缺点：由于是静态提前编译，不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如JIT。没有动态能力，同一份产物不能跨平台运行。</p><p>第一种即时编译 (JIT) 是默认模式，Java Hotspot 虚拟机使用它在运行时将字节码转换为机器码。后者提前编译 (AOT)由新颖的 GraalVM 编译器支持，并允许在构建时将字节码直接静态编译为机器码。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backend</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2023/04/29/JavaWeb/"/>
    <url>/2023/04/29/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb最新"><a href="#JavaWeb最新" class="headerlink" title="JavaWeb最新"></a>JavaWeb最新</h1><h2 id="HTML和CSS"><a href="#HTML和CSS" class="headerlink" title="HTML和CSS"></a>HTML和CSS</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>HTML（HyperText Markup Language）：超文本标记语言</p><ul><li>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</li><li>标记语言：由标签构成的语言<ul><li>HTML标签都是<strong>预定义</strong>好的。例如：使用&lt;a&gt;展示超链接，使用&lt;img&gt;展示图片，&lt;video&gt;展示视频。</li><li>HTML代码直接在浏览器中运行，HTML标签由浏览器解析</li></ul></li></ul></li><li><p>CSS（Cascading Style Sheet）：层叠样式表，用于控制页面的样式（表现）。</p></li><li><p>颜色表示形式</p></li></ul><table><thead><tr><th>表示方式</th><th>表示含义</th><th>取值</th></tr></thead><tbody><tr><td>关键字</td><td>预定义的颜色名</td><td>red、green、blue…</td></tr><tr><td>rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rbg(0,0,0)、rbg(255,255,255)、rbg(255,0,0)</td></tr><tr><td>十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000、#ff0000、#cccccc，简写：#000、#ccc</td></tr></tbody></table><h3 id="排版一"><a href="#排版一" class="headerlink" title="排版一"></a>排版一</h3><ol><li>标题标签</li></ol><ul><li>标签：&lt;h1&gt;…&lt;&#x2F;h1&gt;</li><li>注意：HTML标签都是<strong>预定义</strong>好的，不能自己随意定义</li></ul><ol start="2"><li>水平线标签 &lt;hr&gt;</li><li>图片标签  &lt;img src&#x3D;”…” width&#x3D;”…” height&#x3D;”…”&gt;</li></ol><ul><li>绝对路径：绝对磁盘路径</li><li>相对路径：从当前文件开始查找</li></ul><h3 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h3><ol><li>CSS引入方式</li></ol><ul><li>行内样式：&lt;h1 style&#x3D;”…”&gt;</li><li>内嵌样式：&lt;style&gt;…&lt;&#x2F;style&gt;</li><li>外联样式：xxx.css  &lt;link href&#x3D;”…”&gt;</li></ul><ol start="2"><li>颜色表示</li></ol><ul><li>关键字：red、green…</li><li>rgb表示法：rbg(255,0,0)、rbg(134,100,89)</li><li>十六进制：#ff0000、#cccccc、#ccc</li></ul><ol start="3"><li>颜色属性</li></ol><ul><li>color：设置文本内容的颜色</li></ul><h3 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h3><ol><li>&lt;span&gt;标签</li></ol><ul><li>&lt;span&gt;是一个在开发网页时大量会用到的没有语义的布局标签</li><li>特点：一行可以显示多个（组合行内元素），宽度和高度默认由内容展开</li></ul><ol start="2"><li>CSS选择器</li></ol><ul><li>元素选择器：标签名 {…}</li><li>id选择器：#id属性值 {…}</li><li>类选择器：.class属性值 {…}</li><li>优先级：id选择器 &gt; 类选择器 &gt; 元素选择器</li></ul><ol start="3"><li>CSS属性</li></ol><ul><li>color：设置文本的颜色</li><li>font-size：字体大小（注意：记得加px）</li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ol><li>超链接</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">标签: <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br>属性:<br>    href: 指定资源访问的url<br>    target: 指定在何处打开资源链接<br>     _self: 默认值，在当前页面打开<br>     _blank: 在空白页面打开<br></code></pre></td></tr></table></figure><ol start="2"><li>CSS属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">text-decoration: 规定添加到文本的修饰，none表示定义标准的文本<br>color: 定义文本的颜色<br></code></pre></td></tr></table></figure><h3 id="排版二"><a href="#排版二" class="headerlink" title="排版二"></a>排版二</h3><ol><li>音频、视频标签</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>换行、段落标签</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">换行: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> ; 段落: <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>文本加粗标签</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>CSS样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">ling-height: 设置行高<br>text-indent：定义第一个行内容的缩进<br>text-align: 规定元素中的文本的水平对齐方式<br></code></pre></td></tr></table></figure><ol start="5"><li>注意</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">在HTML中无论输入多少个空格，只会显示一个。可以使用空格占位符: <span class="hljs-symbol">&amp;nbsp;</span><br></code></pre></td></tr></table></figure><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><ul><li>盒子：页面中所有的元素（标签），都可以看作是一个<strong>盒子</strong>，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</li><li>盒子模型组成：<strong>内容区域（content）</strong>、<strong>内边距区域（padding）</strong>、<strong>边框区域（border）</strong>、<strong>外边距区域（margin）</strong></li></ul><ol><li>CSS盒子模型</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">组成: 内容（content）、内边距（padding）、边框（border）、外边框（margin）<br></code></pre></td></tr></table></figure><ol start="2"><li>CSS属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">width: 设置宽度<br>height: 设置高度<br>border: 设置边框的属性，如：1px solid #000;<br>padding: 内边距<br>margin: 外边距<br><br>如果只需要设置某一个方位的边框、内边距、外边距，可以在属性名后加上 -位置，如：padding-top、padding-left、padding-right...<br></code></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><ul><li>场景：在网页中以表格（行、列）形式整齐展示数据，如：班级表</li><li>标签：</li></ul><table><thead><tr><th>标签</th><th>描述</th><th>属性&#x2F;备注</th></tr></thead><tbody><tr><td>&lt;table&gt;</td><td>定义表格整体，可以包裹多个 &lt;tr&gt;</td><td>border：规定表格边框的宽度  width：规定表格的宽度  cellspacing：规定单元之间的空间</td></tr><tr><td>&lt;tr&gt;</td><td>表格的行，可以包裹多个 &lt;td&gt;</td><td></td></tr><tr><td>&lt;td&gt;</td><td>表格单元格（普通），可以包裹内容</td><td>如果是表头单元格，可以替换为 &lt;th&gt;</td></tr></tbody></table><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><ul><li><p>场景：在网页中主要负责数据采集功能，如：注册、登录的表单。 </p></li><li><p>标签: &lt;form&gt;</p></li><li><p>表单项标签: 不同类型的input元素、下拉列表、文本域等。</p><ul><li>&lt;input&gt;: 定义表单项，通过type属性控制输入形式</li><li>&lt;select&gt;: 定义下拉列表</li><li>&lt;textarea&gt;: 定义文本域</li></ul></li><li><p>属性：</p><ul><li><strong>action</strong>: 规定表单提交时，向何处发送表单数据，表单提交的URL。</li><li><strong>method</strong>: 规定用于发送表单数据的方式，常见为： GET、POST。<ul><li>GET：表单数据是拼接在url后面的，?username&#x3D;java，url中能携带的表单数据大小是有限制的。</li><li>POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。</li></ul></li></ul></li></ul><h4 id="表单项"><a href="#表单项" class="headerlink" title="表单项"></a>表单项</h4><ul><li>&lt;input&gt;：表单项，通过type属性控制输入形式</li></ul><table><thead><tr><th>type取值</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>text</td><td>默认值，定义单行的输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>date&#x2F;time&#x2F;datetime-local</td><td>定义日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td>number</td><td>定义数字输入框</td></tr><tr><td>email</td><td>定义邮件输入框</td></tr><tr><td>hidden</td><td>定义隐藏域</td></tr><tr><td>submit &#x2F; reset &#x2F; button</td><td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td></tr></tbody></table><ul><li>&lt;select&gt;：定义下拉列表，&lt;option&gt;：定义列表项</li><li>&lt;textarea&gt;：文本域</li></ul><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>HTML-表单项标签</title></head><body><!-- value: 表单项提交的值 --><form action="" method="post">     姓名: <input type="text" name="name"> <br><br>     密码: <input type="password" name="password"> <br><br>      性别: <input type="radio" name="gender" value="1"> 男          <label><input type="radio" name="gender" value="2"> 女 </label> <br><br>     爱好: <label><input type="checkbox" name="hobby" value="java"> java </label>          <label><input type="checkbox" name="hobby" value="game"> game </label>          <label><input type="checkbox" name="hobby" value="sing"> sing </label> <br><br>     图像: <input type="file" name="image">  <br><br>     生日: <input type="date" name="birthday"> <br><br>     时间: <input type="time" name="time"> <br><br>     日期时间: <input type="datetime-local" name="datetime"> <br><br>     邮箱: <input type="email" name="email"> <br><br>     年龄: <input type="number" name="age"> <br><br>     学历: <select name="degree">               <option value="">----------- 请选择 -----------</option>               <option value="1">大专</option>               <option value="2">本科</option>               <option value="3">硕士</option>               <option value="4">博士</option>          </select>  <br><br>     描述: <textarea name="description" cols="30" rows="10"></textarea>  <br><br>     <input type="hidden" name="id" value="1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- 表单常见按钮 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li>JavaScript是一门跨平台、面向对象的脚本语言。是用来控制网页行为的，它能使网页可交互</li></ul><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li>内部脚本：将JS代码定义在HTML页面中<ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任何地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>外部脚本：将JS代码定义在外部JS文件中，然后引入到HTML页面中</p><ul><li>外部JS文件，只包含JS代码，不包含&lt;script&gt;标签</li><li>&lt;script&gt;标签不能自闭合</li></ul></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><ul><li>使用**window.alert()**写入警告框</li><li>使用**document.write()**写入HTML输出</li><li>使用**console.log()**写入浏览器控制台</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//浏览器弹出警告框</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//写入HTML，在浏览器展示</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//写入浏览器控制台</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><ul><li>JavaScript 是一门弱类型语言，变量<strong>可以存放不同类型的值</strong> </li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td>+ , - , * , &#x2F; , % , ++ , –</td></tr><tr><td>赋值运算符</td><td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td></tr><tr><td>比较运算符</td><td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; , || , !</td></tr><tr><td>三元运算符</td><td>条件表达式 ? true_value: false_value</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 函数名(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2.</span>.)&#123;<br>    <span class="hljs-comment">//要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h4><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = [元素列表] ;<br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr[索引] = 值;<br></code></pre></td></tr></table></figure><ul><li>属性</li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th align="left">方法方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><h4 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h4><ul><li>String对象的创建方式有2种</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;…&quot;</span>) ; <span class="hljs-comment">//方式一</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-string">&quot;…&quot;</span> ; <span class="hljs-comment">//方式二</span><br></code></pre></td></tr></table></figure><ul><li>属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符</td></tr><tr><td>indexOf()</td><td>检索字符串</td></tr><tr><td>trim()</td><td>去除字符串两边的空格</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符</td></tr></tbody></table><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><ul><li>定义格式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名 = &#123;<br>    属性名<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>, <br>    属性名<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>,<br>    属性名<span class="hljs-number">3</span>: 属性值<span class="hljs-number">3</span>,<br>    函数名称: <span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>)&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>调用格式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.属性名();<br>对象名.函数名();<br></code></pre></td></tr></table></figure><ul><li>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;key&quot;</span>:value,<br>    <span class="hljs-string">&quot;key&quot;</span>:value,<br>    <span class="hljs-string">&quot;key&quot;</span>:value<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ul><li>Browser Object Model 浏览器对象模型，允许JavaScript与浏览器对话，JavaScript将浏览器的各个组成部分封装为对象</li></ul><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">d地址栏对象</td></tr></tbody></table><h5 id="Windows对象"><a href="#Windows对象" class="headerlink" title="Windows对象"></a>Windows对象</h5><ul><li>属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式</td></tr></tbody></table><h5 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取浏览器地址栏信息</span><br><span class="hljs-title function_">alert</span>(location.<span class="hljs-property">href</span>);<br><span class="hljs-comment">//设置浏览器地址栏信息</span><br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.itcast.cn&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul><li><p>Document Object Model 文档对象模型</p></li><li><p>将标记语言的各个组成部分封装为对应的对象</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul></li><li><p>JavaScript通过DOM，能对HTML进行操作</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul></li></ul><h5 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h5><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li>事件：HTML事件是发生在HTML元素上的“事情”<ul><li>按钮被点击</li><li>鼠标移动到元素上</li><li>按下键盘按键</li></ul></li><li>事件监听：JavaScript可以在事件被侦测到时<strong>执行代码</strong></li></ul><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><ul><li>通过HTML标签中的事件属性进行绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我被点击了!&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过DOM元素属性绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮2&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementBuId</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我被点击了!&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h5><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>Vue是一套<strong>前端框架</strong>，免除原生JavaScript中的DOM操作，简化书写</p></li><li><p>基于<strong>MVVM</strong>(Model View ViewModel)思想，实现数据的<strong>双向绑定</strong></p></li><li><p><a href="https://v2.cn.vuejs.org/">官网</a></p></li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li><strong>指令：</strong>HTML 标签上带有 v- 前缀的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</li></ul><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td>同上</td></tr><tr><td>v-else-if</td><td>同上</td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>vue的生命周期：指的是vue对象从创建到销毁的过程</li><li>vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法</li></ul><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td><strong>mounted</strong></td><td><strong>挂载完成</strong></td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><ul><li>mounted：挂在完成，Vue初始化成功，HTML页面渲染成功。（发送请求到服务端，加载数据）</li></ul><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Asynchronous JavaScript And XML，异步的JavaScript和XML</li><li>作用<ul><li>数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据</li><li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如搜索联想、用户名是否可用的校验等</li></ul></li></ul><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul><li>Axios对原生的Ajax进行了封装，简化书写，快速开发</li><li><a href="https://www.axios-http.cn/">官网</a></li></ul><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><h3 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h3><ul><li><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。</p></li><li><p><a href="http://yapi.smart-xwork.cn/">官网</a></p></li></ul><p>YApi主要提供了2个功能：</p><ul><li>API接口管理：根据需求撰写接口，包括接口的地址，参数，响应等等信息</li><li>Mock服务：模拟真实接口，生成接口的模拟测试数据，用于前端的测试</li></ul><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><p>前端工程化方式的开发，主要包括如下4个特点</p><ul><li>模块化：将js和css等，做成一个个可复用模块</li><li>组件化：我们将UI组件，css样式，js行为封装成一个个的组件，便于管理</li><li>规范化：我们提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</li><li>自动化：项目的构建，测试，部署全部都是自动完成</li></ul><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><ul><li><p>组件：组成网页的部件，例如超链接、按钮、图片、表格、表单等</p></li><li><p><a href="https://element.eleme.cn/#/zh-CN">官网</a></p></li><li><p>安装ElementUI组件库</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install element-ui@<span class="hljs-number">2</span>.<span class="hljs-number">15</span>.<span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><ul><li>引入ElementUI组件库</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br></code></pre></td></tr></table></figure><ul><li>访问官网，复制组件代码</li></ul><h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><ul><li>Vue Router是Vue的官方路由</li><li>组成：<ul><li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li>&lt;router-link&gt;：请求链接组件，浏览器会解析成&lt;a&gt;</li><li>&lt;router-view&gt;：动态视图组件，渲染展示与路由路径对应的组件</li></ul></li></ul><h2 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><p>Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用</p></li><li><p><a href="https://nginx.org/">官网</a></p></li><li><p>部署：将打包好的dist目录下的文件，复制到nginx安装目录的html目录下</p></li><li><p>注意：如果80端口被占用，需要通过<strong>conf&#x2F;nginx.conf</strong>配置文件来修改端口号</p></li></ul><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Maven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具</li><li><a href="https://maven.apache.org/">官网</a></li></ul><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><ul><li>排除依赖：主动断开依赖的资源，被排除的资源无需指定版本</li></ul><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><ul><li><p>可以通过&lt;scope&gt;标签设置其作用范围</p></li><li><p>作用范围：</p></li></ul><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>Maven的生命周期就是为了对所有的构建过程进行抽象和统一</li><li>Maven中有3套<strong>相互独立</strong>的生命周期<ul><li><p>clean：清理工作</p></li><li><p>default：核心工作。如：编译、测试、打包、安装、部署等</p></li><li><p>site：生成报告、发布站点等</p></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/renkelin/my-pic-bed/main/maven.png"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能</li><li><a href="https://spring.io/">官网</a></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li>概念：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则</li><li>特点：</li></ul><ol><li><p>**基于TCP协议: **   面向连接，安全</p><blockquote><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote></li><li><p><strong>基于请求-响应模型:</strong>   一次请求对应一次响应（先请求后响应）</p><blockquote><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote></li><li><p><strong>HTTP协议是无状态协议:</strong>  对于数据没有记忆能力。每次请求-响应都是独立的</p><blockquote><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p><ul><li>缺点:  多次请求间不能共享数据</li><li>优点:  速度快</li></ul></blockquote></li></ol><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器<ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器<ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><table><thead><tr><th align="center">请求方式</th><th align="left">请求说明</th></tr></thead><tbody><tr><td align="center"><strong>GET</strong></td><td align="left">获取资源。向特定的资源发出请求</td></tr><tr><td align="center"><strong>POST</strong></td><td align="left">传输实体主体。向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td></tr><tr><td align="center">OPTIONS</td><td align="left">返回服务器针对特定资源所支持的HTTP请求方式。因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td></tr><tr><td align="center">HEAD</td><td align="left">获得报文首部。HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td></tr><tr><td align="center">PUT</td><td align="left">传输文件。PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td></tr><tr><td align="center">DELETE</td><td align="left">删除文件。请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="center">TRACE</td><td align="left">追踪路径。回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td align="center">CONNECT</td><td align="left">要求用隧道协议连接代理。HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中</td><td>安全性相对高</td></tr></tbody></table><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong> — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td></tr><tr><td>2xx</td><td><strong>成功</strong> — 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong> — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong> — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong> — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><ul><li>200    ok   客户端请求成功</li><li>404  Not Found  请求资源不存在</li><li>500  Internal Server Error  服务端发生不可预期的错误</li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ul><li>Tomcat服务器软件是一个免费的开源的web应用服务器。支持Servlet&#x2F;JSP少量JavaEE规范</li><li><a href="https://tomcat.apache.org/">官网</a></li></ul><h2 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h2><ol><li>原始方式获取请求参数</li></ol><ul><li>Controller方法形参中声明HttpServletRequest对象</li><li>调用对象的getParameter（参数名）</li></ul><ol start="2"><li>SpringBoot中接收简单参数</li></ol><ul><li>请求参数名与方法形参变量名相同</li><li>自动进行类型转换</li></ul><ol start="3"><li>@RequestParam注解</li></ol><ul><li>方法形参名称与请求参数名称不匹配，通过该注解完成映射</li><li>该注解的required属性默认是true，代表请求参数必须传递</li></ul><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ol><li>简单参数</li></ol><ul><li>定义方法形参，请求参数名与形参变量名一致</li><li>如果不一致，通过@RequestParam手动映射</li></ul><ol start="2"><li>实体参数</li></ol><ul><li>请求参数名，与实体对象的属性名一致，会自动接收封装</li></ul><ol start="3"><li>数组集合参数</li></ol><ul><li>数组：请求参数名与数组名一致，直接封装</li><li>集合：请求参数名与集合名一致，@RequestParam绑定关系</li></ul><ol start="4"><li>日期参数</li></ol><ul><li>@DataTimeFormat</li></ul><ol start="5"><li>JSON参数</li></ol><ul><li>@RequestBody</li></ul><ol start="6"><li>路径参数</li></ol><ul><li>@PathVariable</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><ol><li>@ResponseBody</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">位置：Controller类上/方法上<br>作用：将方法返回值直接响应，若返回值类型是实体对象/集合，转<span class="hljs-built_in">JSON</span>格式响应<br></code></pre></td></tr></table></figure><ol start="2"><li>统一响应结果</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Result(<span class="hljs-params">code</span>、<span class="hljs-params">msg</span>、<span class="hljs-params">data</span>)</span><br></code></pre></td></tr></table></figure><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据</li><li>service：业务逻辑层，处理具体的业务逻辑</li><li>dao：数据访问层(Data Access Object)（持久层），负责数据访问操作，包括数据的增删改查</li></ul><h3 id="IOC-DL"><a href="#IOC-DL" class="headerlink" title="IOC-DL"></a>IOC-DL</h3><ul><li>控制反转：Inversion Of Control，简称IOC。对象的创建控制权有程序自身转移到外部（容器），这种思想称为控制反转</li><li>依赖注入：Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入</li><li>Bean对象：IOC容器中创建、管理的对象，称之为bean</li></ul><h4 id="Bean的声明"><a href="#Bean的声明" class="headerlink" title="Bean的声明"></a>Bean的声明</h4><ul><li>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一</li></ul><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><p>注意事项: </p><blockquote><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller</li></ul></blockquote><h4 id="依赖注入的注解"><a href="#依赖注入的注解" class="headerlink" title="依赖注入的注解"></a>依赖注入的注解</h4><ul><li>@Autowired：默认按照类型自动装配</li><li>如果同类型的bean存在多个<ul><li>@Primary</li><li>@Autowired + @Qualifier(“bean的名称”)</li><li>@Resource(name &#x3D; “bean的名称”)</li></ul></li></ul><h4 id="Resouce与-Autowired区别"><a href="#Resouce与-Autowired区别" class="headerlink" title="@Resouce与@Autowired区别"></a>@Resouce与@Autowired区别</h4><ul><li>@Autowired是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired默认按照类型注入，而@Resource默认按照名称注入</li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>数据库：DataBase（DB），是存储和管理数据的仓库</li><li>数据库管理系统：DataBase Management System（DBMS），操纵和管理数据库的大型软件</li><li>SQL：Structured Query Lanaguage，操作关系型数据库的编程语言，定义了一套操作关系型数据库统一<strong>标准</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u用户名 -<span class="hljs-selector-tag">p</span>密码 <span class="hljs-selector-attr">[-h数据库服务器的IP地址 -P端口号]</span><br></code></pre></td></tr></table></figure><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>SQL语句通常被分为四大类</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition  Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation  Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control  Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ol><li>查询</li></ol><ul><li>查询所有数据库：show databases;</li><li>查询当前数据库：select databases;</li></ul><ol start="2"><li>使用</li></ol><ul><li>使用数据库：use 数据库名；</li></ul><ol start="3"><li>创建</li></ol><ul><li>创建数据库：create database[if not exists] 数据库名;</li></ul><ol start="4"><li>删除</li></ol><ul><li>删除数据库：drop database[if exists] 数据库名;</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><ul><li>表结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table  表名(<br>字段1  字段1类型 [约束]  [comment  字段1注释 ],<br>字段2  字段2类型 [约束]  [comment  字段2注释 ],<br>......<br>字段n  字段n类型 [约束]  [comment  字段n注释 ] <br>) [ comment  表注释 ] ;<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><h5 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td><strong>TINYINT</strong></td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td><strong>INT&#x2F;INTEGER</strong></td><td>4bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td><strong>BIGINT</strong></td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td></td></tr></tbody></table><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td><strong>CHAR</strong></td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td><strong>VARCHAR</strong></td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td><strong>DATE</strong></td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td><strong>DATETIME</strong></td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul><li><p>向指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 (字段名1, 字段名2) values (值1, 值2);<br></code></pre></td></tr></table></figure></li><li><p>全部字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 values (值1, 值2, ...);<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据（指定字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 (字段名1, 字段名2) values (值1, 值2), (值1, 值2);<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据（全部字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名 values (值1, 值2, ...), (值1, 值2, ...);<br></code></pre></td></tr></table></figure></li><li><p>Insert操作的注意事项：</p></li></ul><ol><li><p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的</p></li><li><p>字符串和日期型数据应该包含在引号中</p></li><li><p>插入的数据大小，应该在字段的规定范围内</p></li></ol><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span> , 字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span> , .... [<span class="hljs-keyword">where</span> 条件] ;<br></code></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名  [<span class="hljs-keyword">where</span>  条件] ;<br></code></pre></td></tr></table></figure><ul><li>注意事项:</li></ul><ol><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</li><li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可</li><li>当进行删除全部数据操作时，会提示询问是否确认删除所有数据，直接点击Execute即可</li></ol><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>字段列表<br>FROM<br>表名列表<br>WHERE<br>条件列表<br>GROUP  BY<br>分组字段列表<br>HAVING<br>分组后条件列表<br>ORDER BY<br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><ul><li><p>查询多个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段1, 字段2, 字段3 from  表名;<br></code></pre></td></tr></table></figure></li><li><p>查询所有字段（通配符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select *  from  表名;<br></code></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ]  from  表名;<br></code></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct 字段列表 from  表名;<br></code></pre></td></tr></table></figure></li></ul><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表名 where 条件列表 ; -- 条件列表：意味着可以有多个条件<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between …  and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  聚合函数(字段列表)  from  表名 ;<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><ul><li>注意</li></ul><blockquote><ol><li><p>null值不参与所有聚合函数运算</p></li><li><p>统计数量可以使用：count()，count(字段)，count(常量)，推荐使用count(*)</p></li></ol></blockquote><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表  from  表名  [where 条件]  group by 分组字段名  [having 分组后过滤条件];<br></code></pre></td></tr></table></figure><ul><li>where与having区别</li></ul><ol><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ol><ul><li>注意</li></ul><blockquote><ol><li><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p></li><li><p>执行顺序：where &gt; 聚合函数 &gt; having</p></li></ol></blockquote><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><ul><li>排序方式：<ul><li>ASC ：升序（默认值）</li><li>DESC：降序</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  字段列表  <br>from   表名   <br>[where  条件列表] <br>[group by  分组字段 ] <br>order  by  字段1  排序方式1 , 字段2  排序方式2 … ;<br></code></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表名 limit 起始索引, 查询记录数 ;<br></code></pre></td></tr></table></figure><ul><li>注意</li></ul><blockquote><ol><li><p>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</p></li><li><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</p></li><li><p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</p></li></ol></blockquote><h3 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h3><p>在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li><p>一对多(多对一)</p></li><li><p>多对多</p></li><li><p>一对一</p></li></ul><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li>物理外键和逻辑外键<ul><li><p>物理外键</p><ul><li>概念：使用foreign key定义外键关联另外一张表</li><li>缺点：<ul><li>影响增、删、改的效率（需要检查外键关系）</li><li>仅用于单节点数据库，不适用与分布式、集群场景</li><li>容易引发数据库的死锁问题，消耗性能</li></ul></li></ul></li><li><p>逻辑外键</p><ul><li>概念：在业务层逻辑中，解决外键关联</li><li>通过逻辑外键，就可以很方便的解决上述问题</li></ul></li></ul></li></ul><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><ul><li>指从多张表中查询数据</li><li>笛卡尔乘积是指在数学中，两个集合（A集合和B集合）的所有组合情况。<strong>在多表查询时，需要消除无效的笛卡尔积</strong></li></ul><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><ul><li>隐式内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1, 表2 where 条件 ... ;<br></code></pre></td></tr></table></figure><ul><li>显示内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 [ inner ] join 表2 on 连接条件 ... ;<br></code></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>左外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 left [ outer ] join 表2 on 连接条件 ... ;<br></code></pre></td></tr></table></figure><ul><li>右外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 right [ outer ] join 表2 on 连接条件 ... ;<br></code></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><h5 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h5><ul><li>SQL语句中嵌套select语句，称为嵌套查询，又称子查询</li><li>形式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t1 where column1 = (select column1 from t2 ...);<br></code></pre></td></tr></table></figure><ul><li>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select的任何一个，最常见的是select</li></ul><h5 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h5><ul><li>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式</li><li>常见的操作符：&#x3D;  &lt;&gt;  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;</li></ul><h5 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h5><ul><li>子查询返回的结果是一列（可以是多行）</li><li>常见的操作符：in、not in等</li></ul><h5 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h5><ul><li>子查询返回的结果是一行（可以是多列）</li><li>常见的操作符：&#x3D;  &lt;&gt;  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;</li></ul><h5 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h5><ul><li>子查询返回的结果是多行多列，常作为临时表</li><li>常用的操作符：in</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，<strong>要么同时成功，要么同时失败</strong></li><li>注意：默认MySQL的事务是自动提交的，当执行一条DML语句，MySQL会立即隐式的提交事务</li></ul><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul><li>开启事务：start transaction; &#x2F;begin;</li><li>提交事务：commit;</li><li>回滚事务：rollback;</li></ul><h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><ul><li>原子性：事务时不可分割的最小单元，要么全部成功，要么全部失败</li><li>一致性：事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性：事务一旦提交或回滚，对数据库中的数据的改变就是永久的</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li><p>帮助数据库<strong>高效获取数据</strong>的<strong>数据结构</strong></p></li><li><p>优缺点</p><ul><li>优点<ul><li>提高数据查询到效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗</li></ul></li><li>缺点<ul><li>索引会占用存储空间</li><li>索引大大提高了查询效率，同时却也降低的insert、update、delete的效率</li></ul></li></ul></li></ul><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>B+ Tree(多路平衡搜索树)</li></ul><p><img src="https://raw.githubusercontent.com/renkelin/my-pic-bed/main/B%2BTree.png"></p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create [unique] index 索引名 on 表名(字段名...);<br></code></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show index from 表名;<br></code></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop index 索引名 on 表名;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>主键字段，在建表时，会自动创建主键索引</li><li>添加唯一约束时，数据库实际上会添加唯一索引</li></ul></li></ul><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>MyBatis是一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发。</li><li><a href="https://mybatis.org/mybatis-3/zh/index.html">官网</a></li></ul><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><ul><li>创建SpringBoot工程、数据库表、实体类User</li><li>引入Mybatis相关依赖，配置Mybatis(数据库连接信息)</li><li>编写SQL语句(注解&#x2F;XML)</li></ul><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><ul><li><p>是个容器，负责分配、管理数据库连接(Connection)</p></li><li><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p></li><li><p>释放空闲时间超过最大空闲时间的连接，避免因为没有释放连接而引起的数据库连接遗漏</p></li><li><p>标准接口：DataSource</p><ul><li>获取连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></table></figure></li></ul><h4 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h4><ul><li>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器，并可以自动化生成日志变量，简化java开发，提高效率</li></ul><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的  toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td></tr><tr><td><strong>@Data</strong></td><td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td><strong>@NoArgsConstructor</strong></td><td>为实体类生成无参的构造器方法</td></tr><tr><td><strong>@AllArgsConstructor</strong></td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from emp where id = 17;<br></code></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><ul><li><p>注意：如果mapper接口方法形参只有一个普通类型的参数，#{…}里面的属性名可以随便写，如：#{id}、#{value}</p></li><li><p>预编译SQL</p></li></ul><blockquote><p>性能更高</p><p>更安全(防止SQL注入)</p><p>SQL注入是通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行<strong>攻击</strong>的方法</p></blockquote><h5 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h5><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values(&#x27;Tom&#x27;,&#x27;汤姆&#x27;,1,&#x27;1.jpg&#x27;,2,&#x27;2012-12-31&#x27;,2,&#x27;2022-12-31 10:00:00&#x27;,&#x27;2022-12-31 10:00:00&#x27;)<br></code></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert int emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values(#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><ul><li>主键返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Options(keyProperty = &quot;id&quot;, useGeneratedKeys = true)</span><br></code></pre></td></tr></table></figure><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update emp set username = &#x27;xiaoming&#x27;, name = &#x27;小明&#x27;, gender = 1, image = &#x27;1.jpg&#x27;, job = 2, entrydate = &#x27;2012-01-01&#x27;, dept_id = 2, update_time = &#x27;2022-10-01 12:12:12&#x27; where id = 17;<br></code></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&quot;update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><h6 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h6><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp;<br></code></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><ul><li>数据封装(<strong>开启驼峰命名</strong>)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 在application.properties中添加：</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h6 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h6><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from emp where name like &#x27;%张%&#x27; and gender = 1 and entrydate between &#x27;2010-01-01&#x27; and &#x27;2020-01-01&#x27; order by update_time desc;<br></code></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from emp where name like &#x27;%$&#123;name&#125;%&#x27; and gender = #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><ul><li>解决SQL注入问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><h5 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h5><ul><li><p>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</p></li><li><p>XML映射文件的namespace属性为Mapper接口全限定名一致</p></li><li><p>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</p></li><li><p>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句</p></li></ul><h5 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h5><p><code>&lt;if&gt;</code>：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL</p><p><code>&lt;where&gt;</code>只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</p><p><code>&lt;set&gt;</code>：动态的在SQL语句中插入set关键字，并会删掉额外的逗号。（用于update语句中</p><h6 id=""><a href="#" class="headerlink" title="&lt;foreach&gt;"></a>&lt;foreach&gt;</h6><ul><li>SQL语句：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from emp where id in (1,2,3);<br></code></pre></td></tr></table></figure><ul><li>Mapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>XML映射文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;集合名称&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;集合遍历出来的元素/项&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;每一次遍历使用的分隔符&quot;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;遍历开始前拼接的片段&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;遍历结束后拼接的片段&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h6><ul><li><p><code>&lt;sql&gt;</code>：定义可重用的SQL片段</p></li><li><p><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</p></li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ol><li>前端页面三要素</li></ol><ul><li>表单项 type &#x3D; “type”</li><li>表单提交方式 post</li><li>表单的enctype属性 multipart&#x2F;form-data</li></ul><ol start="2"><li>服务端接收文件</li></ol><ul><li>MutipartFile</li></ul><h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><ul><li>在服务器本地磁盘上创建images目录，用来存储上传的文件（例：E盘创建images目录）</li><li>使用MultipartFile类提供的API方法，把临时文件转存到本地磁盘目录下</li></ul><p>MultipartFile 常见方法：</p><table><thead><tr><th>方法</th><th>注释</th></tr></thead><tbody><tr><td>String  getOriginalFilename();</td><td>获取原始文件名</td></tr><tr><td>void  transferTo(File dest);</td><td>将接收的文件转存到磁盘文件中</td></tr><tr><td>long  getSize();</td><td>获取文件的大小，单位：字节</td></tr><tr><td>byte[]  getBytes();</td><td>获取文件内容的字节数组</td></tr><tr><td>InputStream  getInputStream();</td><td>获取接收到的文件内容的输入流</td></tr></tbody></table><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置单个文件最大上传大小</span><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure><h4 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h4><ul><li>Bucket：存储空间是用户用于存储对象（Object，文件）的容器，索引的对象都必须隶属于某个存储空间</li><li>SDK：Software Development Kit的缩写，软件开发工具包，包括辅助软件开发的依赖（jar包）、代码示例等，都可以叫做SDK</li></ul><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>accessKeyId</td><td>阿里云账号AccessKey</td></tr><tr><td>accessKeySecret</td><td>阿里云账号AccessKey对应的秘钥</td></tr><tr><td>bucketName</td><td>Bucket名称</td></tr><tr><td>objectName</td><td>对象名称，在Bucket中存储的对象的名称</td></tr><tr><td>filePath</td><td>文件路径</td></tr></tbody></table><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><ul><li>XML(臃肿)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>127.0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>properties(层级结构不清晰)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">server.address</span>=<span class="hljs-string">127.0.0.1</span><br></code></pre></td></tr></table></figure><ul><li>yml&#x2F;yaml(简洁，<strong>推荐</strong>)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><blockquote><p>@Value：只能一个一个的进行外部属性的注入@configurationProperties：可以批量的将外部的属性配置注入到bean对象的属性中</p></blockquote><h3 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h3><h4 id="登录标记"><a href="#登录标记" class="headerlink" title="登录标记"></a>登录标记</h4><ul><li>用户登录成功之后，每一次请求中，都可以获取到该标记</li></ul><h4 id="统一拦截"><a href="#统一拦截" class="headerlink" title="统一拦截"></a>统一拦截</h4><ul><li>过滤器Filter</li><li>拦截器Interceptor</li></ul><h4 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h4><ul><li><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到一方断开连接，会话结束。一次会话中可以包含<strong>多次</strong>请求和响应</p></li><li><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次绘画的多次请求间<strong>共享数据</strong></p></li><li><p>会话跟踪方案：</p><ul><li>客户端会话跟踪技术：Cookie</li><li>服务端会话跟踪技术：Session</li><li>令牌技术</li></ul></li></ul><h5 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h5><ul><li><p>Cookie</p><ul><li>优点：<ul><li>HTTP协议中支持的技术</li></ul></li><li>缺点：<ul><li>移动端APP无法使用Cookie</li><li>不安全，用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul></li><li><p>Session</p><ul><li>优点：<ul><li>存储在服务器，安全</li></ul></li><li>缺点：<ul><li>服务器集群环境下无法直接使用Session</li><li>Cookie的缺点</li></ul></li></ul></li><li><p>令牌技术</p><ul><li>优点：<ul><li>支持PC端、移动端</li><li>解决集群环境下的认证问题</li><li>减轻服务器端存储压力</li></ul></li><li>缺点：<ul><li>需要自己实现</li></ul></li></ul></li></ul><h4 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><ul><li><p>全称：Json Web Token <a href="https://jwt.io/">官网</a></p></li><li><p>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在这些信息是可靠的</p></li><li><p>组成：</p><ul><li><p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：{“alg”:”HS256”,”type”:”JWT”}</p></li><li><p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：{“id”:”1”,”username”:”Tom”}</p></li><li><p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来</p></li></ul></li><li><p>场景：登录认证</p><ul><li>登录成功后，生成令牌</li><li>后续每个请求，携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理</li></ul></li></ul><h5 id="生成和校验"><a href="#生成和校验" class="headerlink" title="生成和校验"></a>生成和校验</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JWT依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>生成令牌</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">genJwt</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;String,Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    claims.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>    claims.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>    .setClaims(claims) <span class="hljs-comment">//自定义内容(载荷)          </span><br>    .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itheima&quot;</span>) <span class="hljs-comment">//签名算法        </span><br>    .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">24</span>*<span class="hljs-number">3600</span>*<span class="hljs-number">1000</span>)) <span class="hljs-comment">//有效期   </span><br>    .compact();<br><br>System.out.println(jwt);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>解析令牌</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseJwt</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>        .setSigningKey(<span class="hljs-string">&quot;itheima&quot;</span>)<span class="hljs-comment">//指定签名密钥（必须保证和生成令牌时使用相同的签名密钥）</span><br>        .parseClaimsJws(<span class="hljs-string">&quot;&quot;</span>)<br>        .getBody();<br>    System.out.println(claims);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><ul><li>Filter表示过滤器，是 JavaWeb三大组件(Servlet、Filter、Listener)之一</li><li>过滤器可以把对资源的请求<strong>拦截</strong>下来，从而实现一些特殊的功能</li><li>过滤器一般完成一些<strong>通用</strong>的操作，比如：登录校验、统一编码处理、敏感字符处理等</li></ul><h5 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h5><ul><li><p>定义：实现Filter接口</p></li><li><p>配置：@WebFilter(urlPatterns&#x3D;”&#x2F;“)</p><p>​@ServletComponentScan</p></li></ul><h5 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h5><ul><li>Filter可以根据需求，配置不同的拦截资源路径</li></ul><table><thead><tr><th>拦截路径</th><th>urlPattern值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问&#x2F;login路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><h5 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h5><ul><li><p>介绍：一个web应用中，可以配置多个过滤器，形成一个<strong>过滤器链</strong></p></li><li><p>顺序：注解配置的Filter，优先级时按照过滤器类名（字符串）的自然排序</p></li></ul><h4 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h4><ul><li>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring框架提供，用来动态拦截控制器方法的执行</li><li>作用：拦截请求，在指定方法调用后，根据业务需要执行预先设定的代码</li></ul><h5 id="拦截路径-1"><a href="#拦截路径-1" class="headerlink" title="拦截路径"></a>拦截路径</h5><ul><li>interceptor可以根据需求，配置不同的拦截资源路径</li></ul><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr></tbody></table><h4 id="Filter与Interceptor区别"><a href="#Filter与Interceptor区别" class="headerlink" title="Filter与Interceptor区别"></a>Filter与Interceptor区别</h4><ul><li>接口范围不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口</li><li>拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只会拦截Spring环境中的资源</li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>全局异常处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">ex</span><span class="hljs-params">(Exception ex)</span>&#123;<br>        ex.printStackTrace();<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;操作失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><h4 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h4><ul><li>注解：@Transactional</li><li>位置：业务（service）层的方法、类、接口上</li><li>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常，回滚事务</li></ul><h5 id="rollbackFor属性"><a href="#rollbackFor属性" class="headerlink" title="rollbackFor属性"></a>rollbackFor属性</h5><ul><li>默认情况下，只有出现RuntimeException才回滚异常</li></ul><h5 id="propagation属性"><a href="#propagation属性" class="headerlink" title="propagation属性"></a>propagation属性</h5><ul><li>事务传播行为：指当一个事务被另一个事务方法调用时，这个事务方法应该如何进行事务控制</li></ul><table><thead><tr><th><strong>属性值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr><tr><td>…</td><td></td></tr></tbody></table><ul><li>REQUIRED：大部分情况下用该传播行为即可</li><li>REQUIRES_NEW：不希望事务之间相互影响，可以使用该传播行为。比如：下单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功</li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="入门-2"><a href="#入门-2" class="headerlink" title="入门"></a>入门</h4><ul><li>Aspect Oriented Progiamming（面向切面编程），就是面向特定方法编程</li><li>实现：<ul><li>动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程</li></ul></li></ul><p><strong>AOP程序：TimeAspect</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//当前类为切面类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeAspect</span> &#123;<br><br>    <span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span> <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordTime</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//记录方法执行开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//执行原始方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pjp.proceed();<br><br>        <span class="hljs-comment">//记录方法执行结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//计算方法执行耗时</span><br>        log.info(pjp.getSignature()+<span class="hljs-string">&quot;执行耗时: &#123;&#125;毫秒&quot;</span>,end-begin);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul><li>连接点：Joinpoint，可以被AOP控制的方法（暗含方法执行时的相关信息）</li><li>通知：Advice，指哪些重复的逻辑，就是共性功能（最终体现为一个方法）</li><li>切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</li><li>切面：Aspect，描述通知与切入点的对应关系（通知+切入点）</li><li>目标对象：Target，通知所应用的对象</li></ul><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><ul><li><p><strong>@Around</strong>：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</p></li><li><p>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</p></li><li><p>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</p></li><li><p>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</p></li><li><p>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</p></li><li><p>注意</p><ul><li>@Around环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值</li></ul></li></ul><h4 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h4><ul><li>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行</li><li>不同切面类中，默认按照切面类的<strong>类名字母排序</strong><ul><li>目标方法前的通知方法：字母排名靠前的先执行</li><li>目标方法后的通知方法：字母排名靠前的后执行</li></ul></li><li>用**@Order(数字)加在切面类上来控制顺序**<ul><li>目标方法前的通知方法：数字小的先执行</li><li>目标方法后的通知方法：数字小的后执行</li></ul></li></ul><h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><h5 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h5><ul><li>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) <span class="hljs-keyword">throws</span> 异常?)<br></code></pre></td></tr></table></figure><ul><li><p>其中带<code>?</code>的表示可以省略的部分</p><ul><li>访问修饰符：可省略（比如: public、protected）</li><li>包名.类名： 可省略</li><li>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</li></ul></li><li><p>可以使用通配符描述切入点</p><ul><li><code>*</code> ：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.*.service.*.update*(*))<br></code></pre></td></tr></table></figure><ul><li><code>..</code> ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima..DeptService.*(..))<br></code></pre></td></tr></table></figure></li><li><p>根据业务需要，可以使用且（&amp;&amp;）、或（||）、非（！）来组合比较复杂的切入点表达式</p></li><li><p>切入点表达式的书写建议：</p><ul><li>所有业务<strong>方法名</strong>在<strong>命名</strong>时尽量<strong>规范</strong>，方便切入点表达式快速匹配。如：查询类方法都是 find 开头，更新类方法都是update开头</li><li>描述切入点方法通常<strong>基于接口描述</strong>，而不是直接描述实现类，<strong>增强拓展性</strong></li><li>在满足业务需要的前提下，<strong>尽量缩小切入点的匹配范围</strong>。如：包名匹配尽量不使用 ..，使用 * 匹配单个包</li></ul></li></ul><h5 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h5><ul><li><p>切入点表达式，用于匹配标识有特定注解的方法</p></li><li><p>@annotation(注解全类名)</p></li></ul><h4 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h4><ul><li><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等</p><ul><li><p>对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint类型</p></li><li><p>对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型</p></li></ul></li></ul><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li><p>虽然SpringBoot支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置<strong>（yml是主流）</strong></p></li><li><p>SpringBoot除了支持配置文件属性配置，还支持<strong>Java系统属性</strong>和<strong>命令行参数</strong>的方式进行属性配置</p><ul><li>Java系统属性（格式： -Dkey&#x3D;value）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Dserver.port=9000<br></code></pre></td></tr></table></figure><ul><li>命令行参数（格式：–key&#x3D;value）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--server.port=10010<br></code></pre></td></tr></table></figure></li><li><p>执行Java指令，运行jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Dserver.port=9000 -jar XXXXX.jar --server.port=10010<br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>SpringBoot项目在进行打包时，需要引入插件<strong>spring-boot-maven-plugin</strong></li></ul></li></ul><table><thead><tr><th>优先级(从低到高)</th></tr></thead><tbody><tr><td>application.yaml（忽略）</td></tr><tr><td>application.yml</td></tr><tr><td>application.properties</td></tr><tr><td>java系统属性（-Dxxx&#x3D;xxx）</td></tr><tr><td>命令行参数（–xxx&#x3D;xxx）</td></tr></tbody></table><h4 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h4><h5 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h5><ul><li><p>默认情况下，Spring项目启动时，会把bean都创建好放在IOC容器中</p><ul><li><p>根据name获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span><br></code></pre></td></tr></table></figure></li><li><p>根据类型获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span><br></code></pre></td></tr></table></figure></li><li><p>根据name获取bean（带类型转换）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, Class&lt;T&gt; requiredType)</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意</p><ul><li>【Spring项目启动时，会把bean都创建好】还会受到作用域及延迟初始化影响，主要针对于默认的单例，非延迟加载的bean而言</li></ul></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2ApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext; <span class="hljs-comment">//IOC容器对象</span><br><br>    <span class="hljs-comment">//获取bean对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBean</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//根据bean的名称获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> (DeptController) applicationContext.getBean(<span class="hljs-string">&quot;deptController&quot;</span>);<br>        System.out.println(bean1);<br><br>        <span class="hljs-comment">//根据bean的类型获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> applicationContext.getBean(DeptController.class);<br>        System.out.println(bean2);<br><br>        <span class="hljs-comment">//根据bean的名称 及 类型获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean3</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;deptController&quot;</span>, DeptController.class);<br>        System.out.println(bean3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h5><ul><li><p>在Spring中支持五种作用域，后三种在web环境才生效：</p><table><thead><tr><th><strong>作用域</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>singleton</strong></td><td>容器内同名称的bean只有一个实例（单例）（默认）</td></tr><tr><td><strong>prototype</strong></td><td>每次使用该bean时会创建新的实例（非单例）</td></tr><tr><td>request</td><td>每个请求范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>session</td><td>每个会话范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>application</td><td>每个应用范围内会创建新的实例（web环境中，了解）</td></tr></tbody></table></li><li><p>可以通过@Scope注解来配置作用域</p></li><li><p>注意:</p><ul><li>默认singleton的bean，在容器启动时被创建，可以使用@Lazy注解来延迟初始化（延迟到第一次使用）</li><li>prototype的bean，每一次使用该bean的时候都会创建一个新的实例</li><li>实际开发中，绝大部分的bean是单例的，大部分bean不需要配置scope属性</li></ul></li></ul><h5 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h5><ul><li><p>如果要管理的bean对象来自于第三方（不是自己定义的），无法使用@Component及衍生注解声明bean的，需要用到@Bean注解</p></li><li><p>若要管理第三方bean对象，建议对这些bean集中分类配置，可以通过@Configuration注解声明一个配置类</p></li><li><p>代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类  (在配置类当中对第三方bean进行集中的配置管理)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br><br>    <span class="hljs-comment">//声明第三方bean</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span><br>          <span class="hljs-comment">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">reader</span><span class="hljs-params">(DeptService deptService)</span>&#123;<br>        System.out.println(deptService);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>通过@Bean注解的name或value属性可以声明bean的名称，如果不指定，默认bean的名称就是方法名</li><li>如果第三方bean需要依赖其他bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配</li></ul></li></ul><h4 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h4><ul><li>SpringBoot的自动配置就是当spring容器启动后，一些配置类、bean对象就自动存入到IOC容器中，不需要手动声明，从而简化开发，省去繁琐的配置操作</li></ul><h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><ul><li>方案一：@ComponentScan组件扫描（使用繁琐，性能低）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&#123;&quot;com.example&quot;,&quot;com.itheima&quot;&#125;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> class ...&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>方案二：@Import导入。使用@Import导入的类会被Spring加载到IOC容器中，导入形式主要有以下几种：<ul><li>导入 普通类</li><li>导入 配置类</li><li>导入 ImportSelector接口实现类</li><li>@EnableXxxx注解，封装@Import注解（方便）</li></ul></li></ul><h5 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h5><p>@SpringBootApplication</p><ul><li>该注解标识在SpringBoot工程引导类上，是SpringBoot中最重要的注解。该注解由三个部分组成<ul><li>@SpringBootConfiguration：该注解与@Configuration注解作用相同，用来声明当前也是一个配置类</li><li>@ComponentScan：组件扫描，默认扫描当前引导类所在包及其子包</li><li>@EnableAutoConfiguration：SpringBoot实现自动化配置的核心注解</li></ul></li></ul><p>@Condition</p><ul><li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring IOC容器中</li><li>位置：方法、类</li><li>@Condition本身是一个父注解<ul><li>@ConditionOnClass：判断环境中是否有对应字节码文件，才注册bean到IOC容器</li><li>@ConditionOnMissingBean：判断环境中没有对应的bean（类型或名称），才注册bean到IOC容器</li><li>@ConditionOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器</li></ul></li></ul><h5 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h5><ul><li><p>实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为SpringBoot的starter</p></li><li><p>步骤</p><ul><li>第1步：创建自定义starter模块（进行依赖管理）<ul><li>把阿里云OSS所有的依赖统一管理起来</li></ul></li><li>第2步：创建autoconfigure模块<ul><li>在starter中引入autoconfigure （我们使用时只需要引入starter起步依赖即可）</li></ul></li><li>第3步：在autoconfigure中完成自动配置<ol><li>定义一个自动配置类，在自动配置类中将所要配置的bean都提前配置好</li><li>定义配置文件，把自动配置类的全类名定义在配置文件中</li></ol></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/renkelin/my-pic-bed/main/web1.png"></p><h3 id="Maven-1"><a href="#Maven-1" class="headerlink" title="Maven"></a>Maven</h3><h4 id="分模块设计"><a href="#分模块设计" class="headerlink" title="分模块设计"></a>分模块设计</h4><ul><li>将项目按照功能拆分成若干个子模块，方便项目的管理维护、扩展，也方便模块间的相互调用、资源共享</li><li>注意：<ul><li>分模块设计需要先针对模块功能进行设计，再进行编码。不会将工程开发完毕，然后进行拆分</li></ul></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>概念：<strong>继承</strong>描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承</p></li><li><p>作用：简化依赖配置、统一管理依赖</p></li><li><p>实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="继承关系实现"><a href="#继承关系实现" class="headerlink" title="继承关系实现"></a>继承关系实现</h5><ul><li>创建maven模块tlias-parent，该工程为<strong>父工程</strong>，设置<strong>打包方式pom</strong>(默认jar)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在<strong>子工程</strong>的pom.xml文件中，配置继承关系</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../tlias-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在<strong>父工程</strong>中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h5><ul><li><p>在maven中，可以在父工程的pom文件中通过<code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本</p><ul><li>父工程：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--统一管理依赖版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>子工程：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>子工程引入依赖时，无需指定&lt;version&gt;版本号，父工程统一管理。变更依赖版本，只需在父工程中统一变更</li></ul></li><li><p>也可以通过自定义属性及属性引用的形式，在父工程中将依赖的版本号进行集中管理维护</p><ul><li>自定义属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>引用属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>面试题：<code>&lt;dependencyManagement&gt;</code> 与 <code>&lt;dependencies&gt;</code> 的区别是什么?</strong></p></li></ul><blockquote><p> <code>&lt;dependencies&gt;</code> 是直接依赖，在父工程配置了依赖，子工程会直接继承下来</p><p><code>&lt;dependencyManagement&gt;</code> 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</p></blockquote><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><ul><li><p>聚合：将多个模块组织成一个整体，同时进行项目的构建。</p></li><li><p>聚合工程：一个不具有业务功能的“空”工程（有且仅有一个pom文件） </p></li><li><p>作用：快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</p></li><li><p>maven中可以通过&lt;modules&gt;设置当前聚合工程所包含的子模块名称</p></li></ul><h4 id="继承与聚合"><a href="#继承与聚合" class="headerlink" title="继承与聚合"></a>继承与聚合</h4><ul><li>作用<ul><li>聚合用于快速构建项目</li><li>继承用于简化依赖配置、统一管理依赖</li></ul></li><li>相同点<ul><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul></li><li>不同点<ul><li>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li></ul></li></ul><h4 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h4><h5 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h5><ul><li>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题</li><li>依赖查找顺序：<ul><li>本地仓库</li><li>私服</li><li>中央仓库</li></ul></li><li>注意：<ul><li>私服在企业项目开发在，一个项目&#x2F;公司，只需要一台（无需自己搭建）</li></ul></li></ul><h5 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a>上传和下载</h5><p><img src="https://raw.githubusercontent.com/renkelin/my-pic-bed/main/sifu.png"></p><h5 id="私服配置"><a href="#私服配置" class="headerlink" title="私服配置"></a>私服配置</h5><p>使用私服，需要在maven的settings.xml配置文件中，做如下配置：</p><ol><li><p>需要在 <strong>servers</strong> 标签中，配置访问私服的个人凭证(访问的用户名和密码)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <strong>mirrors</strong> 中只配置我们自己私服的连接地址(如果之前配置过阿里云，需要直接替换掉)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>需要在 <strong>profiles</strong> 中，增加如下配置，来指定snapshot快照版本的依赖，依然允许使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>allow-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果需要上传自己的项目到私服上，需要在项目的pom.xml文件中，增加如下配置，来配置项目发布的地址(也就是私服的地址)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- release版本的发布地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- snapshot版本的发布地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>发布项目，直接运行 deploy 生命周期即可 (发布时，建议跳过单元测试)</p></li></ol><h5 id="启动本地私服"><a href="#启动本地私服" class="headerlink" title="启动本地私服"></a>启动本地私服</h5><ol><li><p>解压： apache-maven-nexus.zip</p></li><li><p>进入目录： apache-maven-nexus\nexus-3.39.0-01\bin</p></li><li><p>启动服务：双击 start.bat </p></li><li><p>访问服务：localhost:8081</p></li><li><p>私服配置说明：将上述配置私服信息的 192.168.150.101 改为 localhost</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backend</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
